import com.diffplug.gradle.spotless.SpotlessTask
import lfformat.LfFormatStep

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.xtext:xtext-gradle-plugin:${xtextGradleVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "${shadowJarVersion}"
    id 'java'
    id 'jacoco'
    id "com.diffplug.spotless" version "${spotlessVersion}"
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'kotlin'
    compileKotlin {
        destinationDir = compileJava.destinationDir
        kotlinOptions {
            jvmTarget = kotlinJvmTarget
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = kotlinJvmTarget
        }
    }

    dependencies {
        implementation platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
        // https://mvnrepository.com/artifact/com.google.inject/guice
        implementation group: 'com.google.inject', name: 'guice', version: guiceVersion
        // https://picocli.info/
        implementation group: 'info.picocli', name: 'picocli', version: picocliVersion
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    }

    apply from: "${rootDir}/gradle/source-layout.gradle"
    apply plugin: 'eclipse'

    // generate xtend sources before kotlin compilation
    compileKotlin.dependsOn(":org.lflang:generateXtextLanguage")

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    configurations.all {
        exclude group: 'asm'
    }

    // Delete generated sources on `gradle clean`
    clean.doFirst {
        project.logger.info("Deleting ${projectDir}/src-gen")
        delete "${projectDir}/src-gen/"
    }
}

// Our CI uses --tests filters, which fails if some
// subprojects have no matching test.
//
// https://stackoverflow.com/questions/26147480/how-to-make-gradle-not-to-mark-build-failed-if-no-tests-are-found
subprojects {
    test {
        filter {
            setFailOnNoMatchingTests(false)
        }
        testLogging {
            // print exception message when a test fails.
            exceptionFormat "full"
        }
    }
}


spotless {
    repositories {
        mavenCentral()
    }
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }

    format 'linguaFranca', {
        addStep(LfFormatStep.create(project.projectDir))
        target 'test/*/src/**/*.lf' // you have to set the target manually
        targetExclude 'test/**/failing/**'
    }

    java {
        target 'org.lflang*/src/**/*.java', 'buildSrc/**/*.java'
        // The following is quoted from https://github.com/google/google-java-format
        // "Note: There is no configurability as to the formatter's algorithm for formatting.
        // This is a deliberate design decision to unify our code formatting on a single format."
        googleJavaFormat(googleJavaFormatVersion).reflowLongStrings()
        formatAnnotations()
    }
}
tasks.withType(SpotlessTask) { it.dependsOn(":org.lflang:jarCliTools") }
