dependencies {
    implementation project(':org.lflang')
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"    
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.7.2"    
    testImplementation "org.junit.platform:junit-platform-commons:1.7.2"    
    testImplementation "org.junit.platform:junit-platform-engine:1.7.2"    
    testImplementation "org.opentest4j:opentest4j:1.2.0"    
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
}

apply plugin: 'java'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/reports/jacoco") //default directory where jacoco generates test reports
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/html/jacoco")
        xml.destination file("${buildDir}/reports/xml/jacoco")
        csv.destination file("${buildDir}/reports/csv/jacoco")
    }
    def fileFilter = [  'org/lflang/services/**', 
                        'org/lflang/linguaFranca/impl/**', 
                        'org/lflang/serializer/**', 
                        'org/lflang/linguaFranca/util/**', 
                        'org/lflang/linguaFranca/**',
                        'org/lflang/parser/antlr/**'
                    ]
    def mainCls = fileTree(dir: "$project.buildDir/../../org.lflang/build/classes/java/main", excludes: fileFilter)
    def mainSrc =  "$project.buildDir/../../org.lflang/xtend-gen"
    def javaSrc = "$project.buildDir/../../org.lflang/src"
    
    classDirectories.from = files(mainCls)
    sourceDirectories.from = files([mainSrc, javaSrc])
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    // Suggested by Gradle documentation: https://guides.gradle.org/performance/#parallel_test_execution
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	useJUnitPlatform()
    finalizedBy jacocoTestReport
    workingDir = ".."
}

task runSingleTest(type: JavaExec) {
    description = "Execute a single test, use with eg --args test/Python/src/Minimal.lf"
    group = "test"
    classpath = sourceSets.test.runtimeClasspath
    workingDir = ".."
    mainClass = 'org.lflang.tests.RunSingleTestMain'
}
