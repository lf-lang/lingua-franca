/**
 * This program is a concept demonstration showing how higher-order
 * combinators could be defined in the C target. This example has
 * a ScatterGather reactor that, upon receiving an input array,
 * creates as many instances of a Worker reactor as there are elements
 * in the array, distributes the elements of the array to those workers,
 * and puts onto the reaction queue all reactions in the workers that are
 * sensitive to those inputs.  When the workers are finished executing,
 * a second reaction in ScatterGather will execute. That second reaction
 * collects all the results of the workers into an array and sends the
 * result to the output.
 * 
 * This program should not be used as a model for creating designs.
 * It uses internal, implementation-specific details that will eventually
 * be abstracted out into an API.
 */
target C { 
    threads: 4
};
reactor Source {
    output out:int[];
    reaction(startup) -> out {=
        SET_NEW_ARRAY(out, 8);
        for (int i=0; i < 8; i++) {
            out->value[i] = i;
        }
    =}
}
reactor Worker(id:int(2)) {
    input worker_in:int;
    output worker_out:int;
    reaction(worker_in) -> worker_out {=
        printf("Worker received in first reaction%d\n", worker_in->value);
        SET(worker_out, worker_in->value * self->id);
    =}
    reaction(worker_in) {=
        printf("Worker received second %d\n", worker_in->value);
    =}
}
reactor ScatterGather2 {
    input in:int[];
    output out:int[];
    
    // Create a state variable to pass the workers created in
    // the first reaction to the second reaction. This is an array
    // of pointers to the self struct of the worker.
    // The type of a self struct is the reactor class name, converted to
    // lower case, followed by _self_t.
    state workers:worker_self_t**({=NULL=});
    
    // The data type of the upstream source does not match the
    // data type of the workers' inputs, so we have to create an
    // array of places to store the input data.
    state worker_inputs:worker_worker_in_t*({=NULL=});
    
    // Create a template worker, which ensures that downstream
    // levels are correct. The template worker could have any
    // number of reactions sensitive to the input we will provide.
    template_worker = new Worker();
    reaction(in) -> template_worker.worker_in {=
        SET(template_worker.worker_in, in->value[0]);
        // SCATTER(in, worker_in, Worker, self->workers, id);
        // Create an array of pointers to work self structs.
        self->workers = malloc(in->length * sizeof(worker_self_t*));
        // The data type of the upstream source does not match the
        // data type of the workers' inputs, so we have to create an
        // array of places to store the input data.
        self->worker_inputs = malloc(in->length * sizeof(worker_worker_in_t));
        pthread_mutex_lock(&mutex);
        for (int i=1; i < in->length; i++) {
            printf("Initializing worker %d\n", i);
            self->workers[i] = new_Worker();
            self->workers[i]->id = i;
            printf("HERE %d\n", i);
            self->workers[i]->_lf_worker_in = &self->worker_inputs[i];
            self->worker_inputs[i].is_present = true;
            self->worker_inputs[i].value = in->value[i]; // Copies the value or pointer.
            self->worker_inputs[i].num_destinations = 1;
            trigger_t worker_trigger = self->workers[i]->_lf__worker_in;
            for(int j = 0; j < worker_trigger.number_of_reactions; j++) {
                worker_trigger.reactions[j]->index = self->_lf__reaction_0.index + j + 1;
                // The chain_id is the same for each worker, which ensures that the
                // second reaction below will not be invoked before all the workers
                // have finished.  The second reaction below has a larger level than
                // the workers, and since the chain_id overlaps, the workers must
                // finish before the reaction will execute.
                worker_trigger.reactions[j]->chain_id = self->_lf__reaction_0.chain_id;
                pqueue_insert(reaction_q, worker_trigger.reactions[j]);
            }
            printf("Initialized worker %d\n", i);
        }
        // Signal all the worker threads.
        pthread_cond_broadcast(&reaction_q_changed);
        pthread_mutex_unlock(&mutex);
    =}
    reaction(in, template_worker.worker_out) -> out {=
        SET_NEW_ARRAY(out, in->length);
        // FIXME: We should be checking template_worker.worker_out_is_present.
        // But what do we do if it is not present?
        out->value[0] = template_worker.worker_out->value;
        for (int i=1; i < in->length; i++) {
            printf("Gather received %d at index %d.\n", self->workers[i]->_lf_worker_out.value, i);
            out->value[i] = self->workers[i]->_lf_worker_out.value;
        }
        // FIXME: Invoke the destructor for each of the workers, once
        // they have a destructor.
    =}
}
reactor Print {
    input in:int[];
    reaction(in) {=
        printf("[");
        for(int i = 0; i < in->length; i++) {
            printf("%d", in->value[i]);
            if (i < in->length - 1) {
                printf(", ");
            }
        }
        printf("]\n");
    =}
}
main reactor {
    s = new Source();
    g = new ScatterGather2();
    p = new Print();
    s.out -> g.in;
    g.out -> p.in;
}