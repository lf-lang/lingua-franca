/**
 * Basic pipeline pattern where a periodic source feeds
 * a chain of reactors that can all execute in parallel
 * at each logical time step.
 *
 * The workers argument specifies the number of worker
 * workers, which enables the reactors in the chain to
 * execute on multiple cores simultaneously.
 *
 * This uses the TakeTime reactor to perform computation.
 * If you reduce the number of worker workers to 1, the
 * execution time will be approximately four times as long.
 *
 * @author Edward A. Lee
 * @author Marten Lohstroh
 */
target C {
    workers: 4,
}

/**
 * Send counting sequence periodically.
 *
 * @param offset The starting time.
 * @param period The period.
 * @param init The first output.
 * @param increment The increment between outputs
 */
reactor SendCount(
    offset:time(0),
    period:time(1 sec),
    init:int(0),
    increment:int(1)
) {
    state count:int(init);
    output out:int;
    timer t(offset, period);
    reaction(t) -> out {=
        lf_set(out, self->count);
        self->count += self->increment;
    =}
}

/**
 * Receive an input and report the elapsed logical tag
 * and the value of the input. Request stop when the 10th
 * value has been received.
 */
reactor Receive {
    input in:int;
    reaction(in) {=
        lf_print("At elapsed tag (%lld, %d), received %d.",
            lf_time_logical_elapsed(), lf_tag().microstep,
            in->value
        );
        if (in->value >= 10) {
            request_stop();
        }
    =}
}

/**
 * When triggered, take the specified amount of physical time
 * before outputting the value of the trigger.
 *
 * @param approximate_time The approximate amount of physical
 *  time to take for each input.
 *
 * @input in A triggering input.
 *
 * @output out The triggering input.
 */
reactor TakeTime(
    approximate_time:time(100 msec)
) {
    input in:int;
    output out:int;
    reaction(in) -> out {=
        instant_t start_time = lf_time_physical();
        while (lf_time_physical() < start_time + self->approximate_time) {
            // Do nothing.
        }
        lf_set(out, in->value);
    =}
}

main reactor {
    r0 = new SendCount(period = 100 msec);
    rp = new[4] TakeTime(approximate_time = 100 msec);
    r5 = new Receive();
    // Uncomment the "after" clause to expose parallelism.
    r0.out, rp.out -> rp.in, r5.in // after 100 msec;
}
