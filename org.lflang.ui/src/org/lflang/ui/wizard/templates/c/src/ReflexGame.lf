/**
 * This example illustrates the use of logical and physical actions,
 * asynchronous external inputs, the use of startup and shutdown
 * reactions, and the use of actions with values.
 *
 * The example is fashioned after an Esterel implementation given by
 * Berry and Gonthier in "The ESTEREL synchronous programming language:
 * design, semantics, implementation," Science of Computer Programming,
 * 19(2) pp. 87-152, Nov. 1992, DOI: 10.1016/0167-6423(92)90005-V.
 *
 * @author Edward A. Lee
 * @author Marten Lohstroh
 */
target C {
    keepalive: true
};
/**
 * Produce a counting sequence at random times with a minimum
 * and maximum time between outputs specified as parameters.
 *
 * @param min_time The minimum time between outputs.
 * @param max_time The maximum time between outputs.
 */
reactor RandomSource(min_time:time(2 sec), max_time:time(8 sec)) {
    preamble {=
        // Generate a random additional delay over the minimum.
        // Assume millisecond precision is enough.
        interval_t additional_time(interval_t min_time, interval_t max_time) {
            int interval_in_msec = (max_time - min_time) / MSEC(1);
            return (rand() % interval_in_msec) * MSEC(1);
        }
    =}
    input another:int;
    output out:int;
    logical action prompt(min_time);
    state count:int(0);

    reaction(startup) -> prompt {=
        printf("***********************************************\n");
        printf("Watch for the prompt, then hit Return or Enter.\n");
        printf("Type Control-D (EOF) to quit.\n\n");

        // Random number functions are part of stdlib.h, which is included by reactor.h.
        // Set a seed for random number generation based on the current time.
        srand(time(0));

        // Schedule the first event.
        lf_schedule(prompt, additional_time(0, self->max_time - self->min_time));
    =}
    reaction(prompt) -> out {=
        self->count++;
        printf("%d. Hit Return or Enter!", self->count);
        fflush(stdout);
        lf_set(out, self->count);
    =}
    reaction(another) -> prompt {=
        // Schedule the next event.
        lf_schedule(prompt, additional_time(0, self->max_time - self->min_time));
    =}
}
/**
 * Upon receiving a prompt, record the time of the prompt,
 * then listen for user input. When the user hits return,
 * then schedule a physical action that records the time
 * of this event and then report the response time.
 */
reactor GetUserInput {
    preamble {=
        // Thread to read input characters until an EOF is received.
        // Each time a newline is received, schedule a user_response action.
        void* read_input(void* user_response) {
            int c;
            while(1) {
                while((c = getchar()) != '\n') {
                    if (c == EOF) break;
                }
                lf_schedule_copy(user_response, 0, &c, 1);
                if (c == EOF) break;
            }
            return NULL;
        }
    =}

    physical action user_response:char;
    state prompt_time:time(0);
    state total_time_in_ms:int(0);
    state count:int(0);

    input prompt:int;
    output another:int;

    reaction(startup) -> user_response {=
        // Start the thread that listens for Enter or Return.
        lf_thread_t thread_id;
        lf_thread_create(&thread_id, &read_input, user_response);
    =}

    reaction(prompt) {=
        self->prompt_time = lf_time_logical();
    =}

    reaction(user_response) -> another {=
        if (user_response->value == EOF) {
            lf_request_stop();
            return;
        }
        // If the prompt_time is 0, then the user is cheating and
        // hitting return before being prompted.
        if (self->prompt_time == 0LL) {
            printf("YOU CHEATED!\n");
            lf_request_stop();
        } else {
            int time_in_ms = (lf_time_logical() - self->prompt_time) / 1000000LL;
            printf("Response time in milliseconds: %d\n", time_in_ms);
            self->count++;
            self->total_time_in_ms += time_in_ms;
            // Reset the prompt_time to indicate that there is no new prompt.
            self->prompt_time = 0LL;
            // Trigger another prompt.
            lf_set(another, 42);
        }
    =}

    reaction(shutdown) {=
        if (self->count > 0) {
            printf("\n**** Average response time: %d.\n", self->total_time_in_ms/self->count);
        } else {
            printf("\n**** No attempts.\n");
        }
    =}
}
main reactor ReflexGame {
    p = new RandomSource();
    g = new GetUserInput();
    p.out -> g.prompt;
    g.another -> p.another;
}
