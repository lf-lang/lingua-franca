/**
 * This is port of the BasicROS C example to the Cpp target.
 *
 * Just like the original, its aim is to exchange messages between reactors using ROS2.
 * Also like the original, there is a MessageGenerator reactor that publishes 
 * String messages on 'topic' and a MessageReceiver reactor that subscribes to 'topic'.
 *
 * 1- To get this example working, install full ROS 2 desktop
 *    ('https://index.ros.org/doc/ros2/Installation/Foxy/').
 * 
 *    Please note that 'colcon' should also be installed.
 *    See 'https://index.ros.org/doc/ros2/Tutorials/Colcon-Tutorial/' for more details.
 *
 * 2- Follow the instruction in 
 *    https://index.ros.org/doc/ros2/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber/
 *    **section 1** to create a 'cpp_pubsub' package in the current (example/ROS) folder.
 * 
 * 3- Follow section 2.2 to modify the package.xml.
 *
 * 4- Place this file in the src/ directory as BasicROS.lf and replace the CMakeLists.txt of your project
 *    by the one in the example directory
 *    (https://github.com/icyphy/lingua-franca/blob/master/example/Cpp/src/ROS/CMakeLists.txt)
 *
 * 5- From the root of your project, compile the lingua franca code with
 *        lfc src/BasicROS.lf
 *
 * 6- Use colcon to build the cpp_pubsub package
 *        colcon build --packages-select cpp_pubsub
 *
 * 7- Source the appropriate setup.bash and run the package
 *        source install/setup.bash
 *        ros2 run cpp_pubsub talker
 *
 */

target Cpp {
    keepalive: true,
    logging: DEBUG,
    no-compile: true
};

public preamble {=
    #include <functional>
    #include <memory>
    #include <string>
    #include <iostream>

    #include "rclcpp/rclcpp.hpp"
    #include "std_msgs/msg/string.hpp"
=}

reactor MessageGenerator {
    public preamble {=
        class MinimalPublisher : public rclcpp::Node {
            public:
                MinimalPublisher() : Node("minimal_publisher") {
                    publisher_ = this->create_publisher<std_msgs::msg::String>("topic", 10);
                }

                rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
        };
    =}

    state minimal_publisher:{=std::shared_ptr<MinimalPublisher>=};
    state i:int(0);
    timer t(0, 500 msec);

    reaction(startup) {=
        std::cout << "Executing startup." << std::endl;
        this->minimal_publisher = std::make_shared<MinimalPublisher>();
    =}

    reaction(t) {=
        auto message = std_msgs::msg::String();
        std::cout << "Executing timer reaction." << std::endl;
        message.data = "Hello, world! " + std::to_string(this->i++);
        RCLCPP_INFO(this->minimal_publisher->get_logger(),
                  "Sender publishing: '%s'", message.data.c_str());
        this->minimal_publisher->publisher_->publish(message);
        rclcpp::spin_some(this->minimal_publisher);
        std::cout << "Done executing timer reaction." << std::endl;
    =}

    reaction(shutdown) {=
        std::cout << "Executing shutdown reaction." << std::endl;
        rclcpp::shutdown();
    =}
}

reactor MessageReceiver {
    public preamble {=
        class MinimalSubscriber : public rclcpp::Node {
            public:
                MinimalSubscriber(reactor::PhysicalAction<std::string>& physical_action, const reactor::Reactor& r)
                    : Node("minimal_subscriber"), physical_action_(physical_action), reactor_(r) {
                    subscription_ = this->create_subscription<std_msgs::msg::String>(
                          "topic", 10, std::bind(&MinimalSubscriber::topic_callback, this, std::placeholders::_1)
                    );
                }

            private:
                reactor::PhysicalAction<std::string>& physical_action_;
                const reactor::Reactor& reactor_;

                void topic_callback(const std_msgs::msg::String::SharedPtr msg) const {
                    RCLCPP_INFO(this->get_logger(), "I heard: '%s'", msg->data.c_str());
                    std::cout << "At physical time (" << reactor_.get_elapsed_physical_time() 
                              << ") calling schedule_value with value " 
                              << msg->data << " and length " << msg->data.length()
                              << "." << std::endl;
                    physical_action_.schedule(msg->data);
                }

                rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;
        };
    =}

    physical action ros_message_a:std::string;
    timer t(0, 500 msec);
    state minimal_subscriber:{=std::shared_ptr<MinimalSubscriber>=};

    reaction(startup) ->  ros_message_a {=
        char *argv[] = {(char*)"BasicROSPub", NULL};
        rclcpp::init(1, argv);
        this->minimal_subscriber = std::make_shared<MinimalSubscriber>(ros_message_a, *this);
    =}

    reaction(ros_message_a){=
        std::cout << "Physical action triggered." << std::endl;
        std::cout << "Received: " << *(ros_message_a.get()) << std::endl;
    =}

    reaction(t) {=
        rclcpp::spin_some(this->minimal_subscriber);
    =}

    reaction(shutdown) {=
        rclcpp::shutdown();
    =}
}

main reactor {
    sender = new MessageGenerator();
    receiver = new MessageReceiver();
}

