/**
 * Rhythm generator using samples of percussion instruments.
 * This program runs on MacOS and Linux, at least.
 * 
 * This program opens a simple, terminal-based user interface for
 * specifying a rhythmic audio output. The rhythm is displayed in
 * the terminal as it is generated and produced as audio using
 * sample audio files.
 * 
 * This program also uses ncurses, which needs to be installed on your machine
 * for this to work. It also uses the library utility sensor_simulator,
 * provided with Lingua Franca, which uses keyboard input to simulate
 * asynchronous sensors and beeps to simulate timed output.
 * See sensor_simulator.h for documentation.
 * 
 * The merengue rhythm comes from here: 
 * https://www.8notes.com/school/lessons/percussion/merengue.asp
 * 
 * The sound files come from here:
 * https://freewavesamples.com
 * 
 * Sound files are assumed to be wav files with sample rate 44,100,
 * 16-bit samples, linear PCM encoded.
 * Use afconvert on Mac to convert to the assumed input format.
 * 
 * @author Edward A. Lee
 * 
 * @see RhythmDistributed.lf
 * @see RhythmDistributedNoUI.lf
 */
target C {
    threads: 2,
    tracing: true,
    files: [
        "/lib/C/util/sensor_simulator.c", "/lib/C/util/sensor_simulator.h",
        "/lib/C/util/wave_file_reader.c", "/lib/C/util/wave_file_reader.h",
        "/lib/C/util/audio_loop_mac.c", "/lib/C/util/audio_loop.h",
        "/lib/C/util/audio_loop_linux.c",
        "sounds/Bass-Drum-1.wav", "sounds/Hi-Bongo.wav", "sounds/Claves.wav", "sounds/High-Conga-1.wav",
        "sounds/Cowbell-1.wav", "sounds/Cuica-1.wav", "sounds/Guiro.wav",
        "sounds/Ensoniq-ESQ-1-Snare.wav", "sounds/Floor-Tom-1.wav"],
    // Include cmake support for some needed functionality
    cmake-include: [
        "/lib/C/util/sensor_simulator.cmake", // Enable support for the sensor simulator
        "include/ncurses-extension.cmake", // Enable support for ncurses
        "include/mlib-extension.cmake"] // Enable support for the math lib
};

import PlayWaveform from "PlayWaveform.lf"

preamble {=
    #include <ncurses.h>
    #include <sys/stat.h> // Defines mkdir.
    #include "sensor_simulator.h"
    
    /////////////////////////////
    // Configuration of the audio.
    
    // Beat pattern with 1 note followed by 7 silences, repeated.
    #define DOWNBEAT 0x0101
    
    // Merenque in binary covers two bars (in temporal order):  1001 1010 1010 1111
    // Reverse the order to get the bit sequence: 1111 0101 0101 1001
    #define MERENGUE 0xf559
    // Merengue emphasis in binary (in temporal order): 1001 0010 0010 1000
    // Reverse the order to get the bit sequence: 0001 0100 0100 1001
    #define MERENGUE_EMPHASIS 0x1449
    
    // Bossa nova: In temporal order: 1001 0010 0010 0110
    // Note: last '1' is questionable. Held over from previous '1'.
    // Reverse order: 0110 0100 0100 1001
    #define BOSSA_NOVA 0x6449
    #define BOSSA_NOVA_EMPHASIS 0x2449
    
    // Samba: Temporal order: 0000 1010 1101 1010
    // Reversed: 0101 1011 0101 0000
    // Alt: 0101 1011 1011 1011
    // Rev: 1101 1101 1101 1010
    #define SAMBA 0xddda
    #define SAMBA_EMPHASIS 0x99ca
    
    //////////////////////////////////////
    // Configuration of the user interface.

    char* instructions[] = {
        "Basic control:",
        "  x: quit",
        "  +: speed up",
        "  -: slow down",
        "Instrument:",
        "  0: none",
        "  1: bass drum",
        "  2: bongo",
        "  3: claves",
        "  4: conga",
        "  5: cowbell",
        "  6: cuica",
        "  7: guiro",
        "  8: snare",
        "  9: tom",
        "Rhythm:",
        "  d: down beat",
        "  m: merengue",
        "  b: bossa nova",
        "  s: samba"
    };
    int instructions_length = 20;
=}

/**
 * Reactor that outputs notes (which carry an emphasis))
 * according to a specified rhythm. The minimum time
 * between notes is given by the 'tick_duration' state
 * variable. This can be adjusted up or down.
 * This is designed to coordinate between multiple
 * instances of this RhythmSource so each can change
 * the rhythm and tempo while keeping the others in sync.
 * 
 * @param sixteenth Initial duration of one sixteenth note.
 * @param delta The amount by which to change sixteenth when tempo is increased or decreased.
 * @param message An array of strings to display.
 * @param message_length The length of the message array.
 */
reactor RhythmSource(
    sixteenth:time(200 msec),
    delta:time(10 msec),
    message:char**({=instructions=}),
    message_length:int({=instructions_length=}),
    log_to_file:bool(false)
) {    
    input rhythm_change_in:char;  // To change the rhythm.
    input tempo_change_in:interval_t;    // To change the tempo.

    output note:float;         // To play a note with the given emphasis.
    output instrument:int;     // Instrument selection.
    output rhythm_change:char; // To change the rhythm.
    output tempo_change:interval_t;   // To change the tempo.
    
    state tick_duration:time(200 msec);
    logical action tick;
    
    // Count of sixteenth notes.
    state count:int(0);
    
    // Action to be invoked when a key is pressed.
    physical action key:char;
    
    // Indicator of when to make a sound.
    state rhythm:int({=DOWNBEAT=});
    
    // Indicator of whether to emphasize the sound.
    state emphasis:int({=DOWNBEAT=});

   // Currently active rhythm. This becomes
    // active from rhythm on the downbeat.
    state active_rhythm:int({=DOWNBEAT=});
    
    // Currently active emphasis. This becomes
    // active from rhythm on the downbeat.
    state active_emphasis:int({=DOWNBEAT=});
        
    // Position of the cursor in the terminal window.
    state cursor:int(0);
    
    reaction(startup) -> key, note, tick {=
        // Start the sensor simulator, which starts ncurses.
        char* log_file_name = NULL;
        if (self->log_to_file) {
            log_file_name = calloc(40, sizeof(char));
        	// FIXME: log directory won't work in Windows (wrong separator).
        	mkdir("log", 0755);
        	int fed_id = get_fed_id();
        	if (fed_id < 0) {
        		sprintf(log_file_name, "log/Rhythm_%lld.log", get_logical_time());
      		} else {
        		sprintf(log_file_name, "log/Rhythm_%d_%lld.log", fed_id, get_logical_time());
        	}
        }
        if (start_sensor_simulator(
            self->message, self->message_length, 16, log_file_name, LOG_LEVEL_ALL
        )) {
            error_print_and_exit("ERROR: Failed to start sensor simulator.");
        }
        
        // Register action to trigger on key press.
        register_sensor_key('\0', key);
        
        schedule(tick, self->tick_duration);
    =}
    
    /**
     * React to a key press.
     */
    reaction(key) -> instrument, rhythm_change, tempo_change {=
        int numeric;
        switch (key->value) {
            case '0':
                SET(instrument, 0);
                break;
            case 'd':
                self->rhythm = DOWNBEAT;
                self->emphasis = DOWNBEAT;
                SET(rhythm_change, 'd');
                info_print("Changing rhythm to downbeat only.");
                break;
            case 'm':
                self->rhythm = MERENGUE;
                self->emphasis = MERENGUE_EMPHASIS;
                SET(rhythm_change, 'm');
                info_print("Changing rhythm to merengue.");
                break;
            case 'b':
                self->rhythm = BOSSA_NOVA;
                self->emphasis = BOSSA_NOVA_EMPHASIS;
                SET(rhythm_change, 'b');
                info_print("Changing rhythm to bossa nova.");
                break;
            case 's':
                self->rhythm = SAMBA;
                self->emphasis = SAMBA_EMPHASIS;
                SET(rhythm_change, 's');
                info_print("Changing rhythm to samba.");
                break;
            case 'x':
                request_stop();
                break;
            case '+':
                self->tick_duration -= self->delta;
                if (self->tick_duration < self->delta) {
                    self->tick_duration = self->delta;
                }
                SET(tempo_change, self->delta);
                info_print("Speeding up tempo.");
                break;
            case '-':
                self->tick_duration += self->delta;
                SET(tempo_change, -self->delta);
                info_print("Slowing down tempo.");
                break;
            default:
                numeric = (int)key->value;
                if (numeric >= 49 && numeric <= 57) {
                    // A digit between 1 and 9.
                    SET(instrument, numeric - 48);
                	info_print("Changing instrument to %c.", numeric);
                }
        }
    =}

	/**
	 * React to a remote rhythm change.
	 */
    reaction(rhythm_change_in) {=
        switch (rhythm_change_in->value) {
            case 'm':
                self->rhythm = MERENGUE;
                self->emphasis = MERENGUE_EMPHASIS;
                info_print("REMOTE: Changing rhythm to merengue.");
                break;
            case 'b':
                self->rhythm = BOSSA_NOVA;
                self->emphasis = BOSSA_NOVA_EMPHASIS;
                info_print("REMOTE: Changing rhythm to bossa nova.");
                break;
            case 's':
                self->rhythm = SAMBA;
                self->emphasis = SAMBA_EMPHASIS;
                info_print("REMOTE: Changing rhythm to samba.");
                break;
            default:
                self->rhythm = DOWNBEAT;
                self->emphasis = DOWNBEAT;
                info_print("REMOTE: Changing rhythm to downbeat only.");
                break;
        }
    =}
    
    reaction(tempo_change_in) {=
        self->tick_duration -= tempo_change_in->value;
        info_print("REMOTE: Changing the tempo period by %lld ns.",
            -tempo_change_in->value
        );
    =}

    reaction(tick) -> note, tick {=
        int beeped = 0;
        int position = 0;
        position = 1 << self->count;
        if (position & self->active_rhythm) {
            double emphasis = 0.25;
            if (position & self->active_emphasis) {
                emphasis = 1.0;
            }
            SET(note, emphasis);
            beeped++;
        }
        if (beeped > 0) {
            if (position & self->active_emphasis) {
                show_tick("!");
            } else {
                show_tick("*");
            }
        } else {
            show_tick(".");
        }
        self->count++;
        if (self->count == 16) {
            self->active_rhythm = self->rhythm;
            self->active_emphasis = self->emphasis;
            self->count = 0;
        }
        
        schedule(tick, self->tick_duration);
    =}
    
    reaction(shutdown) {=
        end_sensor_simulator();
    =}
}

main reactor {
    source = new RhythmSource();
    play = new PlayWaveform();
    source.note -> play.note;
    source.instrument -> play.waveform;
}