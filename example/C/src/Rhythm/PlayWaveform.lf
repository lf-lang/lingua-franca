/**
 * Reactor to play a waveform defined in a .wav file.
 * It serves as a demonstration for how to write Lingua Franca
 * programs that use Apple's AudioToolbox.
 * 
 * To use this, you must include the target parameters that are
 * given below.
 * 
 * This reactor provides a small collection of built-in audio
 * waveforms which are read at startup time from .wav files.
 * The waveform input specifies which of the waveforms to play
 * upon the next `note` input received.
 * It is a number between 0 and NUM_WAVEFORMS. If a number outside
 * this range is received, then simple tick sounds will be produced.
 * Number 0 is specially interpreted for silence.
 *
 * The `note` input is a number, normally between 0.0 and 1.0,
 * that specifies the loudness of the note. If the loudness exceeds
 * 1.0, or if too many notes are played at once, clipping may occur.
 * 
 * The sound files come from here:
 * https://freewavesamples.com
 * 
 * Sound files are assumed to be wav files with sample rate 44,100,
 * 16-bit samples, linear PCM encoded.
 * Use afconvert on Mac to convert to the assumed input format.
 * 
 * @author Edward A. Lee
 */
target C {
    // Include the following flags in the file that imports this reactor.
    // These are commented out here because this file is only compiled to a .o file
    // and is not linked, so including these flags results in a warning.
    // flags: ["-framework", "AudioToolbox", "-framework", "CoreFoundation", "-lm"],
    files: ["/lib/c/reactor-c/util/wave_file_reader.c", "/lib/c/reactor-c/util/wave_file_reader.h",
            "/lib/c/reactor-c/util/audio_loop_mac.c", "/lib/c/reactor-c/util/audio_loop.h",
            "/lib/c/reactor-c/util/audio_loop_linux.c",
            "sounds/Bass-Drum-1.wav", "sounds/Hi-Bongo.wav", "sounds/Claves.wav", "sounds/High-Conga-1.wav",
            "sounds/Cowbell-1.wav", "sounds/Cuica-1.wav", "sounds/Guiro.wav",
            "sounds/Ensoniq-ESQ-1-Snare.wav", "sounds/Floor-Tom-1.wav"],
    // Include the cmake support for the audio loop
    cmake-include: ["/lib/c/reactor-c/util/audio_loop.cmake"]
}
preamble {= 
    #include "wave_file_reader.c"
    #include "audio_loop.h"
        
    // wav files giving the waveforms.
    // These have to also be included in the files target directive.
    #define NUM_WAVEFORMS 9  // Number of waveforms.
    char* waveform_files[] = { 
    	TARGET_FILES_DIRECTORY "/Bass-Drum-1.wav",
    	TARGET_FILES_DIRECTORY "/Hi-Bongo.wav",
        TARGET_FILES_DIRECTORY "/Claves.wav",
        TARGET_FILES_DIRECTORY "/High-Conga-1.wav",
        TARGET_FILES_DIRECTORY "/Cowbell-1.wav",
        TARGET_FILES_DIRECTORY "/Cuica-1.wav",
        TARGET_FILES_DIRECTORY "/Guiro.wav",
        TARGET_FILES_DIRECTORY "/Ensoniq-ESQ-1-Snare.wav",
        TARGET_FILES_DIRECTORY "/Floor-Tom-1.wav"
    };
            
    // The waveforms themselves.
    lf_waveform_t* waveforms[NUM_WAVEFORMS + 1];
    
    lf_waveform_t empty_waveform = { 0 };
=}
 
/**
 * Produce a note when a `note` input is received.
 */
reactor PlayWaveform (
    default_waveform_id:int(0)  // Silent waveform
) {
    input note:float;
    input waveform:int;
    
    /**
     * Index of the current waveform.
     * -1 means no waveform (just make ticks)).
     */
    state waveform_id:int(default_waveform_id);
        
    reaction(startup) {=
        
        // First waveform is empty.
        waveforms[0] = &empty_waveform;
        
        // Open and read waveform files.
        for (int i = 0; i < NUM_WAVEFORMS; i++) {
            waveforms[i + 1] = read_wave_file(waveform_files[i]);
        }
        
        // Start an audio loop that will become ready to receive
        // amplitude samples of audio data.
        lf_start_audio_loop(get_logical_time());
    =}
    
    reaction(waveform) {=
        self->waveform_id = waveform->value;
    =}
    
    reaction(note) {=
        if (self->waveform_id < 0 || self->waveform_id > NUM_WAVEFORMS) {
            lf_play_audio_waveform(NULL, note->value, get_logical_time());
        } else {
            lf_play_audio_waveform(waveforms[self->waveform_id], note->value, get_logical_time());
        }
    =}
    
    reaction(shutdown) {=
        lf_stop_audio_loop();
    =}
}
