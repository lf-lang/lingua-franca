/**
 * Test case for MQTT pub/sub. In this version, the publisher and
 * subscriber are running in the same single executable program.
 * See MQTTDistributed for the more interesting case where they
 * are in separate programs.
 * 
 * The publisher sends a sequence of strings, and at the MQTTSubscriber
 * reactor, the offset parameter gives the logical time increment
 * between the publisher and the subscriber.
 * If this offset is greater than the physical
 * latency of communication through MQTT plus the clock synchronization
 * error, then the timestamps at the receiver will be deterministic.
 * They are the sender's timestamp plus the offset.
 * Otherwise, the timestamps will be larger and will match the
 * physical time at which the subscriber receives the message.
 * Since the publisher and subscriber are running in the same
 * executable, there is no clock synchronization error and the
 * communication latency should be relatively low. One to five
 * milliseconds seems typical.
 * 
 * To measure the total communication latency from the MessageGenerator,
 * through the publisher and through MQTT, set the offset to 0.
 * In this case, the subscriber will always retimestamp the received
 * message using physical time. At the end of execution, when the
 * timeout expires, the average and maximum latency will be printed.
 * 
 * To get deterministic timestamps, the offset needs to be larger
 * than the total latency. An offset of 10 msec will likely be enough.
 * 
 * Prerequisites:
 * 
 * To get this example to compile, you will need to install the Paho
 * MQTT client library, which requires that you first install
 * openSSL. To run the compiled code, you will need to have an
 * MQTT broker, such as mosquitto, running.
 * 
 * The Eclipse Paho library for MQTT clients can be obtained here:
 * https://github.com/eclipse/paho.mqtt.c.
 * 
 * This openSSL library (see https://www.openssl.org) is here:
 * https://github.com/openssl/openssl.git
 * 
 * Finally, you need an MQTT broker to be running. For example,
 * the Mosquitto Eclipse project provides one that can be downloaded
 * at https://mosquitto.org/download/.
 * Alternatively, on a Mac, you can use homebrew:
 * 
 *     brew install mosquitto
 * 
 * To start the broker and test it, you can do this:
 * 
 * 1. Start the broker in the background:
 *     > mosquitto &
 * 2. Start a command-line subscriber:
 *     > mosquitto_sub -v -t 'test/topic'
 * 3. In another terminal window, publish a message:
 *     > mosquitto_pub -t 'test/topic' -m 'Hello World'
 * 
 * @author Ravi Akella
 * @author Edward A. Lee
 */
target C {
    // Must use threaded implementation so schedule is thread safe.
    threads: 1,
    cmake-include: [
        "include/paho-extension.cmake",
        "include/mosquitto-extension.cmake",
        "include/net_utils.cmake"],
    timeout: 10 secs
};
  
import MQTTPublisher from "MQTTPublisher.lf";
import MQTTSubscriber from "MQTTSubscriber.lf";

/**
 * Reactor that generates a sequence of messages, one per second.
 * The message will be a string consisting of a root string followed
 * by a count.
 * @param root The root string.
 * @output message The message.
 */
reactor MessageGenerator(root:string("")) {
    // Output type char* instead of string is used for dynamically
    // allocated character arrays (as opposed to static constant strings).
    output message:char*;
    state count:int(1);
    // Send first message after 1 sec so that the startup reactions
    // do not factor into the transport time measurement on the first message.
    timer t(1 sec, 1 sec);
    reaction(t) -> message {=
        // With NULL, 0 arguments, snprintf tells us how many bytes are needed.
        // Add one for the null terminator.
        int length = snprintf(NULL, 0, "%s %d", self->root, self->count) + 1;
        // Dynamically allocate memory for the output.
        SET_NEW_ARRAY(message, length);
        // Populate the output string and increment the count.
        snprintf(message->value, length, "%s %d", self->root, self->count++);
        printf("MessageGenerator: At time %lld, publish message: %s\n",
            get_elapsed_logical_time(),
            message->value
        );
    =}
}
 
/**
 * Reactor that prints an incoming string.
 * @param prefix A prefix for the message.
 * @input message The message.
 */
reactor PrintMessage {
    input message:char*;
    reaction(message) {=
        printf("PrintMessage: At (elapsed) time %lld, subscriber receives: %s\n",
            get_elapsed_logical_time(),
            message->value
        );
    =}
} 

main reactor MQTTPhysical {
    pub = new MQTTPublisher(
        topic = "my/test",
        address = "tcp://localhost:1883",
        clientID = "TestPublisher",
        include_physical_timestamp = 1
    );
    msg = new MessageGenerator(root = "Hello World");
    msg.message->pub.in;
    
    sub = new MQTTSubscriber(
        address = "tcp://localhost:1883",
        clientID = "TestSubscriber2",
        topic = "my/test",
        offset = 10 msec
    );
    dsp = new PrintMessage();
    sub.message->dsp.message;
}