/**
 * A classic challenge program in concurrent programming is called the
 * "cigarette smoker's problem" was introduced by Suhas Patil in 1971
 * (Patil, 1971) and is discussed in Downey's *Little Book of Semaphores*
 * (Downey, 2016).  Patil's original formulation goes like this:
 * 
 * "Three smokers are sitting at a table. One of them has tobacco,
 * another has cigarette papers, and the third one has matches---each
 * one has a different ingredient required to make and smoke a cigarette
 * but he may not give any ingredient to another. On the table in front 
 * of them, two of the three ingredients will be placed, and the smoker 
 * who has the necessary third ingredient should pick up the ingredients 
 * from the table, make the cigarette and smoke it. Since a new set of 
 * ingredients will not be placed on the table until this action is 
 * completed, the other smokers who cannot make and smoke a cigarette 
 * with the ingredients on the table must not interfere with the fellow 
 * who can."
 * 
 * A naive solution realizes each smoker as follows (in pseudo code,
 * shown for the smoker that holds tobacco):
 * ```
 *     while(true) {
 *         acquire_paper();
 *         acquire_matches();
 *         smoke();
 *         release();
 *     }
 * ```
 * The two "acquire" functions block until the specified resource is 
 * available on the table and then acquire exclusive access to that resource.
 * This realization, however, very likely deadlocks because after this smoker 
 * acquires paper, another smoker may acquire the matches (or the supplier 
 * process supplies tobacco instead of matches). At that point, no further 
 * progress is possible and all smokers freeze.
 *
 * Patil imposed some constraints, that "the process which supplies the 
 * ingredients cannot be changed," and that "no conditional statements 
 * can be used." Patil argued that under these constraints, the problem 
 * cannot be solved using Dijkstra's semaphores.
 *
 * In 1975, Parnas showed that Patil had imposed some additional unstated 
 * constraints on the use of semaphores and gave a solution that uses 
 * vector semaphores, but still avoids conditional statements
 * (Parnas, 1975). Downey argued that the constraint to avoid conditional 
 * statements is rather artificial, but with the less artificial constraint 
 * that the supplier not be modified (it could, after all, represent an 
 * operating system), then the problem is interesting and the solutions 
 * can get quite convoluted (Downey, 2016). Searching the web for solutions
 * to this problem yields a few other attempts to solve it, including one 
 * that argues that the problem demonstrates the requirement for tests 
 * that enrich semaphores such as  POSIX operations such as `sem_try_wait()`
 * or `pthread_mutex_trylock()`. See for example OpenCSF:
 * [https://w3.cs.jmu.edu/kirkpams/OpenCSF/Books/csf/html/CigSmokers.html],
 * although, unfortunately, the solution given there still exhibits the 
 * possibility of a form of deadlock, where one thread repeatedly, 
 * unfairly acquires a semaphore in a busy wait.
 * 
 * A more commonly accepted solution, one implemented for example in 
 * the Savina actor benchmark suite (Imam and Sarkar, 2014), defines 
 * a centralized coordinator that first determines what the supplier
 * has supplied, then decides which smoker should be given permission 
 * to take the supplies and dispatches a message to that smoker.
 * 
 * Here, we give a Lingua Franca solution to Patil's original problem
 * statement that does not use semaphores (except under the hood in the
 * Lingua Franca implementation). This does not really solve Patil's
 * problem, which was explicitly about how to accomplish this with
 * semaphores, but instead demonstrates that some problems that become
 * challenging puzzles with semaphores becomes trivially easy and
 * uninteresting in Lingua Franca.
 *
 * References:
 * 
 * Downey, A.B.: The Little Book of Semaphores, vol. Version 2.2.1. 
 * Green Tea Press, second edition edn. (2016), 
 * [https://greenteapress.com/semaphores/ LittleBookOfSemaphores.pdf]
 * 
 * Imam,S.,Sarkar,V.: "Savina---An Actor Benchmark Suite Enabling Empirical 
 * Evaluation of Actor Libraries." In: Workshop on Programming based on 
 * Actors, Agents, and Decentralized Control (AGERE) (2014).
 * [https://doi.org/10.1145/2687357.2687368]
 * 
 * Parnas, D.L.: "On a Solution to the Cigarette Smokers’ Problem
 * (Without Conditional Statements)." Communications of the ACM 18(3),
 * 181–183 (March 1975). [https://doi.org/10.1145/360680.360709].
 * 
 * Patil,S.S.: "Limitations and Capabilities of Dijkstra’s Semaphore
 * Primitives for Coordination among Processes." Report, Computation 
 * Structures Group, Project MAC, MIT (February 1971)
 * 
 * @author Edward A. Lee
 */
target C;
main reactor {
    a = new Agent();
    s1 = new Smoker(smoke_time = 1 sec, has = 0); // Has tobacco.
    s2 = new Smoker(smoke_time = 2 sec, has = 1); // Has paper.
    s3 = new Smoker(smoke_time = 3 sec, has = 2); // Has matches.
    (a.tobacco)+ -> s1.tobacco, s2.tobacco, s3.tobacco;
    (a.paper)+ -> s1.paper, s2.paper, s3.paper;
    (a.matches)+ -> s1.matches, s2.matches, s3.matches;
    s1.done, s2.done, s3.done -> a.trigger;
}
reactor Agent {
    input[3] trigger:bool;
    output tobacco:bool;
    output paper:bool;
    output matches:bool;
    reaction(startup) {=
        // At start, seed the random number.
        srand((unsigned)get_logical_time());
	=}
    reaction(startup, trigger) -> tobacco, paper, matches {=
        int choice = rand() % 3;
        if (choice == 0) {
            SET(tobacco, true);
            SET(paper, true);
            info_print("Agent putting tobacco and paper on the table.");
        } else if (choice == 1) {
            SET(tobacco, true);
            SET(matches, true);
            info_print("Agent putting tobacco and matches on the table.");
        } else {
            SET(paper, true);
            SET(matches, true);
            info_print("Agent putting paper and matches on the table.");
        }
    =}
}
reactor Smoker(
    smoke_time:time(1 sec),
    has:int(0)  // 0 for tobacco, 1 for paper, 2 for matches
) {
    input tobacco:bool;
    input paper:bool;
    input matches:bool;
    
    output done:bool;
    
    logical action smoke;
    
    reaction(smoke) -> done {=
        info_print("Smoker is done smoking.");
        SET(done, true);
    =}
    reaction(tobacco, paper, matches) -> smoke {=
        if (self->has == 0 && paper->is_present && matches->is_present) {
            info_print("Smoker with tobacco starts smoking.");
            schedule(smoke, self->smoke_time);
        } else if (self->has == 1 && tobacco->is_present && matches->is_present) {
            info_print("Smoker with paper starts smoking.");
            schedule(smoke, self->smoke_time);
        } else if (self->has == 2 && tobacco->is_present && paper->is_present) {
            info_print("Smoker with matches starts smoking.");
            schedule(smoke, self->smoke_time);
        }
    =}
}
