/**
 * This example illustrates the classic problem in concurrent
 * computing called the "sleeping barber problem," often attributed
 * to Edsger Dijkstra (see https://en.wikipedia.org/wiki/Sleeping_barber_problem).
 * Using the logical times of Lingua Franca, many of the potential
 * problems that can arise do not arise.
 * 
 * Upon startup, the barber goes to sleep and is woken up by
 * the arrival of a customer. After serving each customer,
 * the barber checks the waiting room for the next customer.
 * If there is no customer waiting, the barber goes back 
 * to sleep. Customers arrive independently from each other
 * at random times. If the barber is sleeping, the customer
 * gets served right away. Otherwise, if there is room in the
 * waiting room, the customer waits. If the waiting room is
 * full, the customer goes away and returns a random amount
 * of time later. Execution ends when all customers have been
 * served.
 * 
 * This example is inspired by Savina benchmark by the same name,
 * which has a C target implementation here:
 * [https://github.com/lf-lang/lingua-franca/blob/master/benchmark/C/Savina/src/concurrency/SleepingBarber.lf].
 * Unlike the benchmark, this example is a direct implementation
 * of the problem at hand using the features of Lingua Franca.
 * It resembles the Savina benchmark only in overall structure.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 * @author Matthew Chorlian
 * @author Edward A. Lee
 * @author Thee Ho
 */
 
target C {
    fast: true,
    threads: 0,
    cmake-include: "/lib/c/reactor-c/util/deque.cmake",
    files: ["/lib/c/reactor-c/util/deque.h", "/lib/c/reactor-c/util/deque.c"]
};

preamble {=    
    /**
     * Return a random time that is uniformly distributed between
     * 0 and max. This assumes interval_t is a 64-bit integer and
     * that max is less that (2^63)/RAND_MAX so that RAND_MAX * max
     * does not overflow.
     */
    interval_t random_time(interval_t max) {
        interval_t result = (((interval_t)rand()) * RAND_MAX) % max;
        return result;
    }
=}

/**
 * Upon startup or the triggering of the `next` action,
 * produce the send_customer output, then schedule another occurrence of the
 * action `next` a random amount of time later.
 * The first customer will be produced at logical time 0.
 * The time between new customers is uniformly between 0 and
 * `max_time_between_customers`.
 * 
 * When a `customer_returned` input arrives, schedule a
 * resending of the same customer a random amount of time later,
 * where the random number is again uniformly distributed between
 * 0 and `max_time_between_customers`.
 * 
 * This reactor uses the customer_done input to count customers and request
 * halting the program when all customers have been served.
 */
reactor CustomerFactory(
    num_customers:size_t(20), 
    max_time_between_customers:time(10 minutes)
) {    
    output send_customer: size_t;
    input[num_customers] customer_done: bool;
    input[num_customers] customer_returned: bool;

    logical action next; // Next new customer.
    logical action again:int; // Returning customer. Payload is customer ID.
    
    state done_customers: size_t(0);    // Count of finished customers.
    state attempts: size_t(0);          // Count of customer attempts.
    state next_customer_id: size_t(0);  // ID of next new customer.
    
    reaction(startup, next) -> send_customer, next {=                
        // send the new customer to the waiting room
        self->attempts++;
        SET(send_customer, self->next_customer_id++);
        
        if (self->next_customer_id < self->num_customers) {
            // Schedule again.
            interval_t delay = random_time(self->max_time_between_customers);
            schedule(next, delay);
        }
    =}
    
    reaction (again) -> send_customer {=
        size_t customer_id = again->value;
        self->attempts++;
        SET(send_customer, customer_id);
    =}
    
    reaction (customer_returned) -> again {=
        for (int i = 0; i < self->num_customers; i++) {
            if (customer_returned[i]->is_present) {
                // The customer returned because the waiting room is full.
                // Schedule again.
                interval_t delay = random_time(self->max_time_between_customers);
                schedule_int(again, delay, i);
            }
        }
    =}
    
    reaction (customer_done) {=
        // Only one customer can be done at any logical tag, so we
        // only need to count invocations of this reaction.
        self->done_customers++;
        if (self->done_customers >= self->num_customers) {
            request_stop();
        }
    =}
    
    reaction (shutdown) {=
        char buffer[LF_TIME_BUFFER_LENGTH];
        lf_readable_time(buffer, get_elapsed_logical_time());
        info_print("Finished: %d customers got haircuts in %d attempts over %s.", 
                self->done_customers, self->attempts, buffer
        );
    =}
}

/**
 * When a customer_enters input arrives, if the barber is asleep,
 * then wake the barber up and send the customer ID to the 
 * `barber_leaves_with_customer` output. If the barber is
 * awake and there is room in the queue,
 * then put the customer ID on the queue and produce a wait output
 * on the channel corresponding to the customer ID. If the queue
 * is full, then produce a full output on the channel corresponding
 * to the customer ID.
 */
reactor WaitingRoom(capacity:size_t(1000), num_customers:size_t(2000)) {
    preamble {=
        #include "deque.h"
    =}
    input customer_enters: size_t;
    
    output[num_customers] full: bool;
    output[num_customers] wait: bool;
    
    input barber_arrives: bool;
    output barber_leaves_with_customer: int;
    
    state queue: deque_t;
    state barber_asleep: bool(true);
    
    reaction (customer_enters) -> full, wait, barber_leaves_with_customer {=
         size_t customer_id = customer_enters->value;
         
         if (deque_size(&self->queue) == self->capacity) {
             SET(full[customer_id], true);
         } else {
            if (self->barber_asleep) {
                self->barber_asleep = false;
                SET(barber_leaves_with_customer, customer_id);
            } else {
                // Note that the customer_id is being cast to a pointer
                // because the payload of a queue element is a pointer.
                // As long as we never dereference that pointer, it is OK
                // to recast it to size_t, assuming void* has at least as
                // many bits as size_t, which it must.
                deque_push_back(&self->queue, (void*)customer_id);
                SET(wait[customer_id], true);    
            }
        }
    =}
    
    reaction (barber_arrives) -> barber_leaves_with_customer {=
        if (deque_is_empty(&self->queue)) {
            self->barber_asleep = true;
        } else {
            SET(barber_leaves_with_customer, (size_t)deque_pop_front(&self->queue));
        }
    =}
}

/**
 * Reactor representing a customer.
 * This reactor reports on what is happening from the perspective of
 * a customer. It also relays a `room_full` input to its `returned`
 * output and its `done_cutting` input to its `done` output.
 */
reactor Customer(bank_index:size_t(0)) {
    input room_full: bool;
    input wait: bool;
    input start_cutting: bool;
    input done_cutting: bool; 

    output returned: bool;
    output done: bool;
    
    reaction (room_full) -> returned {=
        char buffer[LF_TIME_BUFFER_LENGTH];
        lf_readable_time(buffer, get_elapsed_logical_time());
        info_print("Customer %d: Turned away at %s. Will try later.",
                self->bank_index, buffer
        );
        SET(returned, true);
    =}
    
    reaction (wait) {=
        char buffer[LF_TIME_BUFFER_LENGTH];
        lf_readable_time(buffer, get_elapsed_logical_time());
        info_print("Customer %d: Entered waiting room at %s. Waiting.",
                self->bank_index, buffer
        );
    =}
    
    reaction (start_cutting) {= 
        char buffer[LF_TIME_BUFFER_LENGTH];
        lf_readable_time(buffer, get_elapsed_logical_time());
        info_print("Customer %d: Started a haircut at %s.",
                self->bank_index, buffer
        );
    =}
   
    reaction (done_cutting) -> done {=
        char buffer[LF_TIME_BUFFER_LENGTH];
        lf_readable_time(buffer, get_elapsed_logical_time());
        info_print("Customer %d: Finished a haircut at %s.",
                self->bank_index, buffer
        );
        SET(done, true);
    =}
}

/**
 * Upon receiving an `enter` input (whose value is a customer ID),
 * send a `start_cutting` output to corresponding customer, then
 * then schedule the logical action `done` to trigger a random
 * amount of time later. Upon triggering the `done` action, send a
 * `done_cutting` output to the corresponding customer and a
 * `next` output to ask for the next customer.
 * 
 * The random time the haircut takes is uniformly distributed between
 * `min_cut_time` and `max_cut_time`.
 */
reactor Barber(
    min_cut_time:time(5 minutes),
    max_cut_time:time(15 minutes),
    num_customers:size_t(20)
) {
    input enter: int;
        
    output[num_customers] start_cutting: bool;
    output[num_customers] done_cutting: bool;
    output next: bool;
    
    logical action done: int;
          
    reaction (done) -> done_cutting, next {=
        int customer_id = done->value;
        SET(done_cutting[customer_id], true);
        SET(next, true);
    =}
    
    reaction (enter) -> start_cutting, done {=        
        int customer_id = enter->value;
        SET(start_cutting[customer_id], true);
        
        // Calculate a random delay.
        interval_t delay = self->min_cut_time
                + random_time(self->max_cut_time - self->min_cut_time);
        
        // Notify the customer 
        schedule_int(done, delay, customer_id);
    =}
}


main reactor (
    waiting_room_capacity:size_t(7),
    max_time_between_customers:time(10 minutes),
    min_cut_time:time(5 minutes),
    max_cut_time:time(15 minutes),
    num_customers:size_t(20)
) {
    
    factory = new CustomerFactory(
        num_customers=num_customers, 
        max_time_between_customers=max_time_between_customers
    );
    room = new WaitingRoom(
        capacity=waiting_room_capacity, 
        num_customers=num_customers
    );
    
    barber = new Barber(
        min_cut_time=min_cut_time, 
        max_cut_time=max_cut_time,
        num_customers=num_customers
    )
    customers = new[num_customers] Customer();
        
    factory.send_customer -> room.customer_enters;
    room.full -> customers.room_full;
    room.wait -> customers.wait;
    room.barber_leaves_with_customer -> barber.enter;
    barber.next -> room.barber_arrives;
    barber.start_cutting -> customers.start_cutting;
    barber.done_cutting -> customers.done_cutting;
    customers.done -> factory.customer_done;
    
    customers.returned -> factory.customer_returned;
}