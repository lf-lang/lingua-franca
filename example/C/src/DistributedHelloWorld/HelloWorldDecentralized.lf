/**
 * Version of HelloWorld that uses decentralized coordination.
 * The `offset` parameter at the top level specifies an `after` delay to
 * use on the connection.  If this delay is too small, then the `print`
 * receiving federate will report tardy messages, which are messages where
 * the intended timestamp cannot be assigned because the message arrived
 * too late.
 * 
 * If the sender and receiver are running in the same machine
 * then there is no clock synchronization error and the communication latency
 * should be well less than 10msec, so an `offset` of 10 msec should be plenty
 * adequate to avoid any tardy messages.  If you change the offset to
 * 10 usec, then tardy messages will likely occur, unless, on your machine,
 * communication between two processes can reliably occur within 10 microseconds.
 * 
 * @author Edward A. Lee
 */
target C {
    timeout: 10 secs,
    coordination: decentralized
};
import MessageGenerator from "HelloWorld.lf"
import PrintMessage from "HelloWorld.lf"

reactor PrintMessageWithDetector(offset:time(10 msec)) extends PrintMessage {
    // The timer here creates a worst-case scenario where the receiving
    // federate has an event to process whose timestamp matches that of an
    // incoming message.  Without this timer, you will not see any tardy
    // messages because the `print` reactor has no reason to advance its
    // logical time, and hence any incoming intended tag can be handled.
    timer local(offset, 1 sec);
    reaction (message) {=
        // Empty. The base class will react and report the incoming message.
    =} STP(0) {=
        warning_print("Message is tardy. Intended tag is (%lld, %u).",
            message->intended_tag.time - start_time, message->intended_tag.microstep
        );
    =}
    reaction(local) {=
        tag_t tag = get_current_tag();
        info_print("Timer triggered at logical tag (%lld, %u).",
            tag.time - start_time, tag.microstep
        );
    =}
}

federated reactor HelloWorldDecentralized(offset:time(10 msec)) {
    source = new MessageGenerator(prefix = "Hello World");
    print = new PrintMessageWithDetector(
        offset = offset
    );
    source.message -> print.message after offset;
}