/**
 * This example demonstrates a very simple use of protocol buffers
 * within a reactor. It encodes and decodes a very simple protocol
 * buffer definition in hello_string.proto. This reactor is heavily
 * based on the examples at https: * github.com/protobuf-c/protobuf-c/wiki/Examples.
 *
 * To run this example first install the protocol buffers compiler
 * from https: * github.com/protocolbuffers/protobuf. For Mac, it is
 * available from homebrew via
 * ```
 *     brew install protobuf
 * ```
 * You may also need to do:
 * ```
 *    brew install protobuf-c
 *    brew install coreutils
 * ```
 * Building protobuf from source is very slow, so avoid doing that
 * if possible. Next install the C plugin for protocol buffers from 
 * [https://github.com/protobuf-c/protobuf-c].
 *
 * Navigate to the directory containing the protocol buffer definition
 * hello_string.proto. To compile it, run the command:
 * ```
 *     protoc-c --c_out=. hello_string.proto
 * ```
 * This should generate the files "hello_string.pb-c.c" and "hello_string.pb-c.h".
 * Move both files to the src-gen directory where the C code for this
 * reactor is generated by Lingua Franca. Compile there with:
 * ```
 *     cc HelloProtocolBuffers.c hello_string.pb-c.c -l protobuf-c
 * ```
 * and run
 * ```
 *    ./a.out
 * ```
 * 
 * @author Matt Weber
 * @author Edward A. Lee
 */

target C {
    protobufs: hello_string.proto
};

main reactor HelloProtocolBuffers {
	
	timer t;
	reaction(t) {=
		HelloString pack_msg = HELLO_STRING__INIT; 	// Macro to create the protocol buffer
		void *buf; 									// Buffer to store the serialized data
		unsigned len; 								// Length of the packed message
		
		char* hello_msg = "Hello Protocol Buffers!";
		pack_msg.message = hello_msg; 
		
		//Pack the message into buf.
		len = hello_string__get_packed_size(&pack_msg);
		buf = malloc(len);
		hello_string__pack(&pack_msg,buf);
		
		//Now unpack the message from buf.
		HelloString *unpacked_msg;
		unpacked_msg = hello_string__unpack(NULL, len, buf);
		
		//Extract and print the unpacked message.
		printf("Read: %s\n", unpacked_msg->message);
		free(buf); // Free the allocated serialized buffer	
	=}
}
