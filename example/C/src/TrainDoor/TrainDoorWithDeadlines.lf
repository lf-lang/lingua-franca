// This is a variant of the example is considered in this paper:
//   https://www.mdpi.com/2227-7390/8/7/1068
// where it is studied for its verifiability.
target C;
reactor Controller {
  output lock:bool;
  output unlock:bool;
  output move:bool;
  output stop:bool;
  physical action external_move(100 msec):bool;
  reaction(startup) {=
    // ... Set up sensing.
  =}
  reaction(external_move)->lock, move, unlock, stop {=
    SET(lock, external_move->value);
    SET(move, external_move->value);
  =}
}
realtime reactor Train {
  input move:bool;
  input stop:bool;
  state moving:bool(false);
  reaction(stop) {=
    self->moving = false;
  =} deadline (50 msec) {= =}
  reaction(move) {=
      self->moving = false;
  =} deadline(48 msec) {= =}
}
realtime reactor Door {
  input lock:bool;
  input unlock:bool;
  physical action external_open;
  state locked:bool(false);
  state open:bool(false);
  reaction(startup) {=
    // ... Set up sensing.
  =} deadline(48 msec) {= =}
  reaction(lock) {=
    if (lock && self->open) {
      // ... Actuate to close door.
      self->open = false;
    }
    self->locked = lock->value;
  =} deadline(50 msec) {=
      // ... handle the deadline violation...
  =}
  reaction(unlock) {=
    self->locked = true;
  =}
  reaction(external_open) {=
    if (!self->locked) {
      // ... Actuate to open door.
      self->open = true; 
    }
  =}
}
main reactor {
  controller = new Controller();
  door = new Door();
  train = new Train();
  controller.lock -> door.lock;
  controller.move -> train.move after 51 msec;
  controller.unlock -> door.unlock after 51 msec;
  controller.stop -> train.stop;
}
