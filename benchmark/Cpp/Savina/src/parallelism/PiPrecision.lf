/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmark calculates Pi to a very high precision. The workers operate
 * independently and each worker calculates one digit of the result. Similar to
 * to the other parallelism benchmarks, the execution is controlled by a central
 * manager. The overall structure in this benchmark is quite simple. The manager
 * tells the workers which digit to calculate and collects the results to build Pi.
 *
 * Note that the validation isn't precise. Due to rounding errors on the last digit,
 * it might return false although the result is correct.
 *
 * This version uses the library GMP with C++ bindings and depends on it.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "PiPrecision.cmake",
    logging: "warn"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

private preamble {=
    // source for pi: https://www.piday.org/million/
    std::string solution = "3.";
=}

public preamble {=
    #include <gmpxx.h>
    #include <iomanip>
    #include <sstream>
    
    extern std::string solution;
    
    constexpr size_t precision{16610}; // result of ld(10^scale) with scale = 5000
=}

reactor Manager(numWorkers: size_t{20}, scale: size_t(5000)) {
    state result: mpf_class;
    state tolerance: mpf_class;
    state termsRequested: size_t{0};

    input start:void;
    output finished:void;
    
    output[numWorkers] doWork: size_t;
    input[numWorkers] response: mpf_class;
    
    logical action next;
    logical action done;
    
    reaction(startup) {=
        // initialization
        tolerance = mpf_class(0, precision);
        mpf_pow_ui(tolerance.get_mpf_t(), mpf_class(10, precision).get_mpf_t(), scale); // tolerance = 10^scale
        tolerance = 1 / tolerance;
    =}
    
    reaction(done) -> finished {=
        std::stringstream ss;
        // Set precision to scale plus a little buffer to ensure any extra digits
        // that we calculated are included in the result
        ss.precision(scale+100);
        ss << result;
        std::string resultString = ss.str();
        
        // compare scale + 2 charaters (+2 because of the 3.)
        std::string solutionPruned = solution.substr(0, scale + 2);
        bool correct = resultString.compare(0, scale+2, solutionPruned) == 0;

        reactor::log::Info() << "Result correct: " << std::boolalpha << correct << std::noboolalpha;
        reactor::log::Info() << "Number of terms calculated: " << resultString.size() - 1;
        reactor::log::Info() << resultString;
        reactor::log::Info() << solutionPruned;
        finished.set();
    =}
    
    reaction(start) -> next {=
        // reset local state
        result = mpf_class(0, precision);
        termsRequested = 0;
        // start execution
        next.schedule();
    =}
    
    reaction(next) -> doWork {=
        for(auto& worker : doWork) {
            worker.set(termsRequested);
            termsRequested++;
        }
    =}
    
    reaction(response) -> next, done {=
        bool stop{false};
        for (const auto& port : response) {
            const auto& x = *port.get();
            result += x;
            if ((x - tolerance) < 0) {
                stop = true;
            }
        }
        if (stop) {
            done.schedule();
        } else {
            next.schedule();
        }
    =}
}

reactor Worker {
    
    input doWork: size_t;
    output response: mpf_class;
    
    reaction(doWork) -> response {=
        size_t term = *doWork.get();
        mpf_class result = calculateBbpTerm(term);
        response.set(result);
    =}
    
    const method calculateBbpTerm(k: size_t): mpf_class {=
        size_t eightK = 8 * k;
        mpf_class sixteen(16, precision);
        mpf_class four(4, precision);
        mpf_class two(2, precision);
        mpf_class one(1, precision);
        mpf_class term(0, precision);
        term = four / (eightK + 1);
        term = term - (two / (eightK + 4));
        term = term - (one / (eightK + 5));
        term = term - (one / (eightK + 6));
        mpf_class sixteenpow(sixteen, precision);
        mpf_pow_ui(sixteenpow.get_mpf_t(), sixteenpow.get_mpf_t(), k);
        term = term / sixteenpow;
        
        return term;
    =}
}

main reactor (numIterations: size_t{12}, precision: size_t{5000}, numWorkers: size_t{20}) {    

    manager = new Manager(numWorkers=numWorkers, scale=precision);
    runner = new BenchmarkRunner(numIterations=numIterations);
    workers = new[numWorkers] Worker();
    
    reaction(startup) {=
        printBenchmarkInfo("PiPrecisionBenchmark");
        printArgs("numIterations", numIterations, "precision", precision, "numWorkers", numWorkers);   
        printSystemInfo();
    =}
    
    runner.start -> manager.start;
    manager.finished -> runner.finished;

    manager.doWork -> workers.doWork;
    workers.response -> manager.response;
}
