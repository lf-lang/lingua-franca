/**
 * Copyright (C) 2020 TU Dresden
 * 
 * Micro-benchmark from the Savina benchmark suite. Intended
 * to measure the effects on shared resources (the mailbox of
 * the mall actor) while processing messages in the actor model.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Benchmark description:
 *
 * For this problem, each program should
 * - create four differently coloured (blue, red, yellow, blue)
 *   concurrent chameneos creatures
 * - each creature will repeatedly go to the meeting place and
 *   meet, or wait to meet, another chameneos
 * - each creature will change colour to complement the colour
 *   of the chameneos that they met
 * - after N total meetings have taken place, any creature
 *   entering the meeting place will take on a faded colour,
 *   report the number of creatures it has met, and end
 * - write the sum of reported creatures met
 * 
 * To break the causality loop the mall reactor contains a logical
 * action.
 * 
 * One interesting aspect of the LF implementation is that the mall
 * will always pair the same chameneos to meet. In the actor implementation,
 * there is no defined order and the mall will choose different pairs 
 * in each iteration. In LF, the order is fixed and always the same
 * two chameneos will meet. In other words, this LF benchmark only
 * implements one specific behaviour of the many possible behaviours
 * in actors. 
 * 
 * @author Hannes Klein
 * @author Felix Wittwer
 */


target Cpp {
    build-type : RelWithDebInfo,
    logging : warn
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


public preamble {=
    enum Color {
      RED,
      YELLOW,
      BLUE,
      FADED
    };
    
    enum MsgType {
      StartMsg,
      MeetMsg,
      ChangeMsg,
      MeetingCountMsg,
      ExitMsg
    };
    
    struct Message {
      MsgType type;
      Color color;
      int id;
    
      Message() {}
    
      Message(MsgType _type, Color _color, int _id):
        type(_type), color(_color), id(_id) {}
    
      Message(MsgType _type):
        type(_type) {
        // use default values for other members
      }
    };
=}


reactor ChameneosMallReactor(numMeetings:int(200000), numChameneos:int(5)) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state sumMeetings:int(0);
    state numFaded:int(0);
    state meetings:int(numMeetings);
    state messages:{=std::vector<reactor::ImmutableValuePtr<Message>>=}(numChameneos);
    
    input inStart:void;
    output outFinished:void;
    
    output[numChameneos] outChameneos:{=Message=};
    input[numChameneos] inChameneos:{=Message=};
    
    // logical action to break causality loop
    logical action pairChameneos:void;
    
    reaction(inStart) -> outChameneos {=
         // reset local state
         sumMeetings = 0;
         numFaded = 0;
         meetings = numMeetings;
         
         // start execution
         for(int i = 0; i < outChameneos.size(); i++) {
            outChameneos[i].set(Message{StartMsg});
         }
    =}
    
    reaction(pairChameneos) -> outChameneos {=
        int waitingChameneoIndex = -1;
        
        for(int i = 0; i < outChameneos.size(); ++i) {
            if(messages[i] != nullptr) {
                // Chameneo i present in mall
                if(meetings > 0) {
                    if(waitingChameneoIndex == -1) {
                        waitingChameneoIndex = i;
                    } else {
                        meetings -= 1;
                        reactor::log::Info() << "setting up meeting " << meetings << " between: " << waitingChameneoIndex << ", " << i;
                        outChameneos[waitingChameneoIndex].set(messages[i]);
                        messages[waitingChameneoIndex] = nullptr;
                        messages[i] = nullptr;
                        waitingChameneoIndex = -1;
                    }
               } else {
                    outChameneos[i].set(Message{ExitMsg});
               }
            }
        }
    =}
    
    reaction(inChameneos) -> pairChameneos, outFinished {=
        // detect all chameneos that are present
        for(int i = 0; i < inChameneos.size(); ++i) {
            if(inChameneos[i].is_present()) {
                if(inChameneos[i].get()->type == MeetingCountMsg) {
                    numFaded += 1;
                    sumMeetings = sumMeetings + inChameneos[i].get()->id; // reuse id field
                    if (numFaded == numChameneos) {
                        outFinished.set();
                        return;
                    }
                } else {
                    messages[i] = inChameneos[i].get();
                }
            }
        }
        
        pairChameneos.schedule();
    =}
}

reactor ChameneosChameneoReactor(bank_index:int(0), numChameneos:size_t(5)) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state meetings:int(0);
    state color:{=Color=}({=static_cast<Color>(bank_index%3)=});
    state startColor:{=Color=}({=static_cast<Color>(bank_index%3)=});
    
    input inMall:{=Message=};
    output outMall:{=Message=};
    
    output[numChameneos] outChameneos:{=Message=};
    input[numChameneos] inChameneos:{=Message=};
    
    reaction(inMall) -> outMall, outChameneos {=
        
        if(inMall.get()->type == StartMsg) {
            
            // reset local state
            meetings = 0;
            color = startColor;
            
            // start execution
            outMall.set(Message{MeetMsg, color, bank_index});
            
        } else if(inMall.get()->type == MeetMsg) {
            
            Color otherColor = inMall.get()->color;
            int senderId = inMall.get()->id;
            color = complement(color, otherColor);
            meetings += 1;
            outChameneos[senderId].set(Message{ChangeMsg, color, bank_index});
            outMall.set(Message{MeetMsg, color, bank_index});
            
        } else if(inMall.get()->type == ExitMsg) {
            
            color = FADED;
            outMall.set(Message{MeetingCountMsg, color, meetings});
            
        }
    =}
    
    reaction(inChameneos) -> outMall {=
        
        Message message;
        
        // find message
        for(int i = 0; i < inChameneos.size(); i++) {
            if(inChameneos[i].is_present()) {
                message = *(inChameneos[i].get());
            }
        }
        
        if(message.type == ChangeMsg) {
            color = message.color;
            meetings += 1;
            outMall.set(Message{MeetMsg, color, bank_index}); // go back to mall
        }
        
    =}
    
    private preamble {=
        
        Color complement(const Color color, const Color otherColor) {
            switch(color) {
              case RED:
                switch(otherColor) {
                  case RED:
                    return RED;
                  case YELLOW:
                    return BLUE;
                  case BLUE:
                    return YELLOW;
                  case FADED:
                    return FADED;
                }
              case YELLOW:
                switch(otherColor) {
                  case RED:
                    return BLUE;
                  case YELLOW:
                    return YELLOW;
                  case BLUE:
                    return RED;
                  case FADED:
                    return FADED;
                }
              case BLUE:
                switch(otherColor) {
                  case RED:
                    return YELLOW;
                  case YELLOW:
                    return RED;
                  case BLUE:
                    return BLUE;
                  case FADED:
                    return FADED;
                }
              case FADED:
                return FADED;
            }
            
           reactor::log::Error() <<
            "Error while calculating the color complement given the two colors " <<
            color << ", " << otherColor << ".";
           return FADED;
        }
        
    =}
}



main reactor (numIterations:int(12), numMeetings:int(200000), numChameneos:size_t(100)) {
    
    mall = new ChameneosMallReactor(numMeetings=numMeetings, numChameneos=numChameneos);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.start -> mall.inStart;
    mall.outFinished -> runner.finished;
    
    reaction(startup) {=
        printBenchmarkInfo("ChameneosReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "numMeetings", numMeetings, "numChameneos", numChameneos);
        printSystemInfo();
    =}
    
    chameneos = new[numChameneos] ChameneosChameneoReactor(numChameneos=numChameneos);

    // Connect chamaneos and the mall.
    chameneos.outMall -> mall.inChameneos;
    mall.outChameneos -> chameneos.inMall;

    // Connect every Chameneo with every Chameneo.
    chameneos.outChameneos -> interleaved(chameneos.inChameneos);
}
