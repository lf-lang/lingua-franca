/**
 * Copyright (C) 2020 TU Dresden
 * 
 * Micro-benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * According to the Savina paper performance can be achieved by
 * batch processing messages in the worker actors.
 * This is not possible with reactors because scheduling and
 * advancing logical time occurs after each round of
 * message delivery.
 * 
 * @author Hannes Klein
 * @author Felix Wittwer
 */


target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


reactor ThroughputReactor(totalMessages:int(10000)) {
    
    private preamble {=
        #include <cmath>
    =}
    
    input inMessage:void;
        
    reaction(inMessage) {=
        performComputation(37.2);
    =}
    
    private preamble {=
        void performComputation(const double theta) {
            const double sint = sin(theta);
            // volatile to defeat dead code elimination
            const volatile double res = sint * sint;
        }
    =}
}

reactor ThroughputProducer(totalMessages:int(10000), numConsumer:int(60)) {
    
    state messagesSent:int(0);
    state nextConsumer:int(0);
    state numConsumerFinished:int(0);
    
    input inStart:void;
    output outFinished:void;
    
    output outMessage:void;
    
    logical action sendNextMessage;
    
    reaction(inStart) -> sendNextMessage {=
        
        // reset local state
        messagesSent = 0;
        nextConsumer = 0;
        numConsumerFinished = 0;
        
        // start execution
        sendNextMessage.schedule();
    =}
    
    reaction(sendNextMessage) -> outMessage, sendNextMessage, outFinished {=
        outMessage.set();
        messagesSent += 1;
        
        if(messagesSent < totalMessages) { 
            sendNextMessage.schedule();
        } else {
            outFinished.set();
        }
    =}
}

main reactor (numIterations:int(12), numMessagesPerReactor:int(10000), numWorkers:int(60)) {
    
    reaction(startup) {=
        printBenchmarkInfo("ThroughputBenchmark");
        printArgs("numIterations", numIterations, "numMessagesPerReactor", numMessagesPerReactor, "numWorkers", numWorkers);
        printSystemInfo();
    =}

    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=numWorkers);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.start -> producer.inStart;
    producer.outFinished -> runner.finished;
    
    
    worker = new[numWorkers] ThroughputReactor(totalMessages=numMessagesPerReactor);
    
    (producer.outMessage)+ -> worker.inMessage;
}
