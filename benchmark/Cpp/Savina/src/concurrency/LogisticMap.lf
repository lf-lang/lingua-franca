/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmark calculates the logistic map series (https://en.wikipedia.org/wiki/Logistic_map)
 * N (numSeries) times in parallel. Each of the N seriesWorkers starts with a
 * different initial value and initial rate. The actual computation of the next
 * value in the series is offloaded to the RateComputer reactors. The
 * SeriesWorker reactors only keep track of the current value.
 * 
 * I am not sure why the Savina developers considered this to be an interesting
 * benchmark as there is not much going on. The most interesting aspect is the
 * interaction between the SeresWorker and its RateComputer. The worker tells
 * the computer to produce a new value and then needs to wait for the result
 * before it can update its internal state. This waiting isn't straight forward
 * in actors, and there are actually multiple solutions implemented for Akka. In
 * LF, this interaction is quite trivial. It's a simple feedback loop.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor RateComputer(bank_index: size_t{0}, startRate: double{3.46}, rateIncrement: double{0.0025}) {
    
    state rate: double;

    input compute: double;
    output result: double;
    
    reaction(startup) {=
        rate = startRate + (bank_index * rateIncrement);
    =}
    
    reaction(compute) -> result {=
        double term = *compute.get();
        double res = rate * term * (1 - term);
        result.set(res);
    =}
}

reactor SeriesWorker(bank_index: size_t{0}, termIncrement: double{0.0025}, startRate: double{3.46}, rateIncrement: double{0.0025}) {
    
    state curTerm: double;
    
    input reset: void;
    input nextTerm: void;
    input getTerm: void;
    output term: double;
    
    computer = new RateComputer(bank_index=bank_index, startRate=startRate, rateIncrement=rateIncrement);

    reaction (reset) {=
        //reset local state
        curTerm = bank_index * termIncrement;   
    =}
    
    reaction(nextTerm) -> computer.compute {=
        computer.compute.set(curTerm);
    =}
    
    reaction(computer.result) {=
        curTerm = *computer.result.get();
    =}
    
    reaction(getTerm) -> term {=
        term.set(curTerm);
    =}
}


reactor Manager(numSeries: size_t(10), numTerms: size_t(25000)) {
 
    state currentIteration: size_t{0};
    
    input start: void;
    output finished: void;

    output nextTerm: void;
    output getTerm: void;
    input[numSeries] results: double;
    
    logical action next: void;
    
    reaction(start, next) -> getTerm, nextTerm, next {=
        if(currentIteration == numTerms) {
            getTerm.set();
            return;
        }

        nextTerm.set();
        currentIteration++;
        next.schedule();
    =}
    
    reaction(results) -> finished {=
        double terms_sum{0.0};
        for (size_t i{0}; i < numSeries; ++i) {
            terms_sum += *results[i].get();
        }
        reactor::log::Info() << "Terms sum: " << terms_sum;
        finished.set();

        // reset local state
        currentIteration = 0;
    =}
}

main reactor (numIterations: size_t{12}, numTerms: size_t{25000}, startRate: double{3.46}, numSeries: size_t{10}) {
    
    manager = new Manager(numSeries=numSeries, numTerms=numTerms);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    reaction(startup) {=
        printBenchmarkInfo("LogisticMapReactorLFCppBenchmark");
        printArgs("numIterations", numIterations, "numTerms", numTerms, "startRate", startRate, "numSeries", numSeries);
        printSystemInfo();
    =}
    
    seriesWorkers = new[numSeries] SeriesWorker(startRate=startRate, rateIncrement=0.0025, termIncrement=0.0025);
    
    (runner.start)+ -> manager.start, seriesWorkers.reset;
    manager.finished -> runner.finished;
    
    (manager.nextTerm)+ -> seriesWorkers.nextTerm;
    (manager.getTerm)+ -> seriesWorkers.getTerm;
    seriesWorkers.term -> manager.results;
}