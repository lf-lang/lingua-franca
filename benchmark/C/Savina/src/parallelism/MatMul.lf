/**
 * This benchmark is a C implementation of the parallel matrix multiplication
 * algorithm that appears in the Savina suite, including the same race condition.
 * 
 * For details on this benchmark, see the Cpp version from which it was derived:
 * https://github.com/lf-lang/lingua-franca/blob/master/benchmark/C/Savina/src/parallelism/FilterBank.lf
 */

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    cmake-include: "../lib/matrix.cmake",
    files: ["../lib/matrix.c", "../include/matrix.h"]
};

preamble {=
    #include <stddef.h>
    #include <assert.h>

    typedef struct work_item_t {
        size_t srA; // srA = start row in matrix A
        size_t scA; // scA = start column in matrix A
        size_t srB;
        size_t scB;
        size_t srC;
        size_t scC;
        size_t num_blocks; // total number of elements per block in both dimensions
        size_t dim; // number of elements in one dimension in one block
    } work_item_t;

    typedef struct work_stack_t {
        work_item_t** stacks;
        size_t current_n_stacks;
        // Invariant: current_stack <= next_item <= current_stack_end
        // Invariant: 8 << current_n_stacks == current_stack_end - current_stack, unless
        //  current_n_stacks == 0
        // current_stack_end is never a valid memory location to use
        work_item_t* current_stack;
        work_item_t* next_item;
        work_item_t* current_stack_end;
    } work_stack_t;

    /*
     * Allocates and initializes a work stack.
     */
    work_stack_t work_stack_new() {
        // 2^53 - 8 WorkItems is more than can fit in a computer, and it is fine for
        //  work stacks to be initialized with space for 50 pointers because for every
        //  work_stack_t that exists, at least one expensive parallel computation is
        //  performed, and the number of expensive computations that can be performed is
        //  limited.
        work_item_t** stacks = malloc(50 * sizeof(work_item_t*));
        assert(stacks != NULL);
        *stacks = NULL;
        return (work_stack_t) { stacks, 0, NULL, NULL, NULL };
    }

    /*
     * Frees the memory required by the work stack. This operation invalidates the work
     * stack.
     */
    void work_stack_free(work_stack_t work) {
        for (size_t i = 1; i <= work.current_n_stacks; ++i) {
            free((work.stacks)[i]);
        }
    }

    /*
     * Pushes a work item to the given work stack.
     * @param work A work stack.
     * @param w A new work item.
     */
    void work_stack_push(work_stack_t* work, work_item_t w) {
        if (work->next_item == work->current_stack_end) {
            size_t current_height = 8L << (++work->current_n_stacks);
            work_item_t* current_stack = (work_item_t*) malloc(
                current_height * sizeof(work_item_t)
            );
            assert(work->current_n_stacks < 50);
            (work->stacks)[work->current_n_stacks] = current_stack;
            work->current_stack = current_stack;
            work->next_item = current_stack;
            work->current_stack_end = (work_item_t*) current_stack + current_height;
        }
        *(work->next_item++) = w;
    }

    /*
     * Pops (removes) an item from the given work stack.
     * @return The work item at the top of the stack.
     */
    work_item_t work_stack_pop(work_stack_t* work) {
        if (work->next_item == work->current_stack) {
            assert(work->current_n_stacks > 1);
            size_t current_height = 8L << (--work->current_n_stacks);
            free(work->current_stack);
            work_item_t* current_stack = (work->stacks)[work->current_n_stacks];
            work_item_t* end = (work_item_t*) current_stack + current_height;
            work->current_stack = current_stack;
            work->next_item = end;
            work->current_stack_end = end;
        }
        return *(--work->next_item);
    }

    /*
     * Returns whether the given work stack is empty.
     */
    bool work_stack_empty(work_stack_t* work) {
        return work->current_n_stacks <= 1 && (work->next_item == work->current_stack);
    }
=}

reactor Manager(num_workers: int(20), data_length: size_t(1024)) {
    preamble {=
        #include <math.h>
        #include "matrix.h"

        /*
         * Prints a message if there exists an incorrect entry in the given matrix.
         */
        void check_if_valid(matrix_t C, size_t data_length) {
            for (size_t i = 0; i < data_length; ++i) {
                for (size_t j = 0; j < data_length; ++j) {
                    double actual = *mat_at_d(C, i, j);
                    double expected = 1.0 * data_length * i * j;
                    if (fabs(actual - expected) > 0.0001) {
                        printf(
                            "Validation failed for (i,j)=(%li, %li) with (%f, %f)\n",
                            i, j, actual, expected
                        );
                        return;
                    }
                }
            }
        }
    =}

    input[num_workers] more_work: {= work_item_t* =};

    logical action next;
    logical action done;

    output data: matrix_t[];
    output[num_workers] do_work: work_item_t;

    state A: matrix_t;
    state B: matrix_t;
    state C: matrix_t;

    state work_stack: work_stack_t;

    reaction (startup) -> data, next {=
        // Fill both input arrays with data
        self->A = mat_new_d(self->data_length, self->data_length);
        self->B = mat_new_d(self->data_length, self->data_length);
        self->C = mat_new_d(self->data_length, self->data_length);
        for (size_t i = 0; i < self->data_length; ++i) {
            for (size_t j = 0; j < self->data_length; ++j) {
                *mat_at_d(self->A, i, j) = i;
                *mat_at_d(self->B, i, j) = j;
            }
        }
        SET_NEW_ARRAY(data, 3);
        data->value[0] = self->A;
        data->value[1] = self->B;
        data->value[2] = self->C;
        size_t num_blocks = self->data_length * self->data_length;
        work_stack_t ws = work_stack_new();
        work_stack_push(&ws, (work_item_t) {
            0, 0, 0, 0, 0, 0, num_blocks, self->data_length
        });
        self->work_stack = ws;
        schedule(next, 0);
    =}

    reaction (next) -> next, done, do_work {=
        if (work_stack_empty(&(self->work_stack))) {
            schedule(done, 0);
        } else {
            for (
                int i = 0;
                i < do_work_width && !work_stack_empty(&(self->work_stack));
                ++i
            ) {
                work_item_t ws = work_stack_pop(&(self->work_stack));
                SET((do_work[i]), ws);
            }
            schedule(next, 0);
        }
    =}

    reaction (more_work) {=
        // append all work items received from the workers to the internal work queue
        for (int i = 0; i < more_work_width; ++i) {
            if (more_work[i]->is_present) {
                work_item_t* items = more_work[i]->value;
                // If the port is present, then it certainly has exactly 8 WorkItems.
                for (int j = 0; j < 8; ++j) {
                    work_stack_push(&(self->work_stack), items[j]);
                }
            }
        }
    =}

    reaction (done) {=
        check_if_valid(self->C, self->data_length);
        work_stack_free(self->work_stack);
        mat_destroy_d(self->A);
        mat_destroy_d(self->B);
        mat_destroy_d(self->C);
        request_stop();
    =}
}

reactor Worker(threshold: size_t(16384), data_length: size_t(1024)) {
    input data: matrix_t[];
    input do_work: work_item_t;
    output more_work: {= work_item_t* =};

    state A: {= matrix_t =};
    state B: {= matrix_t =};
    state C: {= matrix_t =};

    reaction (data) {=
        matrix_t* matrices = data->value;
        self->A = matrices[0];
        self->B = matrices[1];
        self->C = matrices[2];
    =}

    reaction (do_work) -> more_work {=
        work_item_t wi = do_work->value;
        // If the number of blocks to process is above the threshold,
        // then we split the problem into smaller chunks and generate more work items
        if (wi.num_blocks > self->threshold) {
            size_t dim = wi.dim / 2;
            size_t num_blocks = wi.num_blocks / 4;

            SET_NEW_ARRAY(more_work, 8);

            more_work->value[0] = (work_item_t) {wi.srA      , wi.scA      , wi.srB      , wi.scB      , wi.srC      , wi.scC      , num_blocks, dim};
            more_work->value[1] = (work_item_t) {wi.srA      , wi.scA + dim, wi.srB + dim, wi.scB      , wi.srC      , wi.scC      , num_blocks, dim};
            more_work->value[2] = (work_item_t) {wi.srA      , wi.scA      , wi.srB      , wi.scB + dim, wi.srC      , wi.scC + dim, num_blocks, dim};
            more_work->value[3] = (work_item_t) {wi.srA      , wi.scA + dim, wi.srB + dim, wi.scB + dim, wi.srC      , wi.scC + dim, num_blocks, dim};
            more_work->value[4] = (work_item_t) {wi.srA + dim, wi.scA      , wi.srB      , wi.scB      , wi.srC + dim, wi.scC      , num_blocks, dim};
            more_work->value[5] = (work_item_t) {wi.srA + dim, wi.scA + dim, wi.srB + dim, wi.scB      , wi.srC + dim, wi.scC      , num_blocks, dim};
            more_work->value[6] = (work_item_t) {wi.srA + dim, wi.scA      , wi.srB      , wi.scB + dim, wi.srC + dim, wi.scC + dim, num_blocks, dim};
            more_work->value[7] = (work_item_t) {wi.srA + dim, wi.scA + dim, wi.srB + dim, wi.scB + dim, wi.srC + dim, wi.scC + dim, num_blocks, dim};
            
        } else {
            // otherwise we compute the result directly
            size_t end_r = wi.srC + wi.dim;
            size_t end_c = wi.scC + wi.dim;

            for (size_t i = wi.srC; i < end_r; ++i) {
                for (size_t j = wi.scC; j < end_c; ++j) {
                    for (size_t k = 0; k < wi.dim; ++k) {
                        *mat_at_d(self->C, i, j) += (
                            (*mat_at_d(self->A, i, wi.scA + k))
                            * (*mat_at_d(self->B, wi.srB + k, j))
                        );
                    }
                }
            }
        }
    =}
}

main reactor (
    /*[[[cog
    cog.outl(f'data_length: size_t({data_length}),')
    cog.outl(f'block_threshold: int({block_threshold}),')
    cog.outl(f'priorities: int({priorities}),')
    cog.outl(f'num_workers: int({num_workers})')
    ]]] */
    data_length: size_t(1024),
    block_threshold: int(16384),
    priorities: int(10),
    num_workers: int(20)
    /// [[[end]]]
) {
    manager = new Manager(num_workers=num_workers, data_length=data_length);
    workers = new[num_workers] Worker(threshold=block_threshold, data_length=data_length);

    (manager.data)+ -> workers.data;
    manager.do_work -> workers.do_work;
    workers.more_work -> manager.more_work;
}
