/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmarks is supposed to implement an A*-search through a grid.
 * However, it appears that the Savina implementation is incomplete and does not
 * correctly implement A*. A key component of A* is cost estimation, which helps
 * to guide the search into the right direction. However, this is completely
 * missing in the Savina implementation. Instead the search is underacted and
 * behaves more like a brute force algorithm. It seems more to be directed by
 * accident, as some neighbors are visited before others due to the way each
 * nodes lists its neighbors. Moreover, the algorithm does not search for the
 * optimal path, but only finds a path.
 *
 * The manager reactor contains and initializes a 3-dimensional grid of nodes.
 * Each node is connected to some of its neighbors. To which ones, is decided
 * randomly during initialization.
 *
 * The search starts at a single origin node. This node is send to the first
 * worker. The worker then collects all neighbors of this node into a queue.
 * When done, it retrieves the first node from this queue and again adds all
 * unvisited neighbors to the queue. This process is continued until a certain
 * number of nodes have been visited. How many nodes each worker visits is
 * specified by the `threshold` parameter.
 *
 * When finished, the worker sends the list of remaining nodes to visit back to
 * the manager, which then forwards one of these nodes to each of the workers to
 * start a searches from these nodes.
 *
 * The use of a list for sending nodes back from the workers to the manager is a
 * noteworthy difference between our implementation and the Savina suite. In the
 * Akka implementation, each node is send as an individual message. However, in
 * LF, we cannot send multiple messages at the same tag, and introducing a delay
 * via a logical action would be very costly for many messages. Instead, we send
 * only a single message containing a list of nodes.
 *
 * It is also important to note that the workers in this benchmark operate on
 * shared state (the grid). Each node has an attribute that indicates its
 * parent. Initially, this attribute is uninitialized, but it is updated when it
 * is visited by a worker. Thus, the parent attribute can also be used to
 * determine whether a node was already visited. However, multiple reactions may
 * access the parent attribute of the same node at the same time. Thus,
 * similarly to the Akka implementation, the attribute is implemented as an
 * atomic variable. However, this does not fully eliminate the race condition.
 * Sometimes one reaction might write first and sometimes another reaction
 * writes first, effectively introducing nondeterminism into the benchmark.
 *
 * The peculiarities of this design also lead to another quirk. The benchmark
 * does not scale well with the number of threads. A single threaded execution
 * is much faster than a multi threaded one. Interestingly the same effect can
 * be observed in the Akka implementation. This indicates that the problem lies
 * in the benchmark itself, and not (only) in the LF runtime. In fact,
 * multi-threaded executions have the tendency to perform much more work as
 * compared to single threaded execution. This is likely due to the race-conditions
 * mentioned before.
 *  
 * @author Christian Menard
 * @author Hannes Klein
 * @author Soroush Bateni
 */

target CCpp {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    build-type : RelWithDebInfo,
    cmake-include: "GuidedSearch/GuidedSearch.cmake",
    files: ["GuidedSearch/GuidedSearchCommon.cc", 
        "GuidedSearch/GuidedSearchCommon.hh", 
        "GuidedSearch/GridNode.cc", 
        "GuidedSearch/GridNode.hh"],
    logging: "warn"
};

preamble {=
    #include "GuidedSearchCommon.hh"
    #include <deque>
    #include <list>
    #include <iostream>
    #include <memory>
=}

reactor Manager(numWorkers: size_t(20), gridSize: size_t(30), priorities: size_t(30)) {

    state grid: Grid*;
    state nodesToVisit:std::shared_ptr<std::deque<GridNode*>>;
    state pathWasFound: bool(false);
    
    input start: bool;
    output finished: bool;
    
    output[numWorkers] search: std::shared_ptr<WorkMessage>;
    input[numWorkers] pathFound: bool;
    input[numWorkers] moreNodesToVisit:std::shared_ptr<std::deque<GridNode*>>;
    
    logical action next;
    
    reaction (start) -> next {=
        self->grid = new Grid(self->gridSize, self->priorities);
        self->nodesToVisit = std::make_shared<std::deque<GridNode*>>();
        srand(123456);
        self->grid->initializeData(); // reset the self->grid
        self->nodesToVisit->clear();
        self->pathWasFound = false;
        
        // start execution, first visit the origin node
        self->nodesToVisit->push_back(self->grid->originNode());
        schedule(next, 0);
    =}
    
    reaction (next) -> next, search {=
        // abort if path was found
        if (self->pathWasFound) {
            return;
        }

        // send nodes from the internal queue to all workers
        size_t workerIndex{0};        
        while(!self->nodesToVisit->empty() && workerIndex < self->numWorkers) {
            GridNode* startNode = self->nodesToVisit->front();
            self->nodesToVisit->pop_front();
            auto work_message = std::make_shared<WorkMessage>(startNode, self->grid->targetNode());
            SET(search[workerIndex], work_message);
            workerIndex++;
        }
        
         // continue with the next iteration
         schedule(next, 0);
    =}
    
    reaction(pathFound) -> finished {=
        self->pathWasFound = true;
        bool valid = self->grid->validate();
        info_print("Found a path through the grid");
        info_print("Result valid: %d", valid);
        SET(finished, true);
    =}
    
    reaction (moreNodesToVisit) {=
        // collect more nodes to visit from all workers and store them in the internal queue
        for (int i=0; i< moreNodesToVisit_width; i++) {
            if (moreNodesToVisit[i]->is_present) {
                const auto& nodes = moreNodesToVisit[i]->value;
                if (!nodes->empty()) {
                    self->nodesToVisit->insert(self->nodesToVisit->end(), nodes->begin(), nodes->end());
                }
            }
        }
    =}
    
    reaction(shutdown) {=
        delete(self->grid);
    =}
}

reactor Worker(bank_index: int(0), threshold: size_t(1024)) {
    
    input search: std::shared_ptr<WorkMessage>;
    output pathFound: bool;
    output moreNodesToVisit:std::shared_ptr<std::deque<GridNode*>>;

    preamble {=

        void busyWait() {
            for (int i = 0; i < 100; i++) {
                rand();
            }
        }
    =}
    
    reaction(search) -> pathFound, moreNodesToVisit {=
        auto workMessage = search->value;
        GridNode* targetNode = workMessage->target;
        GridNode* currentNode = workMessage->node;

        char current_node_str_rep[100];
        char target_node_str_rep[100];
        info_print("Worker %d: search path from %s to %s.", self->bank_index, currentNode->toString(current_node_str_rep, 100), targetNode->toString(target_node_str_rep, 100));
        auto workQueue = std::make_shared<std::deque<GridNode*>>();
        
        workQueue->push_back(currentNode);
        
        // start the search, but visit at most threshold nodes
        size_t nodesProcessed{0};
        while(!workQueue->empty() && nodesProcessed < self->threshold) {
            
            nodesProcessed++;
            busyWait();
            
            GridNode* loopNode = workQueue->front();
            workQueue->pop_front();
            size_t numNeighbors = loopNode->numNeighbors();
            
            for (size_t i{0}; i < numNeighbors; i++) {
                GridNode* loopNeighbor = loopNode->neighbor(i);
                bool success = loopNeighbor->setParent(loopNode);
                if(success) {
                    if(loopNeighbor == targetNode) {
                        SET(pathFound, true);
                        return;
                    } else {
                        workQueue->push_back(loopNeighbor);
                    }
                }
            }
        }
        
        if(!workQueue->empty()) {
            SET(moreNodesToVisit, workQueue);
        } 
        // Otherwise (if the queue is empty) we have hit a dead end
    =}

}

/* [[[cog
    cog.outl(f'main reactor (')
    cog.outl(f'    numIterations:size_t({numIterations}),')
    cog.outl(f'    threshold:size_t({threshold}),')
    cog.outl(f'    gridSize:size_t({gridSize}),')
    cog.outl(f'    priorities:size_t({priorities}),')
    cog.outl(f'    numWorkers:size_t({numWorkers})')
    cog.outl(') {')
]]] */
main reactor (
    numIterations: size_t(12), 
    threshold: size_t(1024), 
    gridSize: size_t(30), 
    priorities: size_t(30), 
    numWorkers: size_t(20)
) {
// [[[end]]]
    
    manager = new Manager(numWorkers=numWorkers, gridSize=gridSize, priorities=priorities);
    workers = new[numWorkers] Worker(threshold=threshold);
    
    reaction(startup) -> manager.start {=       
        // printBenchmarkInfo("GuidedSearchBenchmark");
        // printArgs("numIterations", numIterations, "threshold", threshold, "gridSize", gridSize, "priorities", priorities, "numWorkers", numWorkers);
        // printSystemInfo();

        SET(manager.start, true);
    =}
    
    manager.search -> workers.search;
    workers.pathFound -> manager.pathFound;
    workers.moreNodesToVisit -> manager.moreNodesToVisit;
}