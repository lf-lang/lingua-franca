/**
 * Parallelism benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * This is the C version of Hannes Klein's implementation of this
 * benchmark for the Cpp target. Adapted from 
 * github.com/hnnskl/lingua-franca/blob/dev-savina-cpp/benchmark/Cpp/Savina/trapezoid/TrapezoidalBenchmarkGenerator.lf
 * 
 * This version also does not use the BenchmarkRunner.
 * 
 * @author Hannes Klein
 * @author Soroush Bateni
 * @author Shaokai Lin
 */

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    flags: "-lm"
};


preamble {=
    typedef struct WorkMessage {
    
      double l;
      double r;
      double h;
    } WorkMessage;
    
    void printBenchmarkInfo(char* benchmarkId) {
        printf("Benchmark: %s\n", benchmarkId);
    }
        
    void printSystemInfo() {
            
        printf("System information\n"); 
        printf("O/S Name: ");
            
        #ifdef _WIN32
        printf("Windows 32-bit");
        #elif _WIN64
        printf("Windows 64-bit");
        #elif __APPLE__ || __MACH__
        printf("Mac OSX");
        #elif __linux__
        printf("Linux");
        #elif __FreeBSD__
        printf("FreeBSD");
        #elif __unix || __unix__
        printf("Unix");
        #else
        printf("Other");
        #endif
            
        printf("\n");
    }
=}

reactor Master(numWorkers:int(100), L:double(1.0), R:double(5.0), N:int(10000000)) {
    
    state numTermsReceived:int(0);
    state resultArea:double(0.0);
    
    output[numWorkers] outWorkers:WorkMessage;
    input[numWorkers] inWorkers:double;
    
    logical action sendWorkMessages;
    
    reaction(startup) -> sendWorkMessages {=
        
        // reset local state
        self->numTermsReceived = 0;
        self->resultArea = 0.0;
        
        // start execution
        schedule(sendWorkMessages, 0);
    =}
    
    reaction(sendWorkMessages) -> outWorkers {=
        
        double workerRange = (self->R - self->L) / self->numWorkers;
        double precision = (self->R - self->L) / self->N;
        for(int i = 0; i < outWorkers_width; ++i) {
            double wl = (workerRange * i) + self->L;
            double wr = wl + workerRange;
            
            SET(outWorkers[i], ((WorkMessage){wl,wr,precision}));
        }
    =}
    
    reaction(inWorkers) {=
        
        for(int i = 0; i < inWorkers_width; ++i) {
            if(inWorkers[i]->is_present) {
                self->numTermsReceived += 1;
                self->resultArea += inWorkers[i]->value;
            }
        }
        
        if(self->numTermsReceived == self->numWorkers) {
            printf("Area: %f.\n", self->resultArea);
        	request_stop();
        }
    =}
}


reactor Worker(instance:int(0)) {
    
    preamble {=
        #include <math.h>
        
        // the function to integrate
        double fx(double x) {
            
            double a = sin(pow(x, 3.0) - 1);
            double b = x + 1;
            double c = a / b;
            double d = sqrt(1.0 + exp(sqrt(2 * x)));
            double r = c * d;
            return r;
        }
    =}
    
    input inMaster:WorkMessage;
    output outMaster:double;
    
    reaction(inMaster) -> outMaster {=
        
        double r = inMaster->value.r;
        double l = inMaster->value.l;
        double h = inMaster->value.h;
        int n = (int)( ((r - l) / h) );
        double accumArea = 0.0;
        
        int i = 0;
        while(i < n) {
            double lx = (i * h) + l;
            double rx = lx + h;
            
            double ly = fx(lx);
            double ry = fx(rx);
            
            double area = 0.5 * (ly + ry) * h;
            accumArea += area;
            
            i += 1;
        }
        
        SET(outMaster, accumArea);
    =}
}

/* [[[cog
    cog.outl(f'main reactor Trapezoidal(numWorkers:int({workers}), numPieces:int({pieces}), leftEndPoint:double({left}), rightEndPoint:double({right}))') 
]]] */
    main reactor Trapezoidal(numWorkers:int(100), numPieces:int(10000000), leftEndPoint:double(1.0), rightEndPoint:double(5.0))

// [[[end]]]    
{
    

    master = new Master(numWorkers=numWorkers, L=leftEndPoint, R=rightEndPoint, N=numPieces);
    
    reaction(startup) {=
        printBenchmarkInfo("TrapezoidalBenchmark");
        printf("numWorkers: %d.\n", self->numWorkers);
        printf("numPieces: %d.\n", self->numPieces);
        printf("leftEndPoint: %f.\n", self->leftEndPoint);
        printf("rightEndPoint: %f.\n", self->rightEndPoint);
        printSystemInfo();
    =}
    
    workers = new[numWorkers] Worker();
    
    workers.outMaster -> master.inWorkers;
    master.outWorkers -> workers.inMaster;
}