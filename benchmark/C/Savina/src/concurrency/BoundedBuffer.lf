/**
 * Copyright (C) 2020 TU Dresden and UC Berkeley
 * 
 * This benchmark models a bounded buffer that is used to synchronize between a
 * group of consumers and a group of producers. In the Akka implementation of
 * this benchmark, all producers, consumers and the manager operate fully
 * asynchronously. However, in the LF implementation everything is synchronous.
 * Thus, strictly speaking, the buffer isn't actually needed as we can design
 * the program so that every tick a producer produces data and a consumer
 * consumes it. But, the number of consumers and producers can be selected
 * arbitrarily. Therefore, we still need some logic that takes care of
 * orchestrating the producers according to the rate at which the consumers
 * consume. Also, we could think about using an alternative design, where the
 * consumers don't become available again immediately after consuming (at a
 * later tag). Therefore, this benchmark still implements most of
 * synchronization logic of the original manager in the Akka version.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 * @author Matt Chorlian
 */

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    files: ["/lib/c/reactor-c/util/deque.h", "/lib/c/reactor-c/util/deque.c", "../include/PseudoRandom.h"],
    flags: "-lm",
    logging: "warn"
};

preamble {=
    #include "PseudoRandom.h"
    #include <math.h>
    
    double processItem(double curTerm, size_t cost) {
        double res = curTerm;
        
        PseudoRandom random;
        random.mValue = cost;

        if(cost > 0) {
            for(size_t i = 0; i < cost; i++) {
                for(size_t j = 0; j < 100; j++) {
                    res += log(labs(nextDouble(&random)) + 0.01);
                }
            }
        } else {
            res += log(labs(nextDouble(&random)) + 0.01);
        }
        
        return res;
    }
=}


reactor ManagerReactor(bufferSize: size_t(50), numProducers: size_t(40), numConsumers: size_t(40)) {

    preamble {=
        #include "deque.c"
    =}
    
    state adjustedBuffersize: size_t(0);
    state pendingData: deque_t;
    state numTerminatedProducers: size_t(0);
    state producerTerminated: {=bool[]=};
    state producer_id: size_t(0);
    
    input[numProducers] producerData: double;
    input[numProducers] producerFinished: bool;
    output[numProducers] producerCommand: bool;
    
    input[numConsumers] consumerAvailable: bool;
    output[numConsumers] consumerData: double;
    
    reaction(startup) -> producerCommand {=
        // reset local state
        self->adjustedBuffersize = self->bufferSize - self->numProducers;
        self->numTerminatedProducers = 0;
        self->producerTerminated = malloc(self->numProducers * sizeof(bool));
        for (int i = 0; i < self->numProducers; i++) {
            self->producerTerminated[i] = false;
        }
        self->producer_id = 0;

        // start execution by signalling all producers that they should send data        
        for (int i = 0; i < self->numProducers; i++) {
            SET(producerCommand[i], true);
        }
    =}
        
    reaction(consumerAvailable) -> consumerData, producerCommand {=
        // abort if all producers have terminated and all data has been send
        if((self->numTerminatedProducers == self->numProducers) && deque_is_empty(&self->pendingData)) {
            return;
        }
        
        size_t consumer_id = 0;
        size_t activatedProducers = 0;
        while(!deque_is_empty(&self->pendingData) && consumer_id < self->numConsumers) {
            if (consumerAvailable[consumer_id]->is_present) {
                SET(consumerData[consumer_id], (size_t)deque_peek_front(&self->pendingData));
                deque_pop_front(&self->pendingData);
                // tell a producer to create a new data item for the next round
                if (activatedProducers < self->numProducers && !self->producerTerminated[self->producer_id]) {
                    SET(producerCommand[self->producer_id], true);
                    self->producer_id = (self->producer_id + 1) % self->numProducers;
                    activatedProducers++;
                }
            }
            consumer_id++;
        }
 
    =}
        
    reaction(producerData) {=
        for (int i = 0; i < self->numProducers; i++) {
            if (producerData[i]->is_present) {
                size_t prodData = producerData[i]->value;
                deque_push_back(&self->pendingData, (void*) prodData);
            }
        }
    =}
    
    reaction(producerFinished) {=
        for (size_t i = 0; i < self->numProducers; i++) {
            if (producerFinished[i]->is_present) {
                self->numTerminatedProducers++;
                self->producerTerminated[i] = true;
            }
        }
    =}           

    reaction(shutdown) {=
        free(self->producerTerminated);
    =}
        
}

reactor ProducerReactor(bank_index: size_t(0), numItemsToProduce: size_t(1000), prodCost: size_t(25)) {

    state prodItem: double(0.0);
    state itemsProduced: size_t(0);
    
    input produce: bool;
    output data: double
    
    output finished: bool;
    
    reaction (startup) {=   
        // reset local state
        self->prodItem = 0.0;
        self->itemsProduced = 0;
        return;
    =}
    
    reaction(produce) -> data, finished {=
        self->prodItem = processItem(self->prodItem, self->prodCost);
        SET(data, self->prodItem);
        self->itemsProduced++;
        
        if (self->itemsProduced == self->numItemsToProduce) {
            SET(finished, true);
        }
    =}
}

reactor ConsumerReactor(bank_index: size_t(0), consCost: size_t(25)) {
    
    state consItem: double(0.0);
    
    input data: double;
    output available: bool;
    
    logical action sendAvailable;
    
    reaction (startup) -> sendAvailable {=
        // reset local state
        self->consItem = 0.0;
        schedule(sendAvailable, 0);
    =}
    
    reaction(sendAvailable) -> available {=
        SET(available, true);
    =}
    
    reaction(data) -> sendAvailable {=
        self->consItem = processItem(self->consItem + data->value, self->consCost);
        schedule(sendAvailable, 0);
    =}
}


/* [[[cog
  cog.outl('main reactor (')
  cog.outl(f'    bufferSize: size_t({bufferSize}),')
  cog.outl(f'    prodCost: size_t({prodCost}),')
  cog.outl(f'    consCost: size_t({consCost}),')
  cog.outl(f'    numItemsPerProducer: size_t({numItemsPerProducer}),')
  cog.outl(f'    numConsumers: size_t({numConsumers}),')
  cog.outl(f'    numProducers: size_t({numProducers})')
]]] */
main reactor (
    bufferSize: size_t(50),
    prodCost: size_t(25),
    consCost: size_t(25),
    numItemsPerProducer: size_t(1000),
    numConsumers: size_t(40),
    numProducers: size_t(40)
// [[[end]]]
) {

    manager = new ManagerReactor(bufferSize=bufferSize, numProducers=numProducers, numConsumers=numConsumers);
    producers = new[numProducers] ProducerReactor(numItemsToProduce=numItemsPerProducer, prodCost=prodCost);
    consumers = new[numConsumers] ConsumerReactor(consCost=consCost);
    
    manager.producerCommand -> producers.produce;
    producers.data -> manager.producerData;
    producers.finished -> manager.producerFinished;
    
    consumers.available -> manager.consumerAvailable;
    manager.consumerData -> consumers.data;
}