/**
 * Copyright (C) 2020 TU Dresden
 * 
 * For more details on this benchmark, see the Cpp version from which it was derived:
 * https://github.com/lf-lang/lingua-franca/blob/master/benchmark/Cpp/Savina/src/concurrency/LogisticMap.lf.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 */

target C {
     /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
}

reactor RateComputer(bank_index: size_t(0), startRate: double(3.46), rateIncrement: double(0.0025)) {
    
    state rate: double;

    input compute: double;
    output result: double;
    
    reaction(startup) {=
        self->rate = self->startRate + (self->bank_index * self->rateIncrement);
    =}
    
    reaction(compute) -> result {=
        double term = compute->value;
        double res = self->rate * term * (1 - term);
        SET(result, res);
    =}
}

reactor SeriesWorker(bank_index: size_t(0), termIncrement: double(0.0025), startRate: double(3.46), rateIncrement: double(0.0025)) {
    
    state curTerm: double;
    
    input nextTerm: int;
    input getTerm: int;
    output term: double;
    
    computer = new RateComputer(bank_index=bank_index, startRate=startRate, rateIncrement=rateIncrement);

    reaction (startup) {=
        // initialize local state
        self->curTerm = self->bank_index * self->termIncrement;   
    =}
    
    reaction(nextTerm) -> computer.compute {=
        SET(computer.compute, self->curTerm);
    =}
    
    reaction(computer.result) {=
        self->curTerm = computer.result->value;
    =}
    
    reaction(getTerm) -> term {=
        SET(term, self->curTerm);
    =}
}


reactor Manager(numSeries: size_t(10), numTerms: size_t(25000)) {
 
    state currentIteration: size_t(0);
    
    output nextTerm: int;
    output getTerm: int;
    input[numSeries] results: double;
    
    logical action next;
    
    reaction(startup) -> next {=
        schedule(next, 0);
    =}
    
    reaction(next) -> getTerm, nextTerm, next {=
        if(self->currentIteration == self->numTerms) {
            SET(getTerm, 0);
            return;
        }

        SET(nextTerm, 0);
        self->currentIteration++;
        schedule(next, 0);
    =}
    
    reaction(results) {=
        double terms_sum = 0.0;
        for (size_t i = 0; i < results_width; ++i) {
            terms_sum += results[i]->value;
        }
        printf("Terms sum: %f", terms_sum);
    =}
}

/* [[[cog
  cog.outl(f"main reactor (numTerms: size_t({numTerms}), startRate: double({startRate}), numSeries: size_t({numSeries})) {{")
]]] */
main reactor (numTerms: size_t(25000), startRate: double(3.46), numSeries: size_t(10)) {
/// [[[end]]]
    
    manager = new Manager(numSeries=numSeries, numTerms=numTerms);
    seriesWorkers = new[numSeries] SeriesWorker(startRate=startRate, rateIncrement=0.0025, termIncrement=0.0025);
    
    (manager.nextTerm)+ -> seriesWorkers.nextTerm;
    (manager.getTerm)+ -> seriesWorkers.getTerm;
    seriesWorkers.term -> manager.results;
}
