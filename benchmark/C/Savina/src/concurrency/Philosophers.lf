/**
 * Copyright (C) 2020 TU Dresden and UC Berkeley
 * 
 * For more details on this benchmark, see the Cpp version from which it was derived:
 * https://github.com/lf-lang/lingua-franca/blob/master/benchmark/Cpp/Savina/src/concurrency/Philosophers.lf.
 * 
 * @author Christian Menard
 * @author Edward A. Lee
 */
target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 0,
    /// [[[end]]]
    logging: warn
};

reactor Philosopher(
    bank_index:int(0),     // Instance number in a bank of reactors.
    count:int(10000)    // Having eaten this many times, send finished.
) {
    output finished:bool;
    
    input eat:bool;
    input denied:bool;
    output hungry:bool;
    output done:bool;
    
    state times_eaten:int;

    reaction(startup) -> hungry {=
        info_print("Hello! I am philosopher %d, and I am very hungry!", self->bank_index);
        self->times_eaten = 0;
        SET(hungry, true);
    =}
    
    reaction(eat) -> done, finished, hungry {=
        // ... take left and right fork
        info_print("Philosopher %d is eating.", self->bank_index);
        self->times_eaten++;
        SET(done, true);
        
        if (self->times_eaten == self->count) {
            SET(finished, true);
        } else {
            SET(hungry, true);
        }
    =}
   
    reaction(denied) -> hungry {=
        info_print("Philosopher %d was denied and is thinking.", self->bank_index);

        // Well, I will just try again...
        SET(hungry, true);
    =}
}

reactor Arbitrator(num_philosophers:int(20)) {

    preamble {=
        /*
         * Try to acquire both forks for a philosopher. Returns true if
         * successful and false otherwise. 
         */
        bool acquire_forks(bool forks[], int instance, int num_philosophers) {
            int left = instance;
            int right = (instance + 1) % num_philosophers;
            if (forks[left] || forks[right]) {
                // someone else has access to the forks
                return false;
            } else {
                // Forks are available. Mark them in use.
                forks[left] = true;
                forks[right] = true;
                return true;
            }
        }

        /*
         * Release the forks acquired by a philosopher. This does not perform
         * any checks!
         */
         void free_forks(bool forks[], int instance, int num_philosophers) {
            forks[instance] = false; // left
            forks[(instance + 1) % num_philosophers] = false; // right
         }
         
         enum Reply {
            INVALID = 0,
            EAT = 1,
            DENIED = 2,
        };
    =}
        
    /** Signal from philosopher that it has eaten enough times in the iteration. */
    input[num_philosophers] finished:bool;
    
    /** Signal from philosopher that it is ready to eat. */
    input[num_philosophers] hungry:bool;
    /** Signal from philosopher that it is done eating. */
    input[num_philosophers] done:bool;
    /** Signal to philosopher to start eating. */
    output[num_philosophers] eat:bool;
    /** Signal to philosopher to wait. */
    output[num_philosophers] denied:bool;
    
    state forks:bool[];
    state replies:int[];
    state finished_philosophers:int(0);
    state arbitration_id:int(0);
    state retries:int(0);
    
    logical action send_replies;
    
    reaction(startup) {=
        self->forks = calloc(self->num_philosophers, sizeof(bool));
        self->replies = calloc(self->num_philosophers, sizeof(int));
    =}

    reaction(send_replies) -> eat, denied {=
        for(size_t i = 0; i < self->num_philosophers; i++) {
            if (self->replies[i] == EAT) {
                SET(eat[i], true);
            } else if (self->replies[i] == DENIED) {
                SET(denied[i], true);
            }
        }
        memset(self->replies, INVALID, sizeof(int) * self->num_philosophers);
    =}

    reaction(done) {=
        for(int i = 0; i < done_width; i++) {
            if (done[i]->is_present) {
                free_forks(self->forks, i, self->num_philosophers);
            }
        }
    =}
        
    reaction(hungry) -> send_replies {= 
        // Iterate over all philosophers, each time starting from a different one.
        // This arbitration ensures that no philosopher has to starve.
        for(int i = self->arbitration_id; i < self->arbitration_id + self->num_philosophers; i++) {
            int j = i % self->num_philosophers;
            if (hungry[j]->is_present) {
                if (acquire_forks(self->forks, j, self->num_philosophers)) {
                    self->replies[j] = EAT; 
                } else {
                    self->replies[j] = DENIED;
                    self->retries++;
                }    
            }
        }
        
        self->arbitration_id++;
        if (self->arbitration_id == self->num_philosophers) {
            self->arbitration_id = 0;
        }
        schedule(send_replies, 0);
    =}
    
    reaction (finished) {=
        for(int i = 0; i < finished_width; i++) {
            if (finished[i]->is_present) {
                self->finished_philosophers++;
            }
        }
        
        if (self->finished_philosophers == self->num_philosophers) {
            printf("Arbitrator: All philosophers are sated. Number of denials to philosophers: %d", self->retries);
            request_stop();
        }        
    =}
}

/* [[[cog
  cog.outl(f"main reactor Philosophers(num_philosophers:int({numPhilosophers}), count:int({numEatingRounds})) {{")
]]] */
main reactor Philosophers(num_philosophers:int(20), count:int(10000)) {
/// [[[end]]]   
    arbitrator = new Arbitrator(num_philosophers = num_philosophers);
    philosophers = new[num_philosophers] Philosopher(count=count);
    
    arbitrator.eat -> philosophers.eat;
    arbitrator.denied -> philosophers.denied;
    philosophers.hungry -> arbitrator.hungry;
    philosophers.done -> arbitrator.done;
    philosophers.finished -> arbitrator.finished;
}