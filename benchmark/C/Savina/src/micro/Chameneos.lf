/**
 * Copyright (C) 2020 TU Dresden
 * 
 * Micro-benchmark from the Savina benchmark suite. Intended
 * to measure the effects on shared resources (the mailbox of
 * the mall actor) while processing messages in the actor model.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Benchmark description:
 *
 * For this problem, each program should
 * - create four differently coloured (blue, red, yellow, blue)
 *   concurrent chameneos creatures
 * - each creature will repeatedly go to the meeting place and
 *   meet, or wait to meet, another chameneos
 * - each creature will change colour to complement the colour
 *   of the chameneos that they met
 * - after N total meetings have taken place, any creature
 *   entering the meeting place will take on a faded colour,
 *   report the number of creatures it has met, and end
 * - write the sum of reported creatures met
 * 
 * To break the causality loop the mall reactor contains a logical
 * action.
 * 
 * @author Hannes Klein
 * @author Felix Wittwer
 * @author Marten Lohstroh
 */


target C {
    logging: warn
}

preamble {=
    char const* color_names[] = {"Red", "Yellow", "Blue", "Faded"};

    typedef enum {
      RED,
      YELLOW,
      BLUE,
      FADED
    } color_t;
    
    typedef enum {
      START_MSG,
      MEET_MSG,
      CHANGE_MSG,
      MEETING_COUNT_MSG,
      EXIT_MSG,
      NO_MSG
    } msg_type_t;
    
    typedef struct msg {
      msg_type_t type;
      color_t color;
      int id;
    } msg_t;

    color_t complement(const color_t color, const color_t otherColor) {
        switch(color) {
          case RED:
            switch(otherColor) {
              case RED:
                return RED;
              case YELLOW:
                return BLUE;
              case BLUE:
                return YELLOW;
              case FADED:
                return FADED;
            }
          case YELLOW:
            switch(otherColor) {
              case RED:
                return BLUE;
              case YELLOW:
                return YELLOW;
              case BLUE:
                return RED;
              case FADED:
                return FADED;
            }
          case BLUE:
            switch(otherColor) {
              case RED:
                return YELLOW;
              case YELLOW:
                return RED;
              case BLUE:
                return BLUE;
              case FADED:
                return FADED;
            }
          case FADED:
            return FADED;
        }
        
        error_print("Error while calculating the color complement given the \
        two colors %s, %s .", color_names[color], color_names[otherColor]);

        return FADED;
    }
        

=}

reactor ChameneosMallReactor(numMeetings:int(200000), numChameneos:int(5)) {
    
    state sumMeetings:int(0);
    state numFaded:int(0);
    state meetings:int(numMeetings);
    state messages:msg_t*;
    
    output[numChameneos] outChameneos:msg_t;
    input[numChameneos] inChameneos:msg_t;
    
    // logical action to break causality loop
    logical action pairChameneos;
    
    reaction(startup) -> outChameneos {=
         // initialize local state
         self->sumMeetings = 0;
         self->numFaded = 0;
         self->meetings = self->numMeetings;
         self->messages = calloc(self->numChameneos, sizeof(struct msg));
        for (int i; i < self->numChameneos; i++) {
          self->messages[i].type = NO_MSG;
        }        
        // start execution
        for(int i = 0; i < self->numChameneos; i++) {
          msg_t msg = { .type = START_MSG, .color = 0, .id=0};
          SET(outChameneos[i], msg);
         }
    =}
    
    reaction(pairChameneos) -> outChameneos {=
        int waitingChameneoIndex = -1;
        
        for (int i = 0; i < self->numChameneos; ++i) {
            if (self->messages[i].type != NO_MSG) {
                // Chameneo i present in mall
                if(self->meetings > 0) {
                    if (waitingChameneoIndex == -1) {
                        waitingChameneoIndex = i;
                    } else {
                        self->meetings -= 1;
                        info_print("setting up meeting %d between: %d, %d", self->meetings, waitingChameneoIndex, i);
                        SET(outChameneos[waitingChameneoIndex], self->messages[i]);
                        self->messages[waitingChameneoIndex].type = NO_MSG;
                        self->messages[i].type = NO_MSG;
                        waitingChameneoIndex = -1;
                    }
               } else {
                    msg_t msg = { .type = EXIT_MSG, .color = RED, .id=0};
                    SET(outChameneos[i], msg);
               }
            }
        }
    =}
    
    reaction(inChameneos) -> pairChameneos {=
        // detect all chameneos that are present
        for(int i = 0; i < self->numChameneos; ++i) {
            if(inChameneos[i]->is_present) {
                if(inChameneos[i]->value.type == MEETING_COUNT_MSG) {
                    self->numFaded += 1;
                    self->sumMeetings = self->sumMeetings + inChameneos[i]->value.id; // reuse id field
                    if (self->numFaded == self->numChameneos) {
                        request_stop();
                        return;
                    }
                } else {
                    self->messages[i] = inChameneos[i]->value;
                }
            }
        }        
        schedule(pairChameneos, 0);
    =}
}

reactor ChameneosChameneoReactor(bank_index:int(0), numChameneos:size_t(5)) {
    
    state meetings:int(0);
    state color:color_t;
    state startColor:color_t;
    
    input inMall:msg_t;
    output outMall:msg_t;
    
    output[numChameneos] outChameneos:msg_t;
    input[numChameneos] inChameneos:msg_t;
    
    reaction(startup) {=
        self->startColor = self->bank_index%3;
    =}

    reaction(inMall) -> outMall, outChameneos {=
        
        if(inMall->value.type == START_MSG) {
            // initialize local state
            self->meetings = 0;
            self->color = self->startColor;
            // start execution
            msg_t msg = {.type = MEET_MSG, .color = self->color, .id = self->bank_index};
            SET(outMall, msg);
        } else if(inMall->value.type == MEET_MSG) {
            color_t otherColor = inMall->value.color;
            int senderId = inMall->value.id;
            self->color = complement(self->color, otherColor);
            self->meetings += 1;
            msg_t cham_msg = {.type = CHANGE_MSG, .color = self->color, .id = self->bank_index};
            SET(outChameneos[senderId], cham_msg);
            msg_t mall_msg = {.type = MEET_MSG, .color = self->color, .id = self->bank_index};
            SET(outMall, mall_msg);
        } else if(inMall->value.type == EXIT_MSG) {
            self->color = FADED;
            msg_t msg = {.type = MEETING_COUNT_MSG, .color = self->color, .id = self->meetings};
            SET(outMall, msg);
        }
    =}
    
    reaction(inChameneos) -> outMall {=
        
        msg_t message;
        
        // find message
        for(int i = 0; i < self->numChameneos; i++) {
            if(inChameneos[i]->is_present) {
                // Obtain a copy by dereferencing.
                message = inChameneos[i]->value;
            }
        }
        
        if(message.type == CHANGE_MSG) {
            message.type = MEET_MSG;
            message.id = self->bank_index;
            self->meetings += 1;
            SET(outMall, message);
        }
        
    =}
    
}

main reactor (numIterations:int(12), numMeetings:int(200000), numChameneos:size_t(5)) {
    
    mall = new ChameneosMallReactor(numMeetings=numMeetings, numChameneos=numChameneos);
    
    chameneos = new[numChameneos] ChameneosChameneoReactor(numChameneos=numChameneos);

    // Connect chamaneos and the mall.
    chameneos.outMall -> mall.inChameneos;
    mall.outChameneos -> chameneos.inMall;

    // Connect every Chameneo with every Chameneo.
    chameneos.outChameneos -> interleaved(chameneos.inChameneos);
}
