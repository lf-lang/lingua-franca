/**
 * Micro-benchmark from the Savina benchmark suite, where it is called Fork Join.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * According to the Savina paper performance can be achieved by
 * batch processing messages in the worker actors.
 * This is not possible with reactors because scheduling and
 * advancing logical time occurs after each round of
 * message delivery.
 * 
 * @author Hannes Klein (c++ version)
 * @author Matthew Chorlian (adapted C++ version to C)
 */


/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numWorkers=60
# -D numMessagesPerReactor=10000
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numWorkers' in globals():
    numWorkers = int(numWorkers)
  else:
    globals()['numWorkers'] = 60
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numWorkers = {numWorkers}')
  cog.outl(f'// numMessagesPerReactor={numMessagesPerReactor}')
]]] */
// Generated file with the following parameters:
// numWorkers = 60
// numMessagesPerReactor = 10000
// [[[end]]]

target C {
    /* [[[cog
      if (threaded_runtime=="True"):
          cog.outl(f"threads: {threads},")
      else:
          cog.outl("threads: 0,")
    ]]] */
    threads: 2,
    /// [[[end]]]
    flags: "-lm",
    tracing: true
};


reactor ThroughputReactor(totalMessages:int(10000)) {
    
    preamble {=
        #include <math.h>

        void performComputation(double theta) {
            double sint = sin(theta);
            // volatile to defeat dead code elimination
            volatile double res = sint * sint;
        }
    =}
    
    input inMessage:bool;
            
    reaction(inMessage) {=
        performComputation(37.2);
    =}
}

/**
 * 
 */
reactor ThroughputProducer(totalMessages:int(10000), numConsumer:int(60)) {
    
    state sent_messages: int(0)
    output outMessage:bool;
    
    timer t(0, 1 nsec);
        
    reaction(t) -> outMessage {=
        SET(outMessage, true);
        self->sent_messages++;
        if (self->sent_messages == self->totalMessages) {
            request_stop();
        }
    =}
}

/* [[[cog
cog.outl(f'main reactor (numMessagesPerReactor:int({numMessagesPerReactor}), numWorkers:int({numWorkers}))')
]]] */
main reactor (numMessagesPerReactor:int(10000), numWorkers:int(60)) 
// [[[end]]]
{
    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=numWorkers);
    
    worker = new[numWorkers] ThroughputReactor(totalMessages=numMessagesPerReactor);

    (producer.outMessage)+ -> worker.inMessage;    
}
