/**
 * This is used to test the performance of the federated runtime in decentralized mode 
 * (number of reactions per second) when message types are ROS2 messages. The rclcpp 
 * serialization framework is used to serialize and deserialize messages.
 *
 * Failure for this benchmark is failing to halt or getting the wrong data.
 * 
 * Note: the terminal must be properly sourced for ROS2. See 
 * https://docs.ros.org/en/foxy/Tutorials/Configuring-ROS2-Environment.html.
 * 
 */
target CCpp {
    coordination: decentralized,
    timeout: 10 sec,
    cmake-include: "include/CMakeListsExtension.txt"
};

preamble {=
    #include "std_msgs/msg/int32.hpp"   
=}

reactor Clock(offset:time(0), period:time(1 sec)) {
    output y:std::shared_ptr<std_msgs::msg::Int32>;
    
    timer t(0, period);
    state count:int(0);
    state serialized_msg:rclcpp::SerializedMessage({=0u=});
    reaction(t) -> y {=
        
        (self->count)++;
           
        auto msg = std::make_shared<std_msgs::msg::Int32>();
        msg->data = self->count;
        
        SET(y, msg);
    =}
}
reactor Destination {
    input x:std::shared_ptr<std_msgs::msg::Int32>;
    
    state s:int(1);
    reaction(x) {=
        // info_print("Received %d.", int_msg.data);
        if (x->value->data != self->s) {
            warning_print("Expected %d and got %d.", self->s, x->value->data);
        }
        self->s++;
    =}
    reaction(shutdown) {=
        info_print("**** shutdown reaction invoked.");
        if (self->s != 10000002) {
            warning_print("Expected 10000002 but got %d.", self->s);
        }
        info_print("Approx. time per reaction: %lldns", get_elapsed_physical_time()/(self->s+1));
    =}
}
federated reactor (period:time(17 usec)) {
    c = new Clock(period = period);
    d = new Destination();
    c.y -> d.x serializer "ros2";
}
