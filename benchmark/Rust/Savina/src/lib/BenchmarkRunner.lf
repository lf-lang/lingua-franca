/*
 * Copyright (c) 2021, TU Dresden.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Johannes Hayeß
 */


target Rust;

reactor BenchmarkRunner(num_iterations:usize(12)) {
    output start: unit;
    input finished: unit;
    
    logical action nextIteration;
    logical action done;
    
    state num_iterations(num_iterations);
    // Number of iterations already executed
    state count:usize(0);
    // Start time for runtime measurement.
    state start_time: {=  reactor_rt::Instant =}({= Instant::now() =});
    // Runtime measurements.
    state measured_times: {= Vec<reactor_rt::Duration> =};
    
    reaction(startup) -> nextIteration {=
        self.measured_times = vec![Duration::ZERO; self.num_iterations];
        // Start the first iteration.  
        ctx.schedule(nextIteration, Asap);  
    =}
    
    reaction(nextIteration) -> start {=
        self.start_time = ctx.get_physical_time();
        self.count += 1;
        ctx.set(start, ());
    =}
    
    reaction(finished) -> nextIteration, done {=
        let end_time = ctx.get_physical_time();
        let duration = end_time.duration_since(self.start_time);
        self.measured_times[self.count - 1] = duration;
        
        println!("Iteration {}\t- {} ms\t= {} µs\t= {} ns", self.count, duration.as_millis(), duration.as_micros(), duration.as_nanos());

        if self.count < self.num_iterations {
            ctx.schedule(nextIteration, Asap);
        } else {
            ctx.schedule(done, Asap);
        }
    =}
    
    reaction(done) {=
        let mut measured_micros: Vec<u128> = self.measured_times
            .iter()
            .map(|d| d.as_micros())
            .collect();
        measured_micros.sort_unstable();
        let measured_millis: Vec<f64> = measured_micros.iter().map(|d| *d as f64 / 1000.0).collect();
        
        if let (Some(best), Some(worst)) = (measured_millis.iter().nth(0), measured_millis.iter().last()) {
            println!("\nExecution - Summary:");
            println!("Best Time: {} ms", best);
            println!("Worst Time: {} ms", worst);
            println!("Median: {} ms", median(&measured_millis));   
        } else {
            panic!("Error: no measurements recorded!");
        }
        
        ctx.request_stop(Asap);
    =}
    
    preamble {=
        use std::fmt::Display;
        
        fn median(exec_times: &[f64]) -> f64 {
            if exec_times.is_empty() {
                0.0
            } else {
                let size = exec_times.len();
                let middle = size / 2;
                if size % 2 == 1 {
                    exec_times[middle]
                } else {
                    (exec_times[middle-1] + exec_times[middle]) / 2.0
                }      
            }          
        }
        
        fn print_pair<T: Display>(s: T, t: T) {
            println!("{:>25} = {}", s, t);
        }
        
        pub fn print_benchmark_info(benchmark_id: &str) {
            println!("Benchmark: {}", benchmark_id);
        }
        
        pub fn print_system_info() {
            println!("System information:");
            
            let OS_NAME = {
                if cfg!(target_os = "windows") {
                    "Windows"
                } else if cfg!(target_os = "macos") {
                    "macOS"
                } else if cfg!(target_os = "linux") {
                    "Linux"
                } else if cfg!(target_os = "freebsd") {
                    "FreeBSD"
                } else if cfg!(target_os = "dragonfly") {
                    "DragonFly BSD"
                } else if cfg!(target_os = "openbsd") {
                    "OpenBSD"
                } else if cfg!(target_os = "netbsd") {
                    "NetBSD"
                } else if cfg!(target_family = "unix") {
                    "Unix"
                } else {
                    "Other"
                }
            };
            print_pair("O/S Name", OS_NAME);
        }
        
        #[macro_export]
        macro_rules! print_args {
            ( $($arg:expr, $v:expr), + ) => {
                println!("Arguments:");
                $(
                    println!("{:>25} = {}", $arg, $v);
                )+
            };
        }
    =}
}
