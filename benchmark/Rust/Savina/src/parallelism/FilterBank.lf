/**
 * Copyright (C) 2020 TU Dresden
 * 
 * This benchmark is particularly interesting for LF, as it has an interesting
 * structure and highlights a significant advantage compared to Akka. The
 * benchmark implements a "filter bank". Each bank consists of a pipeline of
 * several filters. The banks operate in parallel. The input data stream is
 * split, so that each bank receives a copy of the data value, and the data
 * streams are merged again by summing the results. In principle, this design
 * exposes both data level parallelism due to the separate banks and pipeline
 * parallelism within a bank. However, this LF implementation does not exploit
 * the pipeline parallelism. This would require additional logical actions
 * between the pipeline stages. The effect of this unknown and it might be
 * worthwhile to explore if pipeline parallelism can be exploited by this
 * benchmakr in an efficient way. However, since only the FIR filter perform
 * large computations and most other reactions are small, likely there is not
 * much to gain from implementing a real pipeline.
 *
 * An interesting note can also be made about the structure and complexity of
 * the LF benchmark compared to the Akka implementation. The Akka implementation
 * uses a "Branches" actor that distributes the single input signal to the
 * banks. In LF, this actor is not needed and we simply use a broadcast
 * connection.

 * More interesting, is how the outputs of the different banks are merged in the
 * Akka implementation. This is done by two actors: "TaggedForward" and
 * "Integrator". "TaggedForward" simply assigns tags to each message which
 * indicate the bank that the message originates from. Essentially this merges
 * the N data streams from the N banks to a single data stream. Unless the name
 * might suggest, the "Integrate" does not apply an integrarion filter on the
 * data, but rather collects results and "integrates" them in a vector.
 * Basically the input is 1 value from N banks, and the output is one
 * N-dimensional vector. The integrate vector simply stores all received values
 * in a buffer, and sends out a vector containing values from all banks once
 * messages from all banks have been received. This synchronization mechanism is
 * not needed at all in the LF implementation and makes both the "TaggedForward"
 * and the "Integrate" actors superflous. The combine reactor simply has a
 * multiport import and thus simultaneously receives values from all N banks.
 * 
 * @author Christian Menard
 * @author Hannes Klein
 * @author Johannes HayeÃŸ
 */

target Rust {
    build-type: Release,
    cargo-features: [ "cli" ],
    rust-include: "../lib/matrix.rs"
};

import BenchmarkRunner from "../lib/BenchmarkRunner.lf";

reactor Producer(numChannels: usize(8), numSimulations: usize(34816), numColumns: usize(16384)) {
    state num_simulations(numSimulations);
        
    state numMessagesSent: usize(0);
    
    input start: unit;
    output next: unit;
    output finished: unit;
    
    logical action sendNext: unit;
    
    reaction(start) -> sendNext {=
        // reset local state
        self.numMessagesSent = 0;
        
        // start execution
        ctx.schedule(sendNext, Asap);
    =}
    
    reaction(sendNext) -> sendNext, next, finished {=
        if self.numMessagesSent < self.num_simulations {
            ctx.set(next, ());
            self.numMessagesSent += 1;
            ctx.schedule(sendNext, Asap);
        } else {
            ctx.set(finished, ());
        }
    =}
}

reactor Source {
    state maxValue: usize(1000);
    state current: usize(0);
    
    input next: unit;
    output value: f64;

    input inFinished: unit;
    output outFinished: unit;
    
    reaction (next) -> value {=
        ctx.set(value, self.current);
        self.current = (self.current + 1) % self.maxValue;
    =}
    
    reaction (inFinished) -> outFinished {=
        ctx.set(outFinished, ());
        // reset local state
        self.current = 0;
    =}
}

reactor Bank(bank_index: usize(0), numColumns: usize(16384), numChannels: usize(8)) {    
    input inValue: double;
    input inFinished: void;
    output outValue: double;
    output outFinished: void;
    
    input setF: Matrix<f64>;
    input setH: Matrix<f64>;
    
    preamble {=
        use crate::matrix::Matrix;
    =}
    
    delay0 = new Delay(delayLength={=numColumns - 1=});
    fir0 = new FirFilter(bank_index=bank_index, peekLength=numColumns);
    sample = new SampleFilter(sampleRate=numColumns);
    delay1 = new Delay(delayLength={=numColumns - 1=});
    fir1 = new FirFilter(bank_index=bank_index, peekLength=numColumns);
    
    inFinished, delay0.outFinished, fir0.outFinished, sample.outFinished, delay1.outFinished, fir1.outFinished -> 
        delay0.inFinished, fir0.inFinished, sample.inFinished, delay1.inFinished, fir1.inFinished, outFinished;
        
    inValue, delay0.outValue, fir0.outValue, sample.outValue, delay1.outValue, fir1.outValue -> 
        delay0.inValue, fir0.inValue, sample.inValue, delay1.inValue, fir1.inValue, outValue;   
    
    setH -> fir0.setCoefficients;
    setF -> fir1.setCoefficients;
}

reactor Delay(delayLength: usize(16383)) {
    state delay_length(delayLength);
    
    state myState: Vec<f64>;
    state placeHolder: usize(0);
    
    input inValue: f64;
    input inFinished: unit;
    output outValue: f64;
    output outFinished: unit;
    
    reaction(startup) {=
        // one time init
        self.myState = vec![0.0; self.delayLength];
        self.placeHolder = 0;
    =}
    
    reaction(inValue) -> outValue {=
        let result = ctx.get(inValue).unwrap();
        ctx.set(outValue, self.myState[self.placeHolder]);
        myState[self.placeHolder] = result;
        self.placeHolder = (placeHolder + 1) % self.delay_length;
    =}
    
    reaction(inFinished) -> outFinished {=
        ctx.set(outFinished, ());
        
        // reset local state
        self.myState = vec![0.0; self.delay_length];
        self.placeHolder = 0;
    =}
}

reactor FirFilter(bank_index: usize(0), peekLength: usize(16384)) {
    state bank_index(bank_index);
    state peek_length(peekLength);
    
    state data: Vec<f64>;
    state dataIndex: usize(0);
    state dataFull: bool(false);
    state coefficients: {=Rc<Matrix<f64>>=};
    
    input setCoefficients: Rc<Matrix<f64>>;
    input inValue: f64;
    input inFinished: unit;
    output outValue: f64;
    output outFinished: unit;
    
    preamble {=
        use crate::matrix::Matrix;
    =}
    
    reaction(startup) {=
        // reset local state
        data = vec![0.0; self.peek_length];
        self.dataIndex = 0;
        self.dataFull = false;
    =}
    
    reaction(setCoefficients) {=
        self.coefficients = ctx.get(setCoefficients).unwrap();
    =}
    
    reaction(inValue) -> outValue {=
        data[self.dataIndex] = ctx.get(inValue).unwrap();
        self.dataIndex += 1;
        
        if self.dataIndex == self.peek_length {
            self.dataFull = true;
            self.dataIndex = 0;
        }
        
        if self.dataFull {
            let sum = 0.0;
            for (i, d) in self.data.iter().enumerate() {
                sum += data * self.coefficients.get(bank_index, peek_length - i - 1);
            }
            ctx.set(outValue, sum);
        }
    =}
    
    reaction(inFinished) -> outFinished {=
        ctx.set(outFinished, 0);
        
        // reset local state
        self.data = vec![0.0; self.peek_length];
        self.data_index = 0;
        self.data_full = false;
    =}
}

reactor SampleFilter(sampleRate: usize(16384)) {
    state sample_rate(sampleRate);
    
    state samplesReceived: usize(0);
    
    input inValue: f64;
    input inFinished: unit;
    output outValue: f64;
    output outFinished: unit;
    
    reaction(inValue) -> outValue {=
        if self.samplesReceived == 0 {
            ctx.set(outValue, ctx.get(inValue).unwrap());
        } else {
            ctx.set(outValue, 0.0);
        }
        self.samplesReceived = (self.samplesReceived + 1) % self.sample_rate;
    =}
    
    reaction(inFinished) -> outFinished {=
        ctx.set(outFinished, ());
        
        // reset local state
        self.samplesReceived = 0;
    =}
}

reactor Combine(numChannels: usize(8)) {
    state num_channels(numChannels);
    
    input[numChannels] inValues: f64;
    input[numChannels] inFinished: unit;
    output outValue: f64;
    output outFinished: unit;
    
    state numFinished: usize(0);
    
    reaction(inValues) -> outValue {=
        let sum = 0;
        for x in inValues {
            sum += ctx.get(x).unwrap();
        }
        ctx.set(outValue, sum);
    =}
    
    reaction(inFinished) -> outFinished {=
        for port in inFinished {
            if ctx.is_present(port) {
                self.numFinished += 1;
            }
        }
        if self.numFinished == self.num_channels {
            ctx.set(outFinished, ());
            // reset local state
            self.numFinished = 0;
        }
    =}
}

reactor Sink(printRate: usize(100)) {
    state print_rate(printRate);
    
    state count: usize(0);
    
    input inValue: f64;
    input inFinished: unit;
    output outFinished: unit;
    
    reaction(inValue) {=
        let result = ctx.get(inValue).unwrap();
        
        if self.count % self.print_Rate == 0 {
            info!("SinkActor: result = {}", result);
        }
        self.count += 1;
    =}
    
    reaction(inFinished) -> outFinished {=
        ctx.set(outFinished, ());
        // reset local state
        self.count = 0;
    =}
}

main reactor (numIterations: usize(12), numSimulations: usize(34816), numColumns: usize(16384), numChannels: usize(8)) {
    state num_iterations(numIterations);
    state num_simulations(numSimulations);
    state num_columns(numColumns);
    state num_channels(numChannels);
    
    preamble {=
        use std::sync::Arc;
    =}
    
    reaction(startup) -> banks.setF, banks.setH {=
        // initialize the coefficients of all FIR filters
        let mut mH = Matrix<f64>(numChannels, numColumns);
        let mut mF = Matrix<f64>(numChannels, numColumns);

        for j in 0..self.num_channels {
            for i in 0..self.num_columns {
                let h = (1.0 * i * numColumns) + (1.0 * j * numChannels) + j + i + j + 1;
                let f = (1.0 * i * j) + (1.0 * j * j) + j + i;
                mH.set(j, i, h);
                mF.set(j, i, f);
            }
        }
        
        // convert to immutable pointers before sending. This ensures that all recipients can receive a pointer
        // to the same matrix and no copying is needed
        let mH_r = Arc::new(mH);
        let mF_r = Arc::new(mF);
        
        for (h, f) in banks__setH.into_iter().zip(&banks__setF) {
            ctx.set(h, Arc::clone(&mH_r));
            ctx.set(f, Arc::clone(&mF_r));
        }
        
        print_benchmark_info("FilterBankBenchmark");
        print_args!(
            "numIterations",
            self.num_iterations,
            "numSimulations",
            self.num_simulations,
            "numColumns",
            self.num_columns,
            "numChannels",
            self.num_channels,
        );
        print_system_info();
    =}

    runner = new BenchmarkRunner(num_iterations=numIterations);    
    producer = new Producer(numSimulations=numSimulations, numChannels=numChannels, numColumns=numColumns);
    source = new Source();
    banks = new[numChannels] Bank(numColumns=numColumns, numChannels=numChannels);
    combine = new Combine(numChannels=numChannels);
    sink = new Sink(printRate=100);
    
    runner.start -> producer.start;
    
    producer.next -> source.next;
    producer.finished -> source.inFinished;
    
    (source.value)+ -> banks.inValue;
    (source.outFinished)+ -> banks.inFinished;
   
    banks.outValue -> combine.inValues;
    banks.outFinished -> combine.inFinished
  
    combine.outValue -> sink.inValue;
    combine.outFinished -> sink.inFinished;
    
    sink.outFinished -> runner.finished;
    
    preamble {=
        use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
        use crate::matrix::Matrix;
    =}
}
