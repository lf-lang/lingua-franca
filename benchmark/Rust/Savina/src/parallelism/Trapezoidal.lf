/**
 * Copyright (C) 2020 TU Dresden
 *
 * @author Hannes Klein
 * @author Felix Wittwer
 * @author ClÃ©ment Fournier
 */

target Rust {
    build-type: Release,
    cargo-features: ["cli"],
    cargo-dependencies: {
        reactor_rt: {
            features: ["parallel-runtime"]
        }
    }
};

import BenchmarkRunner from "../lib/BenchmarkRunner.lf";


reactor Manager(num_workers: usize(100), L: f64(1), R: f64(5), N: u32(10000000)) {
    // parameters
    state L(L);
    state R(R);
    state N(N);
    state num_workers(num_workers);

    preamble {=
        use super::trapezoidal::WorkMessage;
    =}

    state numTermsReceived: u32(0);
    state resultArea: f64(0.0);

    input inStart: unit;
    output outFinished: unit;

    output[num_workers] outWorkers: WorkMessage;
    input[num_workers] inWorkers: f64;

    logical action sendWorkMessages;

    reaction(inStart) -> sendWorkMessages {=
        // reset local state
        self.numTermsReceived = 0;
        self.resultArea = 0.0;

        // start execution
        ctx.schedule(sendWorkMessages, Asap);
    =}

    reaction(sendWorkMessages) -> outWorkers {=
        let worker_range = (self.R - self.L) / (self.num_workers as f64);
        let precision = (self.R - self.L) / (self.N as f64);

        for (i, worker) in outWorkers.into_iter().enumerate() {
            let wl = (worker_range * i as f64) + self.L;
            let wr = wl + worker_range;
            ctx.set(worker, WorkMessage { l: wl, r: wr, h: precision })
        }
    =}

    reaction(inWorkers) -> outFinished {=
        for inWorker in inWorkers {
            if let Some(v) = ctx.get(&inWorker) {
                self.numTermsReceived += 1;
                self.resultArea += v;
            }
        }

        if self.numTermsReceived as usize == self.num_workers {
            info!("Area: {}", self.resultArea);
            ctx.set(outFinished, ());
        }
    =}
}


reactor Worker {
    preamble {=
        use super::trapezoidal::WorkMessage;
    =}

    input inManager: WorkMessage;
    output outManager: f64;

    reaction(inManager) -> outManager {=
        let WorkMessage { r, l, h } = ctx.get(inManager).unwrap();
        let n =  ((r - l) / h) as i32;
        let mut accum_area = 0.0;

        for i in 0..n {
            let lx: f64 = (i as f64 * h) + l;
            let rx: f64 = lx + h;

            let ly = fx(lx);
            let ry = fx(rx);

            accum_area += 0.5 * (ly + ry) * h;
        }

        ctx.set(outManager, accum_area);
    =}

    preamble {=
        // the function to integrate
        fn fx(x: f64) -> f64 {
            let a = f64::sin(f64::powf(x, 3.0) - 1.0);
            let b = x + 1.0;
            let c = a / b;
            let d = f64::sqrt(1.0 + f64::exp(f64::sqrt(2.0 * x)));
            c * d
        }
    =}
}


main reactor (num_iterations:usize(12), numPieces:u32(10000000), leftEndPoint:f64(1.0), rightEndPoint:f64(5.0), numWorkers:usize(100)) {
    state num_iterations(num_iterations);
    state num_pieces(numPieces);
    state left_end_point(leftEndPoint);
    state right_end_point(rightEndPoint);
    state num_workers(numWorkers);

    manager = new Manager(num_workers=numWorkers, L=leftEndPoint, R=rightEndPoint, N=numPieces);
    runner = new BenchmarkRunner(num_iterations=num_iterations);

    runner.start -> manager.inStart;
    manager.outFinished -> runner.finished;

    reaction(startup) {=
        print_benchmark_info("TrapezoidalBenchmark");
        print_args!(
            "num_iterations",
            self.num_iterations,
            "numPieces",
            self.num_pieces,
            "leftEndPoint",
            self.left_end_point,
            "rightEndPoint",
            self.right_end_point,
            "numWorkers",
            self.num_workers
        );
        print_system_info();
    =}

    workers = new[numWorkers] Worker();

    workers.outManager -> manager.inWorkers;
    manager.outWorkers -> workers.inManager;

    preamble {=
        use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
        #[derive(Copy, Clone, Debug)]
        pub struct WorkMessage {
            pub l: f64,
            pub r: f64,
            pub h: f64,
        }
    =}
}

