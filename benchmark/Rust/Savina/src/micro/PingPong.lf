/**
 * Copyright (C) 2021 TU Dresden
 *
 * Micro-benchmark from the Savina benchmark suite.
 * See documentation in the C++ version.
 *
 * @author ClÃ©ment Fournier
 */

target Rust {
    single-file-project: true,
    build-type: Release,
    cargo-features: ["cli"],
};

import BenchmarkRunner from "../lib/BenchmarkRunner.lf";

reactor Ping(count: usize(40000)) {
    state count(count);
    state pings_left: usize(0);
    
    input inStart: unit;
    output outFinished: unit;
    
    output outPing: unit;
    input inPong: unit;

    logical action serve;
    
    reaction(inStart) -> serve {=
        // reset local state
        self.pings_left = self.count;
        // start execution
        ctx.schedule(serve, Asap);
    =}

    reaction(serve) -> outPing {=
        ctx.set(outPing, ());
        self.pings_left -= 1;
    =}

    reaction (inPong) -> serve, outFinished {=
        if self.pings_left == 0 {
            ctx.set(outFinished, ());
        } else {
            ctx.schedule(serve, Asap);
        }
    =}
}

reactor Pong {
    input inPing: unit;
    output outPong: unit;
    
    reaction(inPing) -> outPong {=
        ctx.set(outPong, ());   
    =}
}

main reactor (num_iterations:usize(12), count:usize(40000)) {
    state num_iterations(num_iterations);
    state count(count);
    
    ping = new Ping(count=count);
    runner = new BenchmarkRunner(num_iterations=num_iterations);
    
    runner.start -> ping.inStart;
    ping.outFinished -> runner.finished;
    
    reaction(startup) {=
        print_benchmark_info("PingPongBenchmark");
        print_args!(
            "num_iterations",
            self.num_iterations,
            "count",
            self.count
        );
        print_system_info();
    =}
    
    pong = new Pong();
    
    ping.outPing -> pong.inPing;
    pong.outPong -> ping.inPong;
    
    preamble {=
        use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
    =}
}
