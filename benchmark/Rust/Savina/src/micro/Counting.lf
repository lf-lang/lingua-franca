/**
 * Copyright (C) 2020 TU Dresden
 *
 * Micro-benchmark from the Savina benchmark suite.
 * Intended to measure message passing overhead by stress
 * testing the mailbox of actors.
 * See https: //shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * See documentation in the C++ version
 *
 * @author Hannes Klein
 * @author ClÃ©ment Fournier
 */

target Rust {
    build-type: Release,
    cargo-features: ["cli"],
};

import BenchmarkRunner from "../lib/BenchmarkRunner.lf";

reactor ProducerReactor(count_to: u32(1000000)) {
    state i: u32(0); // current counter value
    state count_to(count_to);

    input inStartCounting: unit;
    output outFinishedCounting: unit;

    output outResetCounter: unit;
    output outIncrement: unit;
    output outRetrieveResult: unit;
    input inResult: u32;

    logical action count: unit;

    reaction(inStartCounting) -> count, outResetCounter {=
        // reset counter
        self.i = 0;
        ctx.set(outResetCounter, ());
        ctx.schedule(count, Asap);
    =}

    reaction(count) -> outIncrement, outRetrieveResult, count {=

        if self.i < self.count_to {
            ctx.set(outIncrement, ());
            self.i += 1;
            ctx.schedule(count, Asap);
        } else {
            ctx.set(outRetrieveResult, ());
        }
    =}

    reaction(inResult) -> outFinishedCounting {=
        let in_result = ctx.get(inResult).unwrap();
        if in_result != self.count_to {
            error!("ProducerReactor expected {}, found: {}", self.count_to, in_result);
        } else {
            info!("SUCCESS! received: {}", in_result);
        }
        ctx.set(outFinishedCounting, ());
    =}
}

reactor CountingReactor {
    input inReset: unit;
    input inIncrement: unit;
    input inRetrieveResult: unit;
    output outSendResult: u32;
    
    state count: u32(0);
    
    reaction(inReset) {=
        self.count = 0;
    =}

    reaction(inIncrement) {=
        self.count += 1;
    =}
    reaction(inRetrieveResult) -> outSendResult {=
        ctx.set(outSendResult, self.count);
    =}
}

main reactor (num_iterations: usize(12), count_to: u32(1000000)) {
    state num_iterations(num_iterations);
    state count_to(count_to);
    
    producer = new ProducerReactor(count_to = count_to);
    runner = new BenchmarkRunner(num_iterations=num_iterations);
    
    runner.start -> producer.inStartCounting;
    producer.outFinishedCounting -> runner.finished;
    
    reaction(startup) {=
        print_benchmark_info("CountingBenchmark");
        print_args!(
            "num_iterations",
            self.num_iterations,
            "count_to",
            self.count_to
        );
        print_system_info();
    =}
    
    counter = new CountingReactor();
    
    producer.outIncrement -> counter.inIncrement;
    producer.outResetCounter -> counter.inReset;
    producer.outRetrieveResult -> counter.inRetrieveResult;
    counter.outSendResult -> producer.inResult;
    
    preamble {=
        use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
    =}
}
