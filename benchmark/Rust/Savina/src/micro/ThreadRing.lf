/**
 * Copyright (C) 2020 TU Dresden
 *
 * Micro-benchmark from the Savina benchmark suite, intended
 * to measure message passing overhead and switching between
 * actors.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * To open the causality loop in the ring of reactors one
 * reactor uses a logical action for message passing.
 *
 * @author Hannes Klein
 * @author Felix Wittwer
 * @author Johannes HayeÃŸ
 */


target Rust {
    build-type: Release,
    cargo-features: ["cli"],
};

import BenchmarkRunner from "../lib/BenchmarkRunner.lf";

reactor ThreadRingReactor {
    output out_next_reactor: {= PingMessage =};
    input in_prev_reactor: {= PingMessage =};
    output finished: unit;

    preamble {=
        #[derive(Copy, Clone)]
        pub struct PingMessage {
            pings_left: usize,
        }

        impl PingMessage {
            pub const fn new(pings_left: usize) -> Self {
                PingMessage {
                    pings_left,
                }
            }

            pub const fn has_next(&self) -> bool {
                self.pings_left > 0
            }

            pub const fn pings_left(&self) -> usize {
                self.pings_left
            }

            pub const fn next(&self) -> Self {
                PingMessage::new(self.pings_left - 1)
            }
        }
    =}

    reaction(in_prev_reactor) -> out_next_reactor, finished {=
        if let Some(ip_reactor) = ctx.get(in_prev_reactor) {
            if ip_reactor.has_next() {
                ctx.set(out_next_reactor, ip_reactor.next());
            } else {
                ctx.set(finished, ());
                debug!("Finished with count {}", ip_reactor.pings_left());
            }
        }
    =}
}

reactor ThreadRingReactorLoopOpener {
    output out_next_reactor: {= PingMessage =};
    input in_prev_reactor: {= PingMessage =};
    input start: {= PingMessage =};
    output finished: unit;

    logical action send_to_next_reactor: {= PingMessage =};

    reaction(send_to_next_reactor) -> out_next_reactor {=
        if let Some(stn_reactor) = ctx.get(send_to_next_reactor) {
            ctx.set(out_next_reactor, stn_reactor);
        }
    =}

    reaction(in_prev_reactor) -> send_to_next_reactor, finished {=
        if let Some(ip_reactor) = ctx.get(in_prev_reactor) {
            if ip_reactor.has_next() {
                ctx.schedule_with_v(send_to_next_reactor, Some(ip_reactor.next()), Asap);
            } else {
                ctx.set(finished, ());
                debug!("Finished with count {}", ip_reactor.pings_left());
            }
        }
    =}

    reaction(start) -> send_to_next_reactor, finished {=
        if let Some(s) = ctx.get(start) {
            debug!("Starting with count {}", s.pings_left());
            if s.has_next() {
                ctx.schedule_with_v(send_to_next_reactor, Some(s.next()), Asap);
            } else {
                ctx.set(finished, ());
            }
        }
    =}

    preamble {=
        use crate::reactors::thread_ring_reactor::PingMessage;
    =}
}

reactor Initializer(num_reactors:usize(100), num_pings:usize(100000)) {
    state num_pings(num_pings);

    input in_start: unit;
    output out_finished: unit;

    // benchmark internal start and finish
    input[num_reactors] in_finished: unit;
    output out_start: {= PingMessage =};

    reaction(in_start) -> out_start {=
        ctx.set(out_start, PingMessage::new(self.num_pings));
    =}

    reaction(in_finished) -> out_finished {=
        ctx.set(out_finished, ());
    =}

    preamble {=
        use crate::reactors::thread_ring_reactor::PingMessage;
    =}
}

main reactor (num_iterations:usize(12), num_pings:usize(100000), num_reactors:usize(99)) {
    state num_iterations(num_iterations);
    state num_pings(num_pings);
    state num_reactors(num_reactors);

    init = new Initializer(num_reactors={=num_reactors + 1=}, num_pings=num_pings);
    runner = new BenchmarkRunner(num_iterations=num_iterations);

    runner.start -> init.in_start;
    init.out_finished -> runner.finished;

    reaction(startup) {=
        print_benchmark_info("ThreadRing benchmark");
        print_args!(
            "num_iterations",
            self.num_iterations,
            "num_pings",
            self.num_pings,
            "num_reactors",
            self.num_reactors
        );
        print_system_info();
    =}

    loopOpener = new ThreadRingReactorLoopOpener();

    workers = new[num_reactors] ThreadRingReactor();

    loopOpener.out_next_reactor, workers.out_next_reactor -> workers.in_prev_reactor, loopOpener.in_prev_reactor;

    init.out_start -> loopOpener.start;
    loopOpener.finished, workers.finished -> init.in_finished;

    preamble {=
        use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
    =}
}
