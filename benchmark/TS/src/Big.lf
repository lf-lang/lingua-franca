// See https://shamsimam.github.io/papers/2014-agere-savina.pdf

// Benchmark for many-to-many message passing.

// Actors send "ping" messages randomly to other actors.
// An actor responds to a ping message with a "pong".
target TypeScript {
    fast: true
};

main reactor Big(limit:number(25000)) {
    
    state startTime:time;
    
    s = new Sink();
    
    p1 = new PingPonger(limit = limit, index = 1);
    p2 = new PingPonger(limit = limit, index = 2);
    p3 = new PingPonger(limit = limit, index = 3);
    p4 = new PingPonger(limit = limit, index = 4);
    p5 = new PingPonger(limit = limit, index = 5);
    
    p1.done -> s.done1;
    p2.done -> s.done2;
    p3.done -> s.done3;
    p4.done -> s.done4;
    p5.done -> s.done5;
    
    p1.send2 -> p2.receive1;
    p1.send3 -> p3.receive1;
    p1.send4 -> p4.receive1;
    p1.send5 -> p5.receive1;
    
    p2.send1 -> p1.receive2;
    p2.send3 -> p3.receive2;
    p2.send4 -> p4.receive2;
    p2.send5 -> p5.receive2;
    
    p3.send1 -> p1.receive3;
    p3.send2 -> p2.receive3;
    p3.send4 -> p4.receive3;
    p3.send5 -> p5.receive3;
    
    p4.send1 -> p1.receive4;
    p4.send2 -> p2.receive4;
    p4.send3 -> p3.receive4;
    p4.send5 -> p5.receive4;
    
    p5.send1 -> p1.receive5;
    p5.send2 -> p2.receive5;
    p5.send3 -> p3.receive5;
    p5.send4 -> p4.receive5;
    
    p1.respond2 -> p2.ack1;
    p1.respond3 -> p3.ack1;
    p1.respond4 -> p4.ack1;
    p1.respond5 -> p5.ack1;
    
    p2.respond1 -> p1.ack2;
    p2.respond3 -> p3.ack2;
    p2.respond4 -> p4.ack2;
    p2.respond5 -> p5.ack2;
    
    p3.respond1 -> p1.ack3;
    p3.respond2 -> p2.ack3;
    p3.respond4 -> p4.ack3;
    p3.respond5 -> p5.ack3;
    
    p4.respond1 -> p1.ack4;
    p4.respond2 -> p2.ack4;
    p4.respond3 -> p3.ack4;
    p4.respond5 -> p5.ack4;
    
    p5.respond1 -> p1.ack5;
    p5.respond2 -> p2.ack5;
    p5.respond3 -> p3.ack5;
    p5.respond4 -> p4.ack5;
    
    reaction(startup) -> p1.start, p2.start, p3.start, p4.start, p5.start {=
        startTime = util.getCurrentPhysicalTime();
        p1.start = null;
        p2.start = null;
        p3.start = null;
        p4.start = null;
        p5.start = null;   
    =}
    
    reaction(s.stopTimer) {=
        if (startTime) {
            let elapsedTime = util.getCurrentPhysicalTime().subtract(startTime);
            console.log("Elapsed time: " + elapsedTime);
            util.requestStop();
        }
    =}
}


// Index is the number of this ping ponger and must be set
// to x with 1 <= x <= numberOfActors, when the instance is created.
reactor PingPonger(limit:number(25000), index:number(-1), numberOfActors:number(5)) {
    input start:null;
    output done:null;
    output send1:string;
    output send2:string;
    output send3:string;
    output send4:string;
    output send5:string;
    input receive1:string;
    input receive2:string;
    input receive3:string;
    input receive4:string;
    input receive5:string;
    output respond1:string;
    output respond2:string;
    output respond3:string;
    output respond4:string;
    output respond5:string;
    input ack1:string;
    input ack2:string;
    input ack3:string;
    input ack4:string;
    input ack5:string;
    
    state remainingServes:number(limit);
    
    logical action nextServe:null; // As in ping pong serve
    
    reaction (nextServe) -> send1, send2, send3, send4, send5 {=
        let sendIndex = Math.floor(Math.random()*(numberOfActors - 1)) + 1;
        // Don't serve to this actor
        if (sendIndex >= index) {
            sendIndex++;
        }
        switch (sendIndex) {
            case 1: {
                send1 = "ping";
//                console.log(`In index: ${index}, pinging: 1 `);
                break;
            }
            case 2: {
                send2 = "ping";
//                console.log(`In index: ${index}, pinging: 2 `);
                break;
            }
            case 3: {
                send3 = "ping";
//                console.log(`In index: ${index}, pinging: 3 `);
                break;
            }
            case 4: {
                send4 = "ping";
//                console.log(`In index: ${index}, pinging: 4 `);
                break;
            }
            case 5: {
                send5 = "ping";
//                console.log(`In index: ${index}, pinging: 5 `);
                break;
            }
        }
    =}
    
    reaction (receive1) -> respond1 {=
        respond1 = "pong";
//        console.log(`In index: ${index}, ponging: 1 `);
    =}
    
    reaction (receive2) -> respond2 {=
        respond2 = "pong";
//        console.log(`In index: ${index}, ponging: 2 `);
    =}
    
    reaction (receive3) -> respond3 {=
        respond3 = "pong";
//        console.log(`In index: ${index}, ponging: 3 `);
    =}
    
    reaction (receive4) -> respond4 {=
        respond4 = "pong";
//        console.log(`In index: ${index}, ponging: 4 `);
    =}
    
    reaction (receive5) -> respond5 {=
        respond5 = "pong";
//        console.log(`In index: ${index}, ponging: 5 `);
    =}
    
    reaction (start, ack1, ack2, ack3, ack4, ack5) -> nextServe, done {=
        remainingServes--;
//        console.log(`Got ack in index: ${index}, remaining serves: ${remainingServes} `);
        if (remainingServes == 0) {
            done = null;
        } else {
            actions.nextServe.schedule(0, null);
        }
    =}
    
}

reactor Sink(numberOfActors:number(5)) {
    input done1:null;
    input done2:null;
    input done3:null;
    input done4:null;
    input done5:null;
    output stopTimer:null;
    state count:number(0);
    
    reaction(done1) -> stopTimer {=
        count++;
        if (count == numberOfActors - 1) {
            stopTimer = null;
        }
    =}
    reaction(done2) -> stopTimer {=
        count++;
        if (count == numberOfActors - 1) {
            stopTimer = null;
        }
    =}
    reaction(done3) -> stopTimer {=
        count++;
        if (count == numberOfActors - 1) {
            stopTimer = null;
        }
    =}
    reaction(done4) -> stopTimer {=
        count++;
        if (count == numberOfActors - 1) {
            stopTimer = null;
        }
    =}
    reaction(done5) -> stopTimer {=
        count++;
        if (count == numberOfActors - 1) {
            stopTimer = null;
        }
    =}
}