target C {
  timeout: 100ms,
  workers: 1,
  cores: 1,
  thread-policy: "rt-fifo",
  logging: LOG
};

reactor PeriodicTask(duration:time = 2ms, period:time = 1ms, offset:time = 0ms, dl:time = 1000s) {
  timer t(offset, period)
  
  output o: int
  
  reaction(t) -> o {=
    printf(PRINTF_TIME "ms-deadline reactor started\n", self->dl / 1000000);
    instant_t start_time = lf_time_physical_elapsed();
    while (lf_time_physical_elapsed() - start_time < self->duration) {
        
    }
    printf(PRINTF_TIME "ms-deadline reactor completed\n", self->dl / 1000000);
    lf_set(o, 1);
  =} deadline (dl) {=
    printf(PRINTF_TIME "ms-deadline reactor deadline violated\n", self->dl / 1000000);
  =}
}

reactor DeadlineViolationSignal(dl:time = 2ms) {
    input i: int
    
    reaction (i) {=

    =} deadline (dl) {=
      printf("Probe: " PRINTF_TIME "ms-deadline-reactor deadline violated\n", self->dl / 1000000);
    =}
}

reactor Enclave1 {
  task1 = new PeriodicTask(period = 50ms, dl = 25ms, duration = 23ms, offset = 11ms)
  detector1 = new DeadlineViolationSignal(dl = 25ms)
  
  task1.o -> detector1.i  
}

reactor Enclave2 {
  task2 = new PeriodicTask(period = 50ms, dl = 50ms, duration = 10ms, offset = 10ms)
  detector2 = new DeadlineViolationSignal(dl = 50ms)
  
  task2.o -> detector2.i  
}

main reactor {
  enc1 = new Enclave1()
  
  @enclave
  enc2 = new Enclave2()
}