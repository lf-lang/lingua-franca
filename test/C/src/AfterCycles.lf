// This tests that "after" does not introduce spurious cycles. Success if running without detected a
// cycle.
target C

reactor Source {
  output out: unsigned

  reaction(startup) -> out {= lf_set(out, 1); =}
}

reactor Work {
  input in: unsigned
  output out: unsigned

  reaction(in) -> out {= lf_set(out, in->value); =}
}

main reactor AfterCycles {
  state count: int = 0
  s = new Source()
  w0 = new Work()
  w1 = new Work()

  s.out -> w0.in after 10 msec
  s.out -> w1.in after 20 msec

  reaction(w0.out) {=
    self->count++;
    interval_t elapsed_time = lf_time_logical_elapsed();
    printf("Received %d from worker 0 at time %lld.\n", w0.out->value, elapsed_time);
    if (elapsed_time != MSEC(10)) {
      fprintf(stderr, "Time should have been 10000000.\n");
      exit(1);
    }
    if (w0.out->value != 1) {
      fprintf(stderr, "Value should have been 1.\n");
      exit(4);
    }
  =}

  reaction(w1.out) {=
    self->count++;
    interval_t elapsed_time = lf_time_logical_elapsed();
    printf("Received %d from worker 1 at time %lld.\n", w1.out->value, elapsed_time);
    if (elapsed_time != MSEC(20)) {
      fprintf(stderr, "Time should have been 20000000.\n");
      exit(3);
    }
    if (w1.out->value != 1) {
      fprintf(stderr, "Value should have been 1.\n");
      exit(4);
    }
  =}

  reaction(shutdown) {=
    if (self->count != 2) {
      fprintf(stderr, "Top-level reactions should have been triggered but were not.\n");
      exit(5);
    }
  =}
}
