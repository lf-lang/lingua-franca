// This tests delaying a struct using after.
target C {
  timeout: 5 sec,
  fast: true,
  files: ["include/hello.h"]
}

preamble {=
  #include "hello.h"
=}

reactor Source {
  output out: hello_t*
  timer t(0, 1 sec)
  state s: int = 0

  reaction(t) -> out {=
    self->s++;
    // Dynamically allocate an output struct.
    SET_NEW(out);

    // Above allocates a struct, which then must be populated.
    out->value->name = "Earth";
    out->value->value = 42 * self->s;
  =}
}

// expected parameter is for testing.
reactor Print {
  input in: hello_t*
  state s: int = 0

  reaction(in) {=
    self->s++;
    printf("Received: name = %s, value = %d\n", in->value->name, in->value->value);
    if (in->value->value != 42 * self->s) {
      printf("ERROR: Expected value to be %d.\n", 42 * self->s);
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if (self->s == 0) {
      printf("ERROR: Print received no data.\n");
      exit(2);
    }
  =}
}

main reactor {
  s = new Source()
  p = new Print()
  s.out -> p.in after 1500 msec
}
