// This the after keyword with overlapped time intervals.
target C {
  fast: true,
  timeout: 5 sec
}

import Count from "lib/Count.lf"

reactor Test {
  input c: int
  state i: int = 0
  state received: int = 0

  reaction(c) {=
    self->received++;
    printf("Received %d.\n", c->value);
    (self->i)++;
    if (c->value != self->i) {
      printf("ERROR: Expected %d but got %d\n.", self->i, c->value);
      exit(1);
    }
    interval_t elapsed_time = lf_time_logical_elapsed();
    printf("Current logical time is: %lld\n", elapsed_time);

    interval_t expected_logical_time = SEC(2) + SEC(1)*(c->value - 1);
    if (elapsed_time != expected_logical_time) {
      printf("ERROR: Expected logical time to be %lld but got %lld\n.",
        expected_logical_time, elapsed_time
      );
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if (self->received == 0) {
      printf("ERROR: Final reactor received no data.\n");
      exit(3);
    }
  =}
}

main reactor AfterOverlapped {
  count = new Count()
  test = new Test()
  count.out -> test.c after 2 sec
}
