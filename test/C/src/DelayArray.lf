// This tests delaying an array type. The array length has to be agreed upon by all reactors.
target C {
  build-type: RelWithDebInfo
}

reactor DelayPointer(delay: time = 100 msec) {
  input in: int[]
  output out: int[]
  logical action a: int[]

  reaction(in) -> a {= lf_schedule_token(a, self->delay, in->token); =}

  reaction(a) -> out {= lf_set_token(out, a->token); =}
}

reactor Source {
  output out: int[]

  reaction(startup) -> out {=
    // Dynamically allocate an output array of length 3.
    // Note that the receiving reactors need to know that the length is 3.
    // A better design is given at:
    // https://www.lf-lang.org/docs/handbook/target-language-details?target=c#dynamically-allocated-data
    int* array =  (int*)malloc(3 * sizeof(int));
    for (size_t i = 0; i < 3; i++) {
      array[i] = i;
    }
    lf_set(out, array);
  =}
}

// The scale parameter is just for testing.
reactor Print(scale: int = 1) {
  input in: int[]

  reaction(in) {=
    int count = 0;     // For testing.
    bool failed = false; // For testing.
    printf("Received: [");
    for (int i = 0; i < 3; i++) {
      if (i > 0) printf(", ");
      printf("%d", in->value[i]);
      // For testing, check whether values match expectation.
      if (in->value[i] != self->scale * count) {
        failed = true;
      }
      count++;     // For testing.
    }
    printf("]\n");
    if (failed) {
      printf("ERROR: Value received by Print does not match expectation!\n");
      exit(1);
    }
  =}
}

main reactor DelayArray {
  s = new Source()
  d = new DelayPointer()
  p = new Print()
  s.out -> d.in
  d.out -> p.in
}
