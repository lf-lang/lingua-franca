// This tests delaying an array type.
target C

reactor DelayPointer(delay: time(100 msec)) {
    mutable input in: int[]
    output out: int[]
    logical action a: int[]

    reaction(in) -> a {=
        // mutable input guarantees *in will not be freed.
        lf_schedule_token(a, self->delay, in->token);
    =}

    reaction(a) -> out {= lf_set_token(out, a->token); =}
}

reactor Source {
    output out: int[]

    reaction(startup) -> out {=
        // Dynamically allocate an output array of length 3.
        SET_NEW_ARRAY(out, 3);

        // Above allocates the array, which then must be populated.
        out->value[0] = 0;
        out->value[1] = 1;
        out->value[2] = 2;
    =}
}

reactor Print(scale: int(1)) {  // The scale parameter is just for testing.
    input in: int[]

    reaction(in) {=
        int count = 0;       // For testing.
        bool failed = false; // For testing.
        printf("Received: [");
        for (int i = 0; i < in->length; i++) {
            if (i > 0) printf(", ");
            printf("%d", in->value[i]);
            // For testing, check whether values match expectation.
            if (in->value[i] != self->scale * count) {
                failed = true;
            }
            count++;         // For testing.
        }
        printf("]\n");
        if (failed) {
            printf("ERROR: Value received by Print does not match expectation!\n");
            exit(1);
        }
    =}
}

main reactor DelayArray {
    s = new Source()
    d = new DelayPointer()
    p = new Print()
    s.out -> d.in
    d.out -> p.in
}
