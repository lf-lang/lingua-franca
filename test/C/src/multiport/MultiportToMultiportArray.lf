// Check multiport output to multiport input. Destination port is wider than sending port.
target C {
  timeout: 2 sec,
  fast: true
}

reactor Source {
  timer t(0, 200 msec)
  output[2] out: int[]
  state s: int = 0

  reaction(t) -> out {=
    for(int i = 0; i < out_width; i++) {
      // Dynamically allocate an output array of length 3.
      int* array = (int*)malloc(3 * sizeof(int));

      // Above allocates the array, which then must be populated.
      array[0] = self->s++;
      array[1] = self->s++;
      array[2] = self->s++;

      // Set the output
      lf_set_array(out[i], array, 3);
    }
  =}
}

reactor Destination {
  state s: int = 15
  input[2] in: int[]

  reaction(in) {=
    int sum = 0;
    for (int i = 0; i < in_width; i++) {
      if (in[i]->is_present) {
        printf("Array length is %zu.\n", in[i]->length);
        for (int j = 0; j < in[i]->length; j++) {
          printf("Adding value %d.\n", in[i]->value[j]);
          sum += in[i]->value[j];
        }
      } else {
        printf("ERROR: Expected input to be present.\n");
        exit(1);
      }
    }
    printf("Sum of received: %d.\n", sum);
    if (sum != self->s) {
      printf("ERROR: Expected %d.\n", self->s);
      exit(1);
    }
    self->s += 36;
  =}

  reaction(shutdown) {=
    if (self->s <= 15) {
      fprintf(stderr, "ERROR: Destination received no input!\n");
      exit(1);
    }
    printf("Success.\n");
  =}
}

main reactor MultiportToMultiportArray {
  a = new Source()
  b = new Destination()
  a.out -> b.in
}
