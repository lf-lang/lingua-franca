// Check multiport capabilities on Outputs.
target C {
  timeout: 2 sec,
  fast: true
}

reactor Source {
  timer t(0, 200 msec)
  output[4] out: int
  state s: int = 0

  reaction(t) -> out {=
    for(int i = 0; i < 4; i++) {
      lf_set(out[i], self->s);
    }
    self->s++;
  =}
}

reactor Computation {
  input in: int
  output out: int

  reaction(in) -> out {=
    // No need to sleep for this test.
    // struct timespec sleep_time = {(time_t) 0, (long)200000000};
    // struct timespec remaining_time;
    // nanosleep(&sleep_time, &remaining_time);
    lf_set(out, in->value);
  =}
}

reactor Destination {
  state s: int = 0
  input[4] in: int

  reaction(in) {=
    int sum = 0;
    for (int i = 0; i < in_width; i++) {
      if (in[i]->is_present) sum += in[i]->value;
    }
    printf("Sum of received: %d.\n", sum);
    if (sum != self->s) {
      printf("ERROR: Expected %d.\n", self->s);
      exit(1);
    }
    self->s += 4;
  =}

  reaction(shutdown) {=
    if (self->s == 0) {
      fprintf(stderr, "ERROR: Destination received no input!\n");
      exit(1);
    }
    printf("Success.\n");
  =}
}

main reactor {
  a = new Source()
  t1 = new Computation()
  t2 = new Computation()
  t3 = new Computation()
  t4 = new Computation()
  b = new Destination()
  a.out -> t1.in, t2.in, t3.in, t4.in
  t1.out, t2.out, t3.out, t4.out -> b.in
}
