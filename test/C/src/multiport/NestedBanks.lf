/**
 * Test of nested banks with multiports.
 * @author Edward A. Lee
 */
target C

main reactor {
  a = new[2] A()
  c = new[3] C()
  d = new D()
  e = new E()

  (a.x)+ -> c.z, d.u, e.t
}

reactor A(bank_index: int = 0) {
  output[4] x: int
  b = new[2] B(a_bank_index=bank_index)
  b.y -> x
}

reactor B(a_bank_index: int = 0, bank_index: int = 0) {
  output[2] y: int

  reaction(startup) -> y {=
    int base = self->a_bank_index * 4 + self->bank_index * 2;
    lf_set(y[0], base);
    lf_set(y[1], base + 1);
  =}
}

reactor C(bank_index: int = 0) {
  input[2] z: int
  f = new F(c_bank_index=bank_index)
  g = new G(c_bank_index=bank_index)
  z -> f.w, g.s
}

reactor D {
  input[2] u: int

  reaction(u) {=
    for (int i = 0; i < u_width; i++) {
      lf_print("d.u[%d] received %d.", i, u[i]->value);
      if (u[i]->value != 6 + i) {
        lf_print_error_and_exit("Expected %d but received %d.", 6 + i, u[i]->value);
      }
    }
  =}
}

reactor E {
  input[8] t: int

  reaction(t) {=
    for (int i = 0; i < t_width; i++) {
      lf_print("e.t[%d] received %d.", i, t[i]->value);
    }
  =}
}

reactor F(c_bank_index: int = 0) {
  input w: int

  reaction(w) {=
    lf_print("c[%d].f.w received %d.", self->c_bank_index, w->value);
    if (w->value != self->c_bank_index * 2) {
      lf_print_error_and_exit("Expected %d but received %d.", self->c_bank_index * 2, w->value);
    }
  =}
}

reactor G(c_bank_index: int = 0) {
  input s: int

  reaction(s) {=
    lf_print("c[%d].g.s received %d.", self->c_bank_index, s->value);
    if (s->value != self->c_bank_index * 2 + 1) {
      lf_print_error_and_exit("Expected %d but received %d.", self->c_bank_index * 2 + 1, s->value);
    }
  =}
}
