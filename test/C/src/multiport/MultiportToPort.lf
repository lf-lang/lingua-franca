// Check multiport output to multiport input. Destination port is wider than sending port.
target C {
  timeout: 2 sec,
  fast: true
}

reactor Source {
  output[2] out: int

  reaction(startup) -> out {=
    for(int i = 0; i < out_width; i++) {
      printf("Source sending %d.\n", i);
      lf_set(out[i], i);
    }
  =}
}

reactor Destination(expected: int = 0) {
  input in: int
  state received: bool = false

  reaction(in) {=
    printf("Received: %d.\n", in->value);
    self->received = true;
    if (in->value != self->expected) {
      printf("ERROR: Expected %d.\n", self->expected);
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if (!self->received) {
      fprintf(stderr, "ERROR: Destination received no input!\n");
      exit(1);
    }
    printf("Success.\n");
  =}
}

main reactor MultiportToPort {
  a = new Source()
  b1 = new Destination()
  b2 = new Destination(expected=1)
  a.out -> b1.in, b2.in
}
