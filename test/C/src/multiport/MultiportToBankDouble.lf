// Check multiport output to bank of recipients where the source has two reactions that write to the
// output.
target C {
  timeout: 2 sec,
  fast: true
}

reactor Source {
  output[3] out: int  // Connected to a bank of Destination reactors

  reaction(startup) -> out {=
    for(int i = 0; i < out_width; i++) {
      lf_set(out[i], i);
    }
  =}

  // Test also that multiple appearances of the same effect port do not result in multiple
  // allocations of memory for the port.
  reaction(startup) ->
  // Contents of the reactions does not matter (either could be empty)
  out {=
    for(int i = 0; i < out_width; i++) {
      lf_set(out[i], i * 2);
    }
  =}
}

reactor Destination(bank_index: int = 0) {
  input in: int
  state received: bool = false

  reaction(in) {=
    printf("Destination %d received %d.\n", self->bank_index, in->value);
    if (self->bank_index * 2 != in->value) {
      printf("ERROR: Expected %d.\n", self->bank_index * 2);
      exit(1);
    }
    self->received = true;
  =}

  reaction(shutdown) {=
    if (!self->received) {
      fprintf(stderr, "ERROR: Destination %d received no input!\n", self->bank_index);
      exit(1);
    }
    printf("Success.\n");
  =}
}

main reactor {
  a = new Source()
  b = new[3] Destination()
  a.out -> b.in
}
