/**
 * Basic benchmark from the Savina benchmark suite that is intended to measure message-passing
 * overhead. This is based on https://www.scala-lang.org/old/node/54 See
 * https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Ping introduces a microstep delay using a logical action to break the causality loop.
 *
 * To get a sense, some (informal) results for 1,000,000 ping-pongs on my Mac:
 *
 * - Unthreaded: 97 msec
 * - Threaded: 265 msec
 *
 * There is no parallelism in this application, so it does not benefit from being being threaded,
 * just some additional overhead.
 *
 * These measurements are total execution time, including startup and shutdown. These are about an
 * order of magnitude faster than anything reported in the paper.
 *
 * @author Edward A. Lee
 */
target C {
  fast: true
}

reactor Ping(count: int = 10) {
  input receive: int
  output send: int
  state pingsLeft: int = count
  logical action serve

  reaction(startup, serve) -> send {= lf_set(send, self->pingsLeft--); =}

  reaction(receive) -> serve {=
    if (self->pingsLeft > 0) {
      lf_schedule(serve, 0);
    } else {
      lf_request_stop();
    }
  =}
}

reactor Pong(expected: int = 10) {
  input receive: int
  output send: int
  state count: int = 0

  reaction(receive) -> send {=
    self->count++;
    lf_set(send, receive->value);
  =}

  reaction(shutdown) {=
    if (self->count != self->expected) {
      fprintf(stderr, "ERROR: Pong expected to receive %d inputs, but it received %d.\n",
        self->expected, self->count
      );
      exit(1);
    }
    printf("Success.\n");
  =}
}

main reactor PingPong {
  ping = new Ping()
  pong = new Pong()
  ping.send -> pong.receive
  pong.send -> ping.receive
}
