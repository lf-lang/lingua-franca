// Source allocates an array dynamically and then sends it to two reactors, each of which want to
// modify it. NOTE: Ideally, only one copy would be made, but this requires modifying the precedence
// graph between reactions.
target C {
  files: ["include/hello.h"]
}

import Source from "StructScale.lf"

preamble {=
  #include "hello.h"
=}

reactor Check(expected: int = 42) {
  input in: hello_t*
  state invoked: bool = false

  reaction(in) {=
    printf("Received: name = %s, value = %d\n", in->value->name, in->value->value);
    if (in->value->value != self->expected) {
      printf("ERROR: Expected value to be %d.\n", self->expected);
      exit(1);
    }
    self->invoked = true;
  =}

  reaction(shutdown) {=
    if (self->invoked == false) {
      fprintf(stderr, "ERROR: No data received.\n");
      exit(2);
    }
  =}
}

reactor Print(scale: int = 2) {
  // Mutable keyword indicates that this reactor wants a writable copy of the input.
  mutable input in: hello_t*

  output out: hello_t*

  reaction(in) -> out {=
    in->value->value *= self->scale;
    printf("Print received name = %s, value = %d\n", in->value->name, in->value->value);
    lf_set_token(out, in->token);
  =}
}

main reactor StructParallel {
  s = new Source()
  c1 = new Print()
  c2 = new Print(scale=3)
  p1 = new Check(expected=84)
  p2 = new Check(expected=126)
  s.out -> c1.in
  s.out -> c2.in
  c1.out -> p1.in
  c2.out -> p2.in
}
