// Source produces a dynamically allocated array, which it passes to Scale. Scale requests a
// writable copy, which, instead of copying, it just gets ownership of the original array. It
// modifies it and passes it to Print. It gets freed after Print is done with it.
target C {
  timeout: 3 sec,
  fast: true
}

import Print, Source from "ArrayPrint.lf"

reactor Scale(scale: int = 2) {
  mutable input in: int[]
  output out: int[]

  reaction(in) -> out {=
    for(int i = 0; i < in->length; i++) {
      in->value[i] *= self->scale;
    }
    lf_set_token(out, in->token);
  =}
}

main reactor ArrayScale {
  s = new Source()
  c = new Scale()
  p = new Print(scale=2)
  s.out -> c.in
  c.out -> p.in
}
