/**
 * A test for the timeout functionality in Lingua Franca.
 *
 * @author Soroush Bateni
 */
target C {
  timeout: 11 msec
}

import Sender from "lib/LoopedActionSender.lf"

reactor Consumer {
  input in: int
  state success: bool = false

  reaction(in) {=
    tag_t current_tag = lf_tag();
    if (lf_tag_compare(current_tag,
             (tag_t) { .time = MSEC(11) + lf_time_start(), .microstep = 0}) > 0) {
      fprintf(stderr,"ERROR: Tag (%lld, %d) received. Failed to enforce timeout.\n",
              current_tag.time, current_tag.microstep);
      exit(1);
    } else if (lf_tag_compare(current_tag,
             (tag_t) { .time = MSEC(11) + lf_time_start(), .microstep = 0}) == 0) {
      self->success = true; // Successfully invoked the reaction at (timeout, 0)
    }
  =}

  reaction(shutdown) {=
    tag_t current_tag = lf_tag();
    printf("Shutdown invoked at tag (%lld, %u).\n", current_tag.time - lf_time_start(), current_tag.microstep);
    if (lf_tag_compare(current_tag,
      (tag_t) { .time = MSEC(11) + lf_time_start(), .microstep = 0}) == 0 &&
      self->success == true) {
      printf("SUCCESS: successfully enforced timeout.\n");
    } else {
      fprintf(stderr,"ERROR: Shutdown invoked at tag (%llu, %d). Failed to enforce timeout.\n",
              current_tag.time, current_tag.microstep);
      exit(1);
    }
  =}
}

main reactor Timeout {
  consumer = new Consumer()
  producer = new Sender(break_interval = 1 msec)

  producer.out -> consumer.in
}
