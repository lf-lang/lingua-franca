/**
 * Test a particularly simple form of a distributed deterministic system where a federation that
 * receives timestamped messages has only those messages as triggers. Therefore, no additional
 * coordination of the advancement of time (HLA or Ptides) is needed.
 * @author Edward A. Lee
 */
target C

preamble {=
  #include <string.h>
=}

reactor Source {
  output out: string

  reaction(startup) -> out {=
    lf_print("Sending 'Hello World!' message from source federate.");
    lf_set(out, "Hello World!");
    lf_request_stop();
  =}
}

reactor Destination {
  input in: string
  state received: bool = false

  reaction(startup) {= lf_print("Destination started."); =}

  reaction(in) {=
    lf_print("At logical time %lld, destination received: %s", lf_time_logical_elapsed(), in->value);
    if (strcmp(in->value, "Hello World!") != 0) {
      fprintf(stderr, "ERROR: Expected to receive 'Hello World!'\n");
      exit(1);
    }
    self->received = true;
  =}

  reaction(shutdown) {=
    lf_print("Shutdown invoked.");
    if (!self->received) {
      lf_print_error_and_exit("Destination did not receive the message.");
    }
  =}
}

federated reactor HelloDistributed at localhost {
  s = new Source()       // Reactor s is in federate Source
  d = new Destination()  // Reactor d is in federate Destination
  s.out -> d.in          // This version preserves the timestamp.

  reaction(startup) {= lf_print("Printing something in top-level federated reactor."); =}
}
