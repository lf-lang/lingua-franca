/**
 * This is a test for send_timed_message, which is an internal API.
 *
 * This test sends a second message at time 5 msec that has the same intended tag as a message that
 * it had previously sent at time 0 msec. This results in a warning, but the message microstep is
 * incremented and correctly received one microstep later.
 *
 * @author Soroush Bateni
 */
target C {
  timeout: 1 sec,
  build-type: RelWithDebInfo  // Release with debug info
}

preamble {=
  #ifdef __cplusplus
  extern "C" {
  #endif
  #include "federate.h"
  #ifdef __cplusplus
  }
  #endif
=}

reactor Sender {
  output out: int
  timer t(0, 1 msec)

  reaction(t) -> out {=
    int payload = 1;
    if (lf_time_logical_elapsed() == 0LL) {
      send_timed_message(self->base.environment, MSEC(10), MSG_TYPE_TAGGED_MESSAGE, 0, 1, "federate 1", sizeof(int),
                (unsigned char*)&payload);
    } else if (lf_time_logical_elapsed() == MSEC(5)) {
      payload = 2;
      send_timed_message(self->base.environment, MSEC(5), MSG_TYPE_TAGGED_MESSAGE, 0, 1, "federate 1", sizeof(int),
                (unsigned char*)&payload);
    }
  =}
}

reactor Receiver {
  input in: int
  state success: int = 0

  reaction(in) {=
    tag_t current_tag = lf_tag();
    if (current_tag.time == (lf_time_start() + MSEC(10))) {
      if (current_tag.microstep == 0 && in->value == 1) {
        self->success++;
      } else if (current_tag.microstep == 1 && in->value == 2) {
        self->success++;
      }
    }
    printf("Received %d at tag (%lld, %u).\n",
         in->value,
         lf_time_logical_elapsed(),
         lf_tag().microstep);
  =}

  reaction(shutdown) {=
    if (self->success != 2) {
      fprintf(stderr, "ERROR: Failed to receive messages.\n");
      exit(1);
    }
    printf("SUCCESS.\n");
  =}
}

federated reactor DistributedNetworkOrder {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in
}
