/**
 * Test a sender-receiver network system that relies on microsteps being taken into account. This
 * version has a physical action in the sender, which can introduce variable delay. It runs until
 * the receiver has received the required number of messages.
 *
 * @author Soroush Bateni
 * @author Edward A. Lee
 */
target C {
  tracing: true,
  logging: DEBUG,
  coordination: decentralized
}

// Can't import these because of issue #2149, which is that the timeout is inherited.
// import Sender, Receiver from "DistributedLoopedPhysicalAction.lf"
reactor Sender(take_a_break_after: int = 10, break_interval: time = 550 msec) {
  output out: int
  physical action act
  state sent_messages: int = 0

  reaction(startup, act) -> act, out {=
    // Send a message on out
    lf_set(out, self->sent_messages);
    self->sent_messages++;
    if (self->sent_messages < self->take_a_break_after) {
      lf_schedule(act, 0);
    } else {
      // Take a break
      self->sent_messages = 0;
      lf_schedule(act, self->break_interval);
    }
  =}
}

reactor Receiver(take_a_break_after: int = 10, break_interval: time = 550 msec) {
  input in: int
  state received_messages: int = 0
  state total_received_messages: int = 0
  state breaks: int = 0
  timer t(0, 10 msec)  // This will impact the performance

  // but forces the logical time to advance Comment this line for a more sensible log output.
  reaction(in) {=
    tag_t current_tag = lf_tag();
    lf_print("At tag " PRINTF_TAG " received %d.",
         current_tag.time - lf_time_start(),
         current_tag.microstep,
         in->value);
    self->total_received_messages++;
    if (in->value != self->received_messages++) {
      lf_print_error_and_exit("Expected %d.", self->received_messages - 1);
    }

    if (self->received_messages == self->take_a_break_after) {
      // Sender is taking a break;
      self->breaks++;
      self->received_messages = 0;
    }
  =}

  reaction(t) {=
    // Do nothing
  =}

  reaction(shutdown) {=
    if (self->breaks < 2 ||
      (self->total_received_messages < ((SEC(1)/self->break_interval)+1) * self->take_a_break_after)
    ) {
      lf_print_error_and_exit("Test failed. Breaks: %d, Messages: %d.", self->breaks, self->total_received_messages);
    }
    lf_print("SUCCESS: Successfully received all messages from the sender.");
  =}
}

reactor Receiver2 extends Receiver {
  reaction(in) {=
    if (self->total_received_messages >= ((SEC(1)/self->break_interval)+1) * self->take_a_break_after) {
      lf_request_stop();
    }
  =}
}

federated reactor {
  sender = new Sender()
  receiver = new Receiver2()

  sender.out -> receiver.in
}
