/**
 * This tests that the precedence order of reaction invocation is kept when a feedback loop is
 * present in decentralized coordination. The Looper reactors have the default zero STP offset, so
 * they can advance their time to the timer time immediately. Their second reaction, however, has
 * larger STAA offset (100 ms), so they stall to wait for input. The test ensures that their third
 * reaction is not invoked before the second.
 *
 * To tolerate timing variability (particularly in the CI tests), if the third reaction is invoked
 * at a tag without the second reaction having been invoked, then it checks that the lag is at least
 * 100 ms. This means that the input was late by at least 100 ms and was therefore assumed to be
 * absent, as is normal for decentralized coordination. If the input later arrives, then there will
 * be an STP violation, which will result in printing a warning, but not in a test failure.
 *
 * This test is designed to not be flaky. The timing properties are set so that warnings are printed
 * if the execution timing is wildly off, specifically if communication between federates takes more
 * than 100 ms. But the test will not fail in these cases.
 *
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
  coordination: decentralized,
  timeout: 4900 msec
}

reactor Looper(incr: int = 1, delay: time = 0 msec, stp: time = 0) {
  input in: int
  output out: int
  state count: int = 0
  state received_count: int = 0
  timer t(0, 1 sec)

  reaction(t) -> out {=
    lf_set(out, self->count);
    self->count += self->incr;
  =}

  reaction(in) {=
    instant_t time_lag = lf_time_physical() - lf_time_logical();
    char time_buffer[LF_TIME_BUFFER_LENGTH];
    lf_readable_time(time_buffer, time_lag);
    lf_print("Received %d. Logical time is behind physical time by %s.", in->value, time_buffer);
    self->received_count = self->count;
  =} STP(stp) {=
    instant_t time_lag = lf_time_physical() - lf_time_logical();
    char time_buffer[LF_TIME_BUFFER_LENGTH];
    lf_readable_time(time_buffer, time_lag);
    lf_print_warning("STP offset was violated. Received %d. Logical time is behind physical time by %s.",
        in->value, time_buffer
    );
  =} deadline(100 msec) {=
    instant_t time_lag = lf_time_physical() - lf_time_logical();
    char time_buffer[LF_TIME_BUFFER_LENGTH];
    lf_readable_time(time_buffer, time_lag);
    lf_print_warning("Deadline miss. Received %d. Logical time is behind physical time by %s.",
        in->value, time_buffer
    );
    self->received_count = self->count;
  =}

  reaction(t) {=
    if (self->received_count != self->count) {
      interval_t lag = lf_time_physical() - lf_time_logical();
      if (lag < self->stp) {
        lf_print_error_and_exit("reaction(t) was invoked before reaction(in). Precedence order was not kept.");
      } else {
        lf_print_warning("Assumed input was absent because STAA expired.");
      }
    }
  =}

  reaction(shutdown) {=
    lf_print("******* Shutdown invoked.");
    if (self->count != 5 * self->incr) {
      lf_print_error_and_exit("Failed to receive all five expected inputs.");
    }
  =}
}

federated reactor(delay: time = 0) {
  left = new Looper(stp = 50 msec)
  right = new Looper(incr=-1, stp = 50 msec)
  left.out -> right.in
  right.out -> left.in
}
