/**
 * This test has two coupled cycles. In this variant, one is a zero-delay cycle (ZDC) and the other
 * is not, having a microstep delay. In this variant, the microstep delay is on a connection
 * entering the ZDC.
 */
target C {
  timeout: 1 sec
}

reactor PhysicalPlant {
  input control: double
  output sensor: double
  timer t(0, 100 ms)
  state last_sensor_time: time = 0
  state previous_sensor_time: time = 0
  state count: int = 0

  reaction(t) -> sensor {=
    lf_set(sensor, 42);
    self->previous_sensor_time = self->last_sensor_time;
    self->last_sensor_time = lf_time_physical();
  =}

  reaction(control) {=
    self->count++;
    lf_print("Control input: %f", control->value);
    instant_t control_time = lf_time_physical();
    lf_print("Latency: " PRINTF_TIME ".", control_time - self->previous_sensor_time);
    lf_print("Logical time: " PRINTF_TIME ".", lf_time_logical_elapsed());
  =}

  reaction(shutdown) {=
    if (self->count != 10) {
      lf_print_error_and_exit("Received only %d inputs.", self->count);
    }
  =}
}

reactor Controller {
  input sensor: double
  output control: double

  state latest_control: double = 0.0
  state first: bool = true

  output request_for_planning: double
  input planning: double

  reaction(planning) {=
    self->latest_control = planning->value;
    tag_t now = lf_tag();
    lf_print("Controller received planning value %f at tag " PRINTF_TAG,
        self->latest_control, now.time - lf_time_start(), now.microstep
    );
  =}

  reaction(sensor) -> control, request_for_planning {=
    if (!self->first) {
      lf_set(control, self->latest_control);
    }
    self->first = false;
    lf_set(request_for_planning, sensor->value);
  =}
}

reactor Planner {
  input request: double
  output response: double

  reaction(request) -> response {=
    lf_sleep(MSEC(10));
    lf_set(response, request->value);
  =}
}

federated reactor {
  p = new PhysicalPlant()
  c = new Controller()
  pl = new Planner()

  p.sensor -> c.sensor
  c.request_for_planning -> pl.request
  pl.response -> c.planning after 0
  c.control -> p.control
}
