/**
 * Test a sender-receiver network system that is similar to DistributedLoopedAction, but it uses a
 * physical action rather than a logical action. This also demonstrates the advance-message-interval
 * coordination option. This specifies the time period between Time Advance Notice (TAN) messages
 * sent to the RTI (a form of null message that must be sent because of the physical action). The
 * presence of this option also silences a warning about having a physical action that triggers an
 * output.
 *
 * @author Soroush Bateni
 */
target C {
  timeout: 1 sec,
  // Silences warning.
  coordination-options: {
    advance-message-interval: 10 msec
  }
}

reactor Sender(take_a_break_after: int = 10, break_interval: time = 550 msec) {
  output out: int
  physical action act
  state sent_messages: int = 0

  reaction(startup, act) -> act, out {=
    // Send a message on out
    lf_set(out, self->sent_messages);
    self->sent_messages++;
    if (self->sent_messages < self->take_a_break_after) {
      lf_schedule(act, 0);
    } else {
      // Take a break
      self->sent_messages = 0;
      lf_schedule(act, self->break_interval);
    }
  =}
}

reactor Receiver(take_a_break_after: int = 10, break_interval: time = 550 msec) {
  input in: int
  state received_messages: int = 0
  state total_received_messages: int = 0
  state breaks: int = 0
  timer t(0, 1 msec)  // This will impact the performance

  // but forces the logical time to advance Comment this line for a more sensible log output.
  reaction(in) {=
    tag_t current_tag = lf_tag();
    lf_print("At tag (%lld, %u) received %d.",
         current_tag.time - lf_time_start(),
         current_tag.microstep,
         in->value);
    self->total_received_messages++;
    if (in->value != self->received_messages++) {
      lf_print_error_and_exit("Expected %d.", self->received_messages - 1);
    }

    if (self->received_messages == self->take_a_break_after) {
      // Sender is taking a break;
      self->breaks++;
      self->received_messages = 0;
    }
  =}

  reaction(t) {=
    // Do nothing
  =}

  reaction(shutdown) {=
    if (self->breaks != 2 ||
      (self->total_received_messages != ((SEC(1)/self->break_interval)+1) * self->take_a_break_after)
    ) {
      lf_print_error_and_exit("Test failed. Breaks: %d, Messages: %d.", self->breaks, self->total_received_messages);
    }
    lf_print("SUCCESS: Successfully received all messages from the sender.");
  =}
}

federated reactor DistributedLoopedPhysicalAction {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in
}
