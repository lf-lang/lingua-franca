// Variant of DecentralizedP2PComm that has STP violations.
target C {
  timeout: 5 sec,
  tracing: true,
  clock-sync: off,  // logging: log,
  coordination: decentralized
}

reactor Platform(
    start: int = 0,
    expected_start: int = 0,
    stp_offset_param: time = 0,
    period: time = 100 ms) {
  input in: int
  output out: int
  timer t(period, period)
  state count: int = start
  state expected: int = expected_start

  reaction(t) -> out {=
    lf_set(out, self->count++);
  =}

  reaction(in) {=
    lf_print("Received %d on time, which should be unusual.", in->value);
    tag_t current_tag = lf_tag();
    lf_print("********* Lag is " PRINTF_TIME, current_tag.time - lf_time_physical());
    if (in->value != self->expected++) {
      lf_print_error_and_exit("Expected %d but got %d.",
        self->expected - 1,
        in->value
      );
    }
  =} STP(stp_offset_param) {=
    lf_print("Received %d late, as expected.", in->value);
    tag_t current_tag = lf_tag();
    lf_print("********* Lag is " PRINTF_TIME, current_tag.time - lf_time_physical());
    if (in->value != self->expected++) {
      lf_print_error_and_exit("Expected %d but got %d.",
        self->expected - 1,
        in->value
      );
    }
  =}

  reaction(shutdown) {=
    lf_print("Shutdown invoked.");
    if (self->expected == self->expected_start) {
      lf_print_error_and_exit("Did not receive anything.");
    }
  =}
}

// The STP offset here will force STP violations in a and b.
reactor Delay(STP_offset: time = 250 ms) {
  input in: int
  output out: int

  reaction(in) -> out {=
    lf_set(out, in->value);
  =} STP(0) {=
    // With the 250ms above, STP violations shouldn't occur, but they do
    // occur sometimes in CI.  Here, we can just have the behavior be the
    // same as when it does not occur.
    lf_set(out, in->value);
  =}
}

federated reactor {
  a = new Platform(stp_offset_param=0, period = 500 ms)
  d = new Delay()
  a.out -> d.in
  d.out -> a.in
}
