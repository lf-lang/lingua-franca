/**
 * Test a particularly simple form of a distributed deterministic system where a federation that
 * receives timestamped messages has only those messages as triggers. Therefore, no additional
 * coordination of the advancement of time (HLA or Ptides) is needed.
 * @author Edward A. Lee
 */
target C {
  timeout: 5 sec,
  coordination: decentralized
}

import Count from "../lib/Count.lf"

reactor Print {
  input in: int
  state c: int = 1

  reaction(in) {=
    interval_t elapsed_time = lf_time_logical_elapsed();
    printf("At tag (%lld, %u), received %d. "
         "The original intended tag of the message was (%lld, %u).\n",
        (long long int)elapsed_time,
        lf_tag().microstep,
        in->value,
        (long long int)(in->intended_tag.time - lf_time_start()),
        in->intended_tag.microstep);
    if (in->value != self->c) {
      printf("Expected to receive %d.\n", self->c);
      exit(1);
    }
    if (elapsed_time != MSEC(200) + SEC(1) * (self->c - 1)) {
      printf("Expected received time to be %lld.\n", MSEC(200) * self->c);
      exit(3);
    }
    self->c++;
  =}

  reaction(shutdown) {=
    if (self->c != 6) {
      fprintf(stderr, "Expected to receive 5 items.\n");
      exit(2);
    }
    printf("SUCCESS: Successfully received 5 items.\n");
  =}
}

federated reactor DistributedCountDecentralized {
  c = new Count()
  p = new Print()
  c.out -> p.in after 200 msec  // Indicating a 'logical' connection with a large enough delay.
}
