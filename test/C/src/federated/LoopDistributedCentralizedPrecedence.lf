/**
 * This tests that the precedence order of reaction invocation is kept when a feedback loop is
 * present in centralized coordination.
 *
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
  flags: "-Wall",
  coordination: centralized,
  coordination-options: {
    advance-message-interval: 100 msec
  },
  timeout: 5 sec
}

reactor Looper(incr: int = 1, delay: time = 0 msec) {
  input in: int
  output out: int
  state count: int = 0
  state received_count: int = 0
  timer t(0, 1 sec)

  reaction(t) -> out {=
    lf_set(out, self->count);
    self->count += self->incr;
  =}

  reaction(in) {=
    instant_t time_lag = lf_time_physical() - lf_time_logical();
    char time_buffer[28]; // 28 bytes is enough for the largest 64 bit number: 9,223,372,036,854,775,807
    lf_comma_separated_time(time_buffer, time_lag);
    lf_print("Received %d. Logical time is behind physical time by %s nsec.", in->value, time_buffer);
    self->received_count = self->count;
  =}

  reaction(t) {=
    if (self->received_count != self->count) {
      lf_print_error_and_exit("reaction(t) was invoked before reaction(in). Precedence order was not kept.");
    }
  =}

  reaction(shutdown) {=
    lf_print("******* Shutdown invoked.");
    if (self->count != 6 * self->incr) {
      lf_print_error_and_exit("Failed to receive all six expected inputs.");
    }
  =}
}

federated reactor(delay: time = 0) {
  left = new Looper()
  right = new Looper(incr=-1)
  left.out -> right.in
  right.out -> left.in
}
