target C {
  timeout: 10 s,
  tracing: true
}

reactor Ping {
  timer t(0, 1 s)
  input in: int
  output out: int
  state counter: int = 0
  state received: bool = false

  reaction(t) -> out {= lf_set(out, self->counter++); =}

  reaction(in) {=
    self->received = true;
    lf_print("Ping Received %d at %lld.", in->value, lf_time_logical_elapsed());
  =}

  reaction(shutdown) {=
    if(!self->received) {
        lf_print("Nothing received.");
        exit(1);
    }
  =}
}

reactor Pong {
  input in: int
  output out: int
  state received: bool = false

  reaction(in) -> out {=
    self->received = true;
    lf_print("Pong Received %d at %lld.", in-> value, lf_time_logical_elapsed());
    lf_set(out, in->value);
  =}

  reaction(shutdown) {=
    if(!self->received) {
        lf_print("Nothing received.");
        exit(1);
    }
  =}
}

federated reactor {
  ping = new Ping()
  @transient
  pong = new Pong()

  ping.out -> pong.in
  pong.out -> ping.in after 100 ms
}
