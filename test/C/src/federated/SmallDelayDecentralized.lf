target C {
  timeout: 1 sec,
  coordination: decentralized
}

preamble {=
  #include "platform.h"
=}

reactor Count {
  state count: int = 1
  output out: int
  logical action loop

  reaction(startup) -> loop {=
    lf_schedule(loop, 0);
  =}

  reaction(loop) -> out {=
    if (self->count < 6) {
      lf_sleep(MSEC(50));
      lf_set(out, self->count++);
      lf_schedule(loop, 0);
    }
  =}
}

reactor Print {
  input in: int
  state c: int = 1
  state checks: int = 0

  logical action loop

  reaction(startup) -> loop {=
    lf_schedule(loop, 0);
  =}

  reaction(in) {=
    interval_t elapsed_time = lf_time_logical_elapsed();
    lf_print("++++++++ At tag " PRINTF_TAG ", received %d", elapsed_time, lf_tag().microstep, in->value);
    if (in->value != self->c) {
      lf_print_error_and_exit("Expected to receive %d.", self->c);
    }
    self->c++;
  =} STP(1 sec) {=
    lf_print_warning("STP violation at tag " PRINTF_TAG
        ". This should not happen because the STP offset is large. Checking value anyway.",
        lf_tag().time - lf_time_start(), lf_tag().microstep);
    lf_print("-------- Received %d", in->value);
    if (in->value != self->c) {
      lf_print_error_and_exit("Expected to receive %d.", self->c);
    }
    self->c++;
  =}

  reaction(loop) -> loop {=
    lf_print("checking self->checks, which is now %d...", self->checks);
    if (self->checks++ <= 3) {
      lf_schedule(loop, 0);
    }
  =}
}

federated reactor {
  c = new Count()
  p = new Print()
  c.out -> p.in after 0
}
