/**
 * Test that a rapidly produced physical action in an upstream federate can be properly handled in a
 * long chain of federates.
 */
target C {
  timeout: 1 sec,
  coordination-options: {
    advance-message-interval: 500 usec
  }
}

import PassThrough from "../lib/PassThrough.lf"
import TestCount from "../lib/TestCount.lf"

preamble {=
  extern int _counter;
  void callback(void *a);
  void* take_time(void* a);
=}

reactor WithPhysicalAction {
  preamble {=
    int _counter = 1;
    void callback(void *a) {
      lf_schedule_int(a, 0, _counter++);
    }
    // Simulate time passing before a callback occurs.
    void* take_time(void* a) {
      while (_counter < 20) {
        instant_t sleep_time = USEC(50);
        lf_sleep(sleep_time);
        callback(a);
      }
      return NULL;
    }
  =}
  output out: int
  state thread_id: lf_thread_t = 0
  physical action act(0): int

  reaction(startup) -> act {=
    // start new thread, provide callback
    lf_thread_create(&self->thread_id, &take_time, act);
  =}

  reaction(act) -> out {= lf_set(out, act->value); =}
}

federated reactor {
  a = new WithPhysicalAction()
  test = new TestCount(num_inputs=19)

  passThroughs1 = new PassThrough()
  passThroughs2 = new PassThrough()
  passThroughs3 = new PassThrough()
  passThroughs4 = new PassThrough()
  passThroughs5 = new PassThrough()
  passThroughs6 = new PassThrough()
  passThroughs7 = new PassThrough()
  passThroughs8 = new PassThrough()
  passThroughs9 = new PassThrough()
  passThroughs10 = new PassThrough()

  a.out,
  passThroughs1.out,
  passThroughs2.out,
  passThroughs3.out,
  passThroughs4.out,
  passThroughs5.out,
  passThroughs6.out,
  passThroughs7.out,
  passThroughs8.out,
  passThroughs9.out,
  passThroughs10.out ->
    passThroughs1.in,
    passThroughs2.in,
    passThroughs3.in,
    passThroughs4.in,
    passThroughs5.in,
    passThroughs6.in,
    passThroughs7.in,
    passThroughs8.in,
    passThroughs9.in,
    passThroughs10.in,
    test.in
}
