/**
 * This tests a feedback loop with physical actions and
 * centralized coordination.
 * 
 * @author Edward A. Lee
 */
target C {
    flags: "-Wall",
    coordination: centralized,
    coordination-options: {advance-message-interval: 100 msec}, 
    threads: 2,
    timeout: 5 sec
}
preamble {=
    #include <unistd.h> // Defines sleep()
    bool stop = false;
    // Thread to trigger an action once every second.
    void* ping(void* actionref) {
        while(!stop) {
            info_print("Scheduling action.");
            schedule(actionref, 0);
            sleep(1);
        }
         return NULL;
    }
=}

reactor Looper(incr:int(1), delay:time(0 msec)) {
    input in:int;
    input in2:int;
    output out:int;
    output out2:int;
    physical action a(delay);
    state count:int(0);
    timer t(0, 1 sec);
    reaction(startup) -> a {=
        // Start the thread that listens for Enter or Return.
        lf_thread_t thread_id;
        info_print("Starting thread.");
        lf_thread_create(&thread_id, &ping, a);        
    =}
    reaction(a) -> out, out2 {=
        if (self->count%2 == 0) {
        	SET(out, self->count);
      	} else {
            SET(out2, self->count);
        }
        self->count += self->incr;
    =}
    reaction(in) {=
        info_print("Received %d at logical time (%lld, %d).",
            in->value,
            current_tag.time - start_time, current_tag.microstep
        );
    =}
    reaction(in2) {=
        info_print("Received %d on in2 at logical time (%lld, %d).",
            in2->value,
            current_tag.time - start_time, current_tag.microstep
        );
    =}
    reaction(t) {=
        info_print("Timer triggered at logical time (%lld, %d).",
            current_tag.time - start_time, current_tag.microstep
        );
    =}
    reaction(shutdown) {=
        info_print("******* Shutdown invoked.");
        // Stop the thread that is scheduling actions.
        stop = true;
        if (self->count != 5 * self->incr) {
            error_print_and_exit("Failed to receive all five expected inputs.");
        }
    =}
}
federated reactor (delay:time(0)) {
    left = new Looper();
    right = new Looper(incr = -1);
    left.out -> right.in;
    right.out -> left.in;
    right.out2 -> left.in2;
    left.out2 -> right.in2;
}