/**
 * Test the case for when two upstream federates send messages to a downstream federate on two
 * different ports. One message should carry a microstep delay relative to the other message.
 *
 * @author Soroush Bateni
 */
target C {
  timeout: 900 msec,
  logging: DEBUG,
  coordination: centralized
}

import Count from "../lib/Count.lf"

reactor CountMicrostep {
  state count: int = 1
  output out: int
  logical action act: int
  timer t(0, 1 sec)

  reaction(t) -> act {= lf_schedule_int(act, 0, self->count++); =}

  reaction(act) -> out {= lf_set(out, act->value); =}
}

reactor Print {
  input in: int
  input in2: int

  reaction(in, in2) {=
    interval_t elapsed_time = lf_time_logical_elapsed();
    lf_print("At tag (%lld, %u), received in = %d and in2 = %d.", elapsed_time, lf_tag().microstep, in->value, in2->value);
    if (in->is_present && in2->is_present) {
      lf_print_error_and_exit("ERROR: invalid logical simultaneity.");
    }
  =}

  reaction(shutdown) {= lf_print("SUCCESS: messages were at least one microstep apart."); =}
}

federated reactor DistributedDoublePort {
  c = new Count()
  cm = new CountMicrostep()
  p = new Print()
  c.out -> p.in  // Indicating a 'logical' connection.
  cm.out -> p.in2
}
