/**
 * This example demonstrates a very simple use of protocol buffers within a reactor. It encodes and
 * decodes a very simple protocol buffer definition in Person.proto. This reactor is heavily based
 * on the examples at https://github.com/protobuf-c/protobuf-c/wiki/Examples. This example just
 * packs and unpacks a message.
 *
 * To run this test, first install the protocol buffers compiler from
 * https://github.com/protocolbuffers/protobuf as well as the C plugin which comes from
 * https://github.com/protobuf-c/protobuf-c.
 *
 * (Building protobuf from source is slow, so avoid doing that if possible.)
 *
 * On Mac, you can install these dependencies via Homebrew:
 * $ brew install protobuf
 * $ brew install protobuf-c
 */
target C {
  protobufs: Person.proto
}

main reactor {
  reaction(startup) {=
    Person person = PERSON__INIT; // Macro to create the protocol buffer
    uint8_t* buffer;        // Buffer to store the serialized data
    unsigned len;         // Length of the packed message

    person.name = "Lingua Franca";
    person.id = 1;
    person.email = "eal@berkeley.edu";

    // Pack the message into buffer.
    person__init(&person);
    len = person__get_packed_size(&person);
    buffer = (uint8_t*)malloc(len);
    person__pack(&person, buffer);

    // Now unpack the message from buffer.
    Person *unpacked = person__unpack(NULL, len, buffer);

    // Extract and print the unpacked message.
    printf("Name: %s\n", unpacked->name);
    free(buffer);            // Free the allocated serialized buffer
  =}
}
