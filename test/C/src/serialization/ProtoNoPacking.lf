/**
 * This example creates a Protocol Buffer message and passes it to another reactor without packing
 * and unpacking. This demonstrates that local communication, within one shared-memory machine, need
 * not incur the overhead of packing and unpacking.
 *
 * To run this test, first install the protocol buffers compiler from
 * https://github.com/protocolbuffers/protobuf as well as the C plugin which comes from
 * https://github.com/protobuf-c/protobuf-c.
 *
 * (Building protobuf from source is slow, so avoid doing that if possible.)
 *
 * On Mac, you can install these dependencies via Homebrew:
 * $ brew install protobuf
 * $ brew install protobuf-c
 */
target C {
  protobufs: [Hello.proto]
}

reactor SourceProto {
  output out: Hello

  reaction(startup) -> out {=
    out->value.name = "Hello World";
    out->value.number = 42;
    lf_set_present(out);
  =}
}

reactor SinkProto {
  input in: Hello

  reaction(in) {=
    printf("Received: name=\"%s\", number=%d.\n", in->value.name, in->value.number);
  =}
}

main reactor ProtoNoPacking {
  s = new SourceProto()
  d = new SinkProto()
  s.out -> d.in
}
