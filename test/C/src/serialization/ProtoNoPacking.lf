/**
 * This example creates a Protocol Buffer message and passes it to another reactor without packing
 * and unpacking. This demonstrates that local communication, within one shared-memory machine, need
 * not incur the overhead of packing and unpacking.
 *
 * To run this example first install the protocol buffers compiler from
 * https://github.com/protocolbuffers/protobuf. It is also available from homebrew on a Mac via
 *
 * $ brew install protobuf
 *
 * Building protobuf from source is slow, so avoid doing that if possible. Next install the C plugin
 * for protocol buffers from
 *
 * https://github.com/protobuf-c/protobuf-c
 *
 * The code generator assumes that executables are installed within the PATH. On a Mac, this is
 * typically at /usr/local/bin.
 */
target C {
  protobufs: [ProtoHelloWorld.proto]
}

reactor SourceProto {
  output out: ProtoHelloWorld

  reaction(startup) -> out {=
    out->value.name = "Hello World";
    out->value.number = 42;
    SET_PRESENT(out);
  =}
}

reactor SinkProto {
  input in: ProtoHelloWorld

  reaction(in) {=
    printf("Received: name=\"%s\", number=%d.\n", in->value.name, in->value.number);
  =}
}

main reactor ProtoNoPacking {
  s = new SourceProto()
  d = new SinkProto()
  s.out -> d.in
}
