// This tests lf_set_destructor() This tests the use of the "polymorphic" delay
// reactor on a struct. It delays by a logical time any pointer datatype.
target C {
    files: ["include/array.h"]
}

preamble {=
    #include "array.h"
=}

reactor Source {
    output out: int_array_t*

    reaction(startup) -> out {=
        lf_print("%d", out->destructor);
        lf_set_destructor(out, int_array_destructor);
        int_array_t* array =  int_array_constructor(2);
        for (size_t i = 0; i < array->length; i++) {
            array->data[i] = i;
        }
        lf_set(out, array);
    =}
}

reactor Print(scale: int(1)) {  // The scale parameter is just for testing.
    input in: int_array_t*

    reaction(in) {=
        int count = 0;       // For testing.
        bool failed = false; // For testing.
        for (int i = 0; i < in->value->length; i++) {
            // For testing, check whether values match expectation.
            if (in->value->data[i] != self->scale * count) {
                failed = true;
            }
            count++;         // For testing.
        }
        if (failed) {
            printf("ERROR: Value received by Print does not match expectation!\n");
            exit(1);
        } else {
            printf("SUCCESS\n");
        }
    =}
}

main reactor {
    s = new Source()
    p = new Print()
    s.out -> p.in
}
