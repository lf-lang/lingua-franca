// This tests actions with immutable payloads that are neither malloc'd nor freed.
target C

preamble {=
  #ifdef __cplusplus
  extern "C" {
  #endif
  #include <string.h>
  #ifdef __cplusplus
  }
  #endif
=}

reactor DelayString2(delay: time = 100 msec) {
  input in: string
  output out: string
  logical action a: string

  reaction(a) -> out {= lf_set(out, a->value); =}

  reaction(in) -> a {=
    // The following copies the char*, not the string.
    lf_schedule_copy(a, self->delay, &(in->value), 1);
  =}
}

reactor Test {
  input in: string

  reaction(in) {=
    printf("Received: %s.\n", in->value);
    // Check the time of the input.
    interval_t elapsed = lf_time_logical_elapsed();
    printf("After %lld nsec of logical time.\n", elapsed);
    if (elapsed != 100000000LL) {
      printf("ERROR: Expected elapsed time to be 100000000. It was %lld.\n", elapsed);
      exit(1);
    }
    if (strcmp(in->value, "Hello") != 0) {
      printf("ERROR: Expected input value to be \"Hello\". It was \"%s\".\n", in->value);
      exit(2);
    }
  =}
}

main reactor {
  d = new DelayString2()
  t = new Test()
  d.out -> t.in

  reaction(startup) -> d.in {= lf_set(d.in, "Hello"); =}
}
