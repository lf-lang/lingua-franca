// Test delaying a struct pointer type.
target C {
  files: ["include/hello.h"]
}

preamble {=
  #include "hello.h"
  #include <stdio.h>
=}

reactor DelayPointer(delay: time = 100 msec) {
  input in: hello_t*
  output out: hello_t*
  logical action a: hello_t*

  reaction(a) -> out {=
    // Using lf_set_token delegates responsibility for
    // freeing the allocated memory downstream.
    lf_set_token(out, a->token);
  =}

  reaction(in) -> a {=
    // Schedule the actual token from the input rather than
    // a new token with a copy of the input value.
    lf_schedule_token(a, self->delay, in->token);
  =}
}

reactor Source {
  output out: hello_t*

  reaction(startup) -> out {=
    // Dynamically allocate an output struct.
    // Note that the default destructor and copy constructor are sufficient here.
    hello_t* hello = (hello_t*)malloc(sizeof(hello_t));

    // Populate the struct.
    hello->name = "Earth";
    hello->value = 42;

    // Set the output.
    lf_set(out, hello);
  =}
}

// expected parameter is for testing.
reactor Print(expected: int = 42) {
  input in: hello_t*
  state invoked: bool = false

  reaction(in) {=
    self->invoked = true;
    printf("Received: name = %s, value = %d\n", in->value->name, in->value->value);
    if (in->value->value != self->expected) {
      printf("ERROR: Expected value to be %d.\n", self->expected);
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if (self->invoked == false) {
      fprintf(stderr, "ERROR: No data received.\n");
      exit(2);
    }
  =}
}

main reactor DelayStruct {
  s = new Source()
  d = new DelayPointer()
  p = new Print()
  s.out -> d.in
  d.out -> p.in
}
