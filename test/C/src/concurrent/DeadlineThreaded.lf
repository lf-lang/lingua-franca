// This example illustrates local deadline handling. Even numbers are sent by the Source
// immediately, whereas odd numbers are sent after a big enough delay to violate the deadline.
target C {
  timeout: 6 sec
}

preamble {=
  #ifdef __cplusplus
  extern "C" {
  #endif
  #include "platform.h"
  #ifdef __cplusplus
  }
  #endif
=}

reactor Source(period: time = 3000 msec) {
  output y: int
  timer t(0, period)
  state count: int = 0

  reaction(t) -> y {=
    if (2 * (self->count / 2) != self->count) {
      // The count variable is odd.
      // Take time to cause a deadline violation.
      lf_sleep(MSEC(1100));
    }
    printf("Source sends: %d.\n", self->count);
    lf_set(y, self->count);
    (self->count)++;
  =}
}

reactor Destination(timeout: time = 1 sec) {
  input x: int
  state count: int = 0

  reaction(x) {=
    printf("Destination receives: %d\n", x->value);
    if (2 * (self->count / 2) != self->count) {
      // The count variable is odd, so the deadline should have been violated.
      printf("ERROR: Failed to detect deadline.\n");
      exit(1);
    }
    (self->count)++;
  =} deadline(timeout) {=
    printf("Destination deadline handler receives: %d\n", x->value);
    if (2 * (self->count / 2) == self->count) {
      // The count variable is even, so the deadline should not have been violated.
      printf("ERROR: Unexpected deadline violation.\n");
      exit(2);
    }
    (self->count)++;
  =}
}

main reactor {
  s = new Source()
  d = new Destination(timeout = 1 s)
  s.y -> d.x
}
