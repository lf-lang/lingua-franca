/**
 * Test for lf_request_stop() at tag (0,0). This version uses the threaded runtime.
 *
 * @author Soroush Bateni
 */
target C

reactor Sender {
  output out: int
  state reaction_invoked_correctly: bool = false
  timer t(0, 1 usec)
  logical action act

  reaction(t) -> out, act {=
    printf("Sending 42 at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
    lf_set(out, 42);
    lf_schedule(act, 0);
    tag_t zero = (tag_t) { .time = lf_time_start(), .microstep = 0u };
    tag_t one = (tag_t) { .time = lf_time_start(), .microstep = 1u };
    if (lf_tag_compare(lf_tag(), zero) == 0) {
      // Request stop at (0,0)
      printf("Requesting stop at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      lf_request_stop();
    } else if (lf_tag_compare(lf_tag(), one) > 0) {
      fprintf(stderr, "ERROR: Reaction called after shutdown at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      exit(1);
    }
  =}

  reaction(act) {=
    // Reaction should be invoked at (0,1)
    tag_t one = (tag_t) { .time = lf_time_start(), .microstep = 1u };
    if (lf_tag_compare(lf_tag(), one) == 0) {
      self->reaction_invoked_correctly = true;
    }
  =}

  reaction(shutdown) {=
    if (lf_time_logical_elapsed() != USEC(0) ||
      lf_tag().microstep != 1) {
      fprintf(stderr, "ERROR: Sender failed to stop the program in time. "
          "Stopping at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      exit(1);
    } else if (self->reaction_invoked_correctly == false) {
      fprintf(stderr, "ERROR: Sender reaction(act) was not invoked. "
          "Stopping at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      exit(1);
    }
    printf("SUCCESS: Successfully stopped the program at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
  =}
}

reactor Receiver {
  input in: int

  reaction(in) {=
    printf("Received %d at (%lld, %u).\n",
           in->value,
           lf_time_logical_elapsed(),
           lf_tag().microstep);
    tag_t zero = (tag_t) { .time = lf_time_start(), .microstep = 0u };
    if (lf_tag_compare(lf_tag(), zero) == 0) {
      // Request stop at (0,0)
      printf("Requesting stop at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      lf_request_stop();
    }
  =}

  reaction(shutdown) {=
    // Shutdown events must occur at (0, 1) on the
    // receiver.
    if (lf_time_logical_elapsed() != USEC(0) ||
      lf_tag().microstep != 1) {
      fprintf(stderr, "ERROR: Receiver failed to stop the program in time. "
          "Stopping at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
      exit(1);
    }
    printf("SUCCESS: Successfully stopped the program at (%lld, %u).\n",
           lf_time_logical_elapsed(),
           lf_tag().microstep);
  =}
}

main reactor StopZeroThreaded {
  sender = new[4] Sender()
  receiver = new[4] Receiver()

  sender.out -> receiver.in
}
