/**
 * Test asynchronous callbacks that trigger a physical action. This test case assumes that target is
 * multithreaded. This test will not work with the unthreaded C target because that target does not
 * implement any mutex protecting the event queue.
 *
 * Note: This test uses the LF platform support to enable it to run on multiple platforms.
 */
target C {
  tracing: true,
  timeout: 2 sec,
  keepalive: true
}

preamble {=
  #ifdef __cplusplus
  extern "C" {
  #endif
  #include "platform.h"
  #ifdef __cplusplus
  }
  #endif
=}

main reactor AsyncCallback {
  preamble {=
    void callback(void* a) {
      // Schedule twice. If the action is not physical, these should
      // get consolidated into a single action triggering. If it is,
      // then they cause two separate triggerings with close but not
      // equal time stamps. The minimum time between these is determined
      // by the argument in the physical action definition.
      lf_schedule(a, 0LL);
      lf_schedule(a, 0LL);
    }
    // Simulate time passing before a callback occurs.
    void* take_time(void* a) {
      instant_t sleep_time = 100000000;
      lf_sleep(sleep_time);
      callback(a);
      return NULL;
    }
    lf_thread_t threadId;
  =}
  timer t(0, 200 msec)
  state thread_id: lf_thread_t = 0
  state expected_time: time = 100 msec
  state toggle: bool = false

  physical action a(100 msec): int
  state i: int = 0

  reaction(t) -> a {=
    // start new thread, provide callback
    lf_thread_create(&self->thread_id, &take_time, a);
  =}

  reaction(a) {=
    instant_t elapsed_time = lf_time_logical_elapsed();
    printf("Asynchronous callback %d: Assigned logical time greater than start time by %lld nsec.\n",
         self->i++, elapsed_time);
    if (elapsed_time <= self->expected_time) {
      printf("ERROR: Expected logical time to be larger than %lld.\n", self->expected_time);
      exit(1);
    }
    if (self->toggle) {
      self->toggle = false;
      self->expected_time += 200000000LL;
    } else {
      self->toggle = true;
    }
  =}
}
