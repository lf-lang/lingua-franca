/**
 * Events are scheduled with increasing additional delays of 0, 100, 300, 600 msec on a logical
 * action with a minimum delay of 100 msec. The use of the logical action ensures the elapsed time
 * jumps exactly from 0 to 100, 300, 600, and 1000 msec.
 */
target C {
  timeout: 1 sec,
  fast: true
}

main reactor SlowingClock {
  logical action a(100 msec)
  state interval: time = 100 msec
  state expected_time: time = 100 msec

  reaction(startup) -> a {= lf_schedule(a, 0); =}

  reaction(a) -> a {=
    instant_t elapsed_logical_time = lf_time_logical_elapsed();
    printf("Logical time since start: \%lld nsec.\n",
      elapsed_logical_time
    );
    if (elapsed_logical_time != self->expected_time) {
      printf("ERROR: Expected time to be: \%lld nsec.\n",
        self->expected_time
      );
      exit(1);
    }
    lf_schedule(a, self->interval);
    self->expected_time += MSEC(100) + self->interval;
    self->interval += MSEC(100);
  =}

  reaction(shutdown) {=
    if (self->expected_time != MSEC(1500)) {
      printf("ERROR: Expected the next expected time to be: 1500000000 nsec.\n");
      printf("It was: \%lld nsec.\n", self->expected_time);
      exit(2);
    } else {
      printf("Test passes.\n");
    }
  =}
}
