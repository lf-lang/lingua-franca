// This illustrates a very strange bug that showed up and has now been fixed. This test ensures it
// does not reappear. At logical time zero, the two Print reactors used to be fired twice each at
// the same logical time. They should only be fired once. This behavior was oddly eliminated by
// either of the following actions, neither of which should affect this behavior:
// * Removing the startup reaction in Print.
// * Sending only position, not velocity from Ball.
target C {
  timeout: 5 sec,
  fast: true
}

reactor Ball {
  output position: int
  output velocity: int
  state p: int = 200
  timer trigger(0, 1 sec)

  reaction(trigger) -> position, velocity {=
    lf_set(position, self->p);
    lf_set(velocity, -1);
    self->p -= 1;
  =}
}

reactor Print {
  input velocity: int
  input position: int
  state previous: int = -1

  reaction(startup) {=
    printf("####### Print startup\n");
  =}

  reaction(position, velocity) {=
    if (position->is_present) {
      printf("Position: %d.\n", position->value);
    }
    if (position->value == self->previous) {
      printf("ERROR: Multiple firings at the same logical time!\n");
      exit(1);
    }
  =}
}

main reactor DoubleInvocation {
  b1 = new Ball()
  p = new Print()
  plot = new Print()
  b1.position -> p.position
  b1.velocity -> p.velocity
  b1.position -> plot.position
  b1.velocity -> plot.velocity
}
