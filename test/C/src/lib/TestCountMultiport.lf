/**
 * Test that a counting sequence of inputs starts with the specified start parameter value,
 * increments by the specified stride, and receives the specified number of inputs. This version has
 * a multiport input, and each input is expected to be present and incremented over the previous
 * input.
 *
 * @param start The starting value for the expected inputs. Default is 1.
 * @param stride The increment for the inputs. Default is 1.
 * @param num_inputs The number of inputs expected on each channel. Default is 1.
 */
target C

reactor TestCountMultiport(start: int = 1, stride: int = 1, num_inputs: int = 1, width: int = 2) {
  state count: int = start
  state inputs_received: int = 0
  input[width] in: int

  reaction(in) {=
    for (int i = 0; i < in_width; i++) {
      if (!in[i]->is_present) {
        lf_print_error_and_exit("No input on channel %d.", i);
      }
      lf_print("Received %d on channel %d.", in[i]->value, i);
      if (in[i]->value != self->count) {
        lf_print_error_and_exit("Expected %d.", self->count);
      }
      self->count += self->stride;
    }
    self->inputs_received++;
  =}

  reaction(shutdown) {=
    lf_print("Shutdown invoked.");
    if (self->inputs_received != self->num_inputs) {
      lf_print_error_and_exit("Expected to receive %d inputs, but only got %d.",
        self->num_inputs,
        self->inputs_received
      );
    }
  =}
}
