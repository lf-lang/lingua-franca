// This tests actions with payloads by delaying an input by a fixed amount.
target C

reactor Delay(delay: time = 100 msec) {
  input in: int
  output out: int
  logical action a: int

  reaction(a) -> out {= if (a->has_value && a->is_present) lf_set(out, a->value); =}

  reaction(in) -> a {=
    // Use specialized form of schedule for integer payloads.
    lf_schedule_int(a, self->delay, in->value);
  =}
}

reactor Test {
  input in: int
  state start_time: time = 0
  state received_value: bool = false

  reaction(startup) {=
    // Record the logical time at the start.
    self->start_time = lf_time_logical();
  =}

  reaction(in) {=
    printf("Received: %d.\n", in->value);
    self->received_value = true;
    // Check the time of the input.
    instant_t current_time = lf_time_logical();
    interval_t elapsed = current_time - self->start_time;
    printf("After %lld nsec of logical time.\n", elapsed);
    if (elapsed != 100000000LL) {
      printf("ERROR: Expected elapsed time to be 100000000. It was %lld.\n", elapsed);
      exit(1);
    }
    if (in->value != 42) {
      printf("ERROR: Expected input value to be 42. It was %d.\n", in->value);
      exit(2);
    }
  =}

  reaction(shutdown) {=
    printf("Checking that communication occurred.\n");
    if (!self->received_value) {
      printf("ERROR: No communication occurred!\n");
      exit(3);
    }
  =}
}

main reactor DelayInt {
  d = new Delay()
  t = new Test()
  d.out -> t.in

  reaction(startup) -> d.in {= lf_set(d.in, 42); =}
}
