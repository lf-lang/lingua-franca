/**
 * Modal Reactor Test. Tests after delays, its suspension during mode inactivity and continuation
 * with history transitions.
 */
target C {
  fast: false,
  timeout: 4 sec
}

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
  input next: bool

  output mode_switch: int
  output produced1: int
  output consumed1: int
  output produced2: int
  output consumed2: int

  initial mode One {
    producer1 = new Producer(mode_id=1)
    consumer1 = new Consumer(mode_id=1)
    producer1.product -> produced1
    producer1.product -> consumer1.product after 500 msec
    consumer1.report -> consumed1
    reaction(next) -> reset(Two), mode_switch {=
      printf("Transitioning to mode Two (reset)\n");
      lf_set(mode_switch, 1);
      lf_set_mode(Two);
    =}
  }

  mode Two {
    producer2 = new Producer(mode_id=2)
    consumer2 = new Consumer(mode_id=2)
    producer2.product -> produced2
    producer2.product -> consumer2.product after 500 msec
    consumer2.report -> consumed2
    reaction(next) -> history(One), mode_switch {=
      printf("Transitioning to mode One (continue)\n");
      lf_set(mode_switch, 1);
      lf_set_mode(One);
    =}
  }
}

reactor Producer(mode_id: int = 0) {
  output product: int

  timer t(0, 750 msec)

  reaction(t) -> product {=
    printf("Produced in %d\n", self->mode_id);
    lf_set(product, 1);
  =}
}

reactor Consumer(mode_id: int = 0) {
  input product: int
  output report: int

  reaction(product) -> report {=
    printf("Consumed in %d\n", self->mode_id);
    lf_set(report, 1);
  =}
}

main reactor {
  timer stepper(1 sec, 1 sec)

  modal = new Modal()
  test = new TraceTesting(events_size = 5, trace_size = 165, trace = {  // keep-format
    0,0,0,1,1,0,0,0,0,0,0,
    500000000,0,0,0,1,1,1,0,0,0,0,
    250000000,0,0,1,1,0,1,0,0,0,0,
    250000000,1,1,0,1,0,1,0,0,0,0,
    0,0,1,0,1,0,1,1,1,0,0,
    500000000,0,1,0,1,0,1,0,1,1,1,
    250000000,0,1,0,1,0,1,1,1,0,1,
    250000000,1,1,0,1,0,1,0,1,0,1,
    250000000,0,1,0,1,1,1,0,1,0,1,
    250000000,0,1,1,1,0,1,0,1,0,1,
    500000000,1,1,0,1,1,1,0,1,0,1,
    0,0,1,0,1,0,1,1,1,0,1,
    500000000,0,1,0,1,0,1,0,1,1,1,
    250000000,0,1,0,1,0,1,1,1,0,1,
    250000000,1,1,0,1,0,1,0,1,0,1
  }, training = false)

  modal.mode_switch, modal.produced1, modal.consumed1, modal.produced2, modal.consumed2
    -> test.events

  reaction(stepper) -> modal.next {= lf_set(modal.next, true); =}  // Trigger mode change
}
