/** Modal Reactor Test. Checks disabling of reactions indirectly nested in an inactive mode */
target C {
  fast: false,
  timeout: 2 sec
}

reactor CounterCycle {
  input next: bool

  output count: int
  output only_in_two: bool
  output never: int

  initial mode One {
    reaction(next) -> count, reset(Two) {=
      lf_set(count, 1);
      lf_set_mode(Two);
    =}
  }

  mode Two {
    fwd = new Forward()
    next -> fwd.in
    fwd.out -> only_in_two
    reaction(next) -> count, reset(One) {=
      lf_set(count, 2);
      lf_set_mode(One);
    =}
  }

  mode Three {
    reaction(next) -> never {= lf_set(never, true); =}
  }
}

reactor Forward {
  input in: bool
  output out: bool

  reaction(in) -> out {= lf_set(out, in->value); =}
}

main reactor {
  timer stepper(0, 250 msec)
  counter = new CounterCycle()

  reaction(stepper) -> counter.next {= lf_set(counter.next, true); =}  // Trigger

  // Check
  reaction(stepper) counter.count, counter.only_in_two {=
    printf("%d\n", counter.count->value);

    if (!counter.count->is_present) {
      printf("ERROR: Missing mode change.\n");
      exit(1);
    } else if (counter.only_in_two->is_present && counter.count->value != 2) {
      printf("ERROR: Indirectly nested reaction was not properly deactivated.\n");
      exit(2);
    } else if (!counter.only_in_two->is_present && counter.count->value == 2) {
      printf("ERROR: Missing output from indirectly nested reaction.\n");
      exit(3);
    }
  =}

  reaction(counter.never) {=
    printf("ERROR: Detected output from unreachable mode.\n");
    exit(4);
  =}
}
