/** Modal Reactor Test. Test startup/shutdown reactions in modes. */
target C {
  fast: false,
  timeout: 3000 msec
}

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
  input next: bool

  output mode_switch: int
  output startup1: int
  output startup2: int
  output shutdown2: int
  output shutdown3: int
  output startup4: int
  output reset4: int
  output shutdown4: int
  output startup5: int
  output reset5: int
  output shutdown5: int

  initial mode One {
    reaction(startup) -> startup1 {=
      printf("Startup 1 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(startup1, 1);
    =}

    reaction(next) -> reset(Two), mode_switch {=
      printf("Transitioning to mode 1\n");
      lf_set(mode_switch, 2);
      lf_set_mode(Two);
    =}
  }

  mode Two {
    reaction(startup) -> startup2 {=
      printf("Startup 2 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(startup2, 1);
    =}

    reaction(next) -> reset(Three), mode_switch {=
      printf("Transitioning to mode 3\n");
      lf_set(mode_switch, 3);
      lf_set_mode(Three);
    =}

    reaction(shutdown) -> shutdown2 {=
      printf("Shutdown 2 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(shutdown2, 1);
    =}
  }

  mode Three {
    reaction(next) -> reset(Four), mode_switch {=
      printf("Transitioning to mode 4\n");
      lf_set(mode_switch, 4);
      lf_set_mode(Four);
    =}

    reaction(shutdown) -> shutdown3 {=
      printf("Shutdown 3 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(shutdown3, 1);
    =}
  }

  mode Four {
    reaction(startup) -> startup4 {=
      printf("Startup 4 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(startup4, 1);
    =}

    reaction(reset) -> reset4 {=
      printf("Reset 4 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(reset4, 1);
    =}

    reaction(next) -> reset(Four), mode_switch {=
      printf("Transitioning to mode 4\n");
      lf_set(mode_switch, 4);
      lf_set_mode(Four);
    =}

    reaction(shutdown) -> shutdown4 {=
      printf("Shutdown 4 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(shutdown4, 1);
    =}
  }

  // Unreachable!
  mode Five {
    reaction(startup) -> startup5 {=
      printf("Startup 5 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(startup5, 1);
    =}

    reaction(reset) -> reset5 {=
      printf("Reset 5 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(reset5, 1);
    =}

    reaction(shutdown) -> shutdown5 {=
      printf("Shutdown 5 at (%lld, %u).\n", lf_time_logical_elapsed(), lf_tag().microstep);
      lf_set(shutdown5, 1);
    =}
  }
}

main reactor {
  timer stepper(500 msec, 500 msec)

  modal = new Modal()
  test = new TraceTesting(events_size = 11, trace_size = 253, trace = {  // keep-format
    0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    500000000,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    500000000,1,3,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    500000000,1,4,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,4,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,
    500000000,1,4,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,
    0,0,4,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,
    500000000,1,4,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,
    0,0,4,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,
    500000000,1,4,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0
  }, training = false)

  modal.mode_switch,
  modal.startup1,
  modal.startup2,
  modal.shutdown2,
  modal.shutdown3,
  modal.startup4,
  modal.reset4,
  modal.shutdown4,
  modal.startup5,
  modal.reset5,
  modal.shutdown5 -> test.events

  reaction(stepper) -> modal.next {= lf_set(modal.next, true); =}  // Trigger mode change
}
