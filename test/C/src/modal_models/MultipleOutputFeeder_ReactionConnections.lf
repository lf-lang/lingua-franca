/**
 * Modal Reactor Test.
 *
 * Tests if a connection and a reaction in the same reactor can have the same destination if they
 * are located in separate modes.
 */
target C {
  fast: false,
  timeout: 2 sec
}

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
  input next: bool
  output count: int

  initial mode One {
    counter1 = new Counter(period = 250 msec)
    counter1.value -> count
    reaction(next) -> reset(Two) {= lf_set_mode(Two); =}
  }

  mode Two {
    counter2 = new Counter(period = 100 msec)
    reaction(counter2.value) -> count {= lf_set(count, counter2.value->value * 10); =}

    reaction(next) -> history(One) {= lf_set_mode(One); =}
  }
}

reactor Counter(period: time = 1 sec) {
  output value: int

  timer t(0, period)
  reset state curval: int = 0

  reaction(t) -> value {= lf_set(value, self->curval++); =}
}

main reactor {
  timer stepper(500 msec, 500 msec)

  modal = new Modal()
  test = new TraceTesting(events_size = 1, trace_size = 51, trace = {  // keep-format
    0,1,0,
    250000000,1,1,
    250000000,1,2,
    0,1,0,
    100000000,1,10,
    100000000,1,20,
    100000000,1,30,
    100000000,1,40,
    100000000,1,50,
    250000000,1,3,
    250000000,1,4,
    0,1,0,
    100000000,1,10,
    100000000,1,20,
    100000000,1,30,
    100000000,1,40,
    100000000,1,50
  }, training = false)

  modal.count -> test.events

  reaction(stepper) -> modal.next {= lf_set(modal.next, true); =}  // Trigger mode change

  reaction(modal.count) {= printf("%d\n", modal.count->value); =}  // Print
}
