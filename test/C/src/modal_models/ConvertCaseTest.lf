/** Modal Reactor Test. Tests nested reactors with modes. */
target C {
  fast: false,
  timeout: 4 sec  // logging: debug
}

import TraceTesting from "util/TraceTesting.lf"

reactor ResetProcessor {
  input discard: bool
  input character: char
  output converted: int

  initial mode Converting {
    converter = new Converter()
    character -> converter.raw
    converter.converted -> converted
    reaction(discard) -> reset(Discarding) {= lf_set_mode(Discarding); =}
  }

  mode Discarding {
    reaction(character) -> converted {= lf_set(converted, '_'); =}

    reaction(character) -> reset(Converting) {= lf_set_mode(Converting); =}
  }
}

reactor HistoryProcessor {
  input discard: bool
  input character: char
  output converted: int

  initial mode Converting {
    converter = new Converter()
    character -> converter.raw
    converter.converted -> converted
    reaction(discard) -> reset(Discarding) {= lf_set_mode(Discarding); =}
  }

  mode Discarding {
    reaction(character) -> converted {= lf_set(converted, '_'); =}

    reaction(character) -> history(Converting) {= lf_set_mode(Converting); =}
  }
}

reactor Converter {
  input raw: char
  output converted: int

  initial mode Upper {
    reaction(raw) -> converted, reset(Lower) {=
      char c = raw->value;
      if (c >= 'a' && c <= 'z') {
        lf_set(converted, c - 32);
      } else {
        lf_set(converted, c);
      }
      if (c == ' ') {
        lf_set_mode(Lower);
      }
    =}
  }

  mode Lower {
    reaction(raw) -> converted, reset(Upper) {=
      char c = raw->value;
      if (c >= 'A' && c <= 'Z') {
        lf_set(converted, c + 32);
      } else {
        lf_set(converted, c);
      }
      if (c == ' ') {
        lf_set_mode(Upper);
      }
    =}
  }
}

reactor InputFeeder(message: string = "") {
  output character: char
  state idx: int = 0

  timer t(0, 250 msec)

  preamble {=
    #include <string.h>
  =}

  reaction(t) -> character {=
    if (self->idx < strlen(self->message)) {
      lf_set(character, *(self->message + self->idx));
      self->idx++;
    }
  =}
}

main reactor {
  timer stepper(500 msec, 1 sec)

  feeder = new InputFeeder(message = "Hello World!")
  reset_processor = new ResetProcessor()
  history_processor = new HistoryProcessor()

  feeder.character -> reset_processor.character
  feeder.character -> history_processor.character

  test = new TraceTesting(events_size = 2, trace_size = 60, trace = {  // keep-format
    0,1,72,1,72,
    250000000,1,69,1,69,
    250000000,1,76,1,76,
    250000000,1,95,1,95,
    250000000,1,79,1,79,
    250000000,1,32,1,32,
    250000000,1,119,1,119,
    250000000,1,95,1,95,
    250000000,1,82,1,114,
    250000000,1,76,1,108,
    250000000,1,68,1,100,
    250000000,1,95,1,95
  }, training = false)

  reset_processor.converted, history_processor.converted -> test.events

  // Trigger mode change
  reaction(stepper) -> reset_processor.discard, history_processor.discard {=
    lf_set(reset_processor.discard, true);
    lf_set(history_processor.discard, true);
  =}

  reaction(reset_processor.converted) {= printf("Reset: %c\n", reset_processor.converted->value); =}

  reaction(history_processor.converted) {=
    printf("History: %c\n", history_processor.converted->value);
  =}
}
