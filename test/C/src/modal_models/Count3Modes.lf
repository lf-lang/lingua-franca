/** Modal Reactor Test. Tests cycling through modes. */
target C {
  fast: false,
  timeout: 2 sec
}

reactor CounterCycle {
  input next: bool
  output count: int

  initial mode One {
    reaction(next) -> count, reset(Two) {=
      lf_set(count, 1);
      lf_set_mode(Two);
    =}
  }

  mode Two {
    reaction(next) -> count, reset(Three) {=
      lf_set(count, 2);
      lf_set_mode(Three);
    =}
  }

  mode Three {
    reaction(next) -> count, reset(One) {=
      lf_set(count, 3);
      lf_set_mode(One);
    =}
  }
}

main reactor {
  timer stepper(0, 250 msec)
  counter = new CounterCycle()

  state expected_value: int = 1

  reaction(stepper) -> counter.next {= lf_set(counter.next, true); =}  // Trigger

  // Check
  reaction(stepper) counter.count {=
    printf("%d\n", counter.count->value);

    if (!counter.count->is_present) {
      printf("ERROR: Missing mode change.\n");
      exit(1);
    } else if (counter.count->value != self->expected_value) {
      printf("ERROR: Wrong mode.\n");
      exit(2);
    }

    if (self->expected_value == 3) {
      self->expected_value = 1;
    } else {
      self->expected_value++;
    }
  =}
}
