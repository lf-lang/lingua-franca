/**
 * Modal Reactor Test.
 *
 * Tests if connections in the same reactor that have the same destination work if they are located
 * in separate modes.
 */
target C {
  fast: false,
  timeout: 1 sec
}

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
  input in1: int
  input in2: int
  output out: int

  // Defining reaction to in2 before in1 would cause cycle if no mode were present
  mode Two {
    timer wait(150 msec, 1 sec)
    reaction(in2) {=
      // lf_set(out, in2->value);
    =}

    reaction(wait) -> reset(One) {=
      lf_set_mode(One);
      printf("Switching to mode One\n");
    =}
  }

  initial mode One {
    reaction(in1) -> out {= lf_set(out, in1->value); =}

    reaction(in1) -> reset(Two) {=
      if (in1->value % 5 == 4) {
        lf_set_mode(Two);
        printf("Switching to mode Two\n");
      }
    =}
  }
}

reactor Counter(period: time = 1 sec) {
  output value: int

  timer t(0, period)
  state curval: int = 0

  reaction(t) -> value {= lf_set(value, self->curval++); =}
}

main reactor {
  counter = new Counter(period = 100 msec)
  modal = new Modal()
  test = new TraceTesting(events_size = 1, trace_size = 27, trace = {  // keep-format
    0,1,0,
    100000000,1,1,
    100000000,1,2,
    100000000,1,3,
    100000000,1,4,
    200000000,1,6,
    100000000,1,7,
    100000000,1,8,
    100000000,1,9
  }, training = false)

  counter.value -> modal.in1
  modal.out -> modal.in2

  modal.out -> test.events

  reaction(modal.out) {= printf("%d\n", modal.out->value); =}  // Print
}
