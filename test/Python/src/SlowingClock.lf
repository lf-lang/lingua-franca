/**
 * Output events at logical times 100, 300, 600, and 1000 msec after the start time. This uses a
 * logical action with a minimum delay of 100 msec and additional delays provided as arguments to
 * the schedule() function.
 */
target Python {
  timeout: 1 sec,
  fast: true
}

main reactor SlowingClock {
  logical action a(100 msec)
  state interval = 100 msec
  state expected_time = 100 msec

  reaction(startup) -> a {= a.schedule(0) =}

  reaction(a) -> a {=
    elapsed_logical_time = lf.time.logical_elapsed()
    print("Logical time since start: {:d} nsec.\n".format(elapsed_logical_time))
    if elapsed_logical_time != self.expected_time:
      sys.stderr.write("ERROR: Expected time to be: {:d} nsec.\n".format(self.expected_time))
      exit(1)

    a.schedule(self.interval)
    self.expected_time += MSEC(100) + self.interval
    self.interval += MSEC(100)
  =}

  reaction(shutdown) {=
    if self.expected_time != MSEC(1500):
      sys.stderr.write("ERROR: Expected the next expected time to be: 1500000000 nsec.\n")
      sys.stderr.write("It was: {:d} nsec.\n".format(self.expected_time))
      exit(2)
    else:
      print("Test passes.")
  =}
}
