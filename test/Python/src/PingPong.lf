/**
 * Basic benchmark from the Savina benchmark suite that is intended to measure message-passing
 * overhead. This is based on https://www.scala-lang.org/old/node/54 See
 * https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Ping introduces a microstep delay using a logical action to break the causality loop.
 *
 * To get a sense, some (informal) results for 1,000,000 ping-pongs on my Mac:
 *
 * Unthreaded: 97 msec Threaded: 265 msec
 *
 * There is no parallelism in this application, so it does not benefit from being being threaded,
 * just some additional overhead.
 *
 * These measurements are total execution time, including startup and shutdown. These are about an
 * order of magnitude faster than anything reported in the paper.
 *
 * @author Edward A. Lee
 */
target Python {
  fast: true
}

reactor Ping(count=10) {
  input receive
  output send
  state pingsLeft = count
  logical action serve

  reaction(startup, serve) -> send {=
    send.set(self.pingsLeft)
    self.pingsLeft -= 1
  =}

  reaction(receive) -> serve {=
    if self.pingsLeft > 0:
      serve.schedule(0)
    else:
      request_stop()
  =}
}

reactor Pong(expected=10) {
  input receive
  output send
  state count = 0

  reaction(receive) -> send {=
    self.count += 1
    send.set(receive.value)
  =}

  reaction(shutdown) {=
    if self.count != self.expected:
      sys.stderr.write(
        "ERROR: Pong expected to receive {} inputs, but it received {}.\n".format(
          self.expected,
          self.count
        )
      )
      sys.exit(1)
    print("Success.")
  =}
}

main reactor PingPong {
  ping = new Ping()
  pong = new Pong()
  ping.send -> pong.receive
  pong.send -> ping.receive
}
