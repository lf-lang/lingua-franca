# This test connects a simple counting source to tester that checks against its own count.
target Python {
  timeout: 10 sec,
  fast: true
}

reactor A_Really_Long_Name_For_A_Source_But_Not_Quite_255_Characters_Which_Is_The_Maximum_For_The_Python_Target(
    period = 2 sec) {
  output y
  timer t(1 sec, period)
  state count = 0

  reaction(t) -> y {=
    self.count += 1
    y.set(self.count)
  =}
}

reactor Another_Really_Long_Name_For_A_Test_Class {
  input x
  state count = 0

  reaction(x) {=
    self.count += 1
    print("Received ", x.value)
    if x.value != self.count:
      sys.stderr.write("FAILURE: Expected {:d}.\n".format(self.count))
      exit(1)
  =}
}

main reactor IdentifierLength {
  a_really_long_name_for_a_source_instance = new A_Really_Long_Name_For_A_Source_But_Not_Quite_255_Characters_Which_Is_The_Maximum_For_The_Python_Target()
  another_really_long_name_for_a_test_instance = new Another_Really_Long_Name_For_A_Test_Class()
  a_really_long_name_for_a_source_instance.y -> another_really_long_name_for_a_test_instance.x
}
