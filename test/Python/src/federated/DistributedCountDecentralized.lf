/**
 * Test a particularly simple form of a distributed deterministic system where a federation that
 * receives timestamped messages has only those messages as triggers. Therefore, no additional
 * coordination of the advancement of time (HLA or Ptides) is needed.
 * @author Edward A. Lee
 */
# reason for failing: in_.intended_tag are not supported in python target
target Python {
  timeout: 5 sec,
  coordination: decentralized
}

import Count from "../lib/Count.lf"

reactor Print {
  preamble {= import sys =}
  input in_
  state c = 1

  reaction(in_) {=
    print(f"At tag ({lf.time.logical_elapsed()}, {lf.tag().microstep}), received {in_.value}. "
        f"The original intended tag of the message was ({in_.intended_tag.time-lf.time.start()}, {in_.intended_tag.microstep}).")
    if in_.value != self.c:
      print("Expected to receive {}.".format(self.c))
      self.sys.exit(1)
    if lf.time.logical_elapsed() != MSEC(200) + SEC(1) * (self.c - 1):
      print("Expected received time to be {}.".format(MSEC(200) * self.c))
      self.sys.exit(3)
    self.c += 1
  =}

  reaction(shutdown) {=
    if self.c != 6:
      self.sys.stderr.write("Expected to receive 5 items.\n")
      self.sys.exit(2)
    print("SUCCESS: Successfully received 5 items.")
  =}
}

federated reactor DistributedCountDecentralized {
  c = new Count()
  p = new Print()
  c.out -> p.in_ after 200 msec  # Indicating a 'logical' connection with a large enough delay.
}
