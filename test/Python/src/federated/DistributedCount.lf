/**
 * Test a particularly simple form of a distributed deterministic system where a federation that
 * receives timestamped messages has only those messages as triggers. Therefore, no additional
 * coordination of the advancement of time (HLA or Ptides) is needed.
 * @author Edward A. Lee
 */
target Python {
  timeout: 5 sec,
  coordination: centralized
}

import Count from "../lib/Count.lf"

reactor Print {
  preamble {= import sys =}
  input in_
  state c = 1

  reaction(in_) {=
    elapsed_time = lf.time.logical_elapsed()
    print("At time {}, received {}".format(elapsed_time, in_.value))
    if in_.value != self.c:
      print("Expected to receive {}.".format(self.c))
      self.sys.exit(1)
    if elapsed_time != MSEC(200) + SEC(1) * (self.c - 1):
      print("Expected received time to be {}.".format(MSEC(200) * self.c))
      self.sys.exit(1)
    self.c += 1
  =}

  reaction(shutdown) {=
    if self.c != 6:
      print("Expected to receive 5 items.")
      self.sys.exit(1)
  =}
}

federated reactor DistributedCount(offset = 200 msec) {
  c = new Count()
  p = new Print()
  c.out -> p.in_ after offset
}
