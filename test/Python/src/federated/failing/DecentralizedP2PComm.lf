target Python {
    timeout: 1 sec,
    tracing: true,
    clock-sync: off,
    coordination: decentralized
}

// reason for failing: STP not supported by the python target

reactor Platform(start(0), expected_start(0), stp_offset_param(0)) {
    preamble {=
        import sys
    =}
    input in_;
    output out;
    timer t(0, 100 msec);
    state count(start);
    state expected(expected_start);
    reaction(t) -> out {=
        out.set(self.count)
        self.count += 1
    =}
    reaction(in_) {=
        print("Received {}.".format(in_.value))
        if in_.value != self.expected_start:
            self.sys.stderr.write("Expected {} but got {}.\n".format(self.expected_start, in_.value))
            self.sys.exit(1)
        self.expected_start += 1
    =} STP (stp_offset_param) {=
        print("Received {} late.".format(in_.value))
        current_tag = get_current_tag()
        self.expected_star += 1
        self.sys.stderr.write("STP offset was violated by ({}, {}).".format(current_tag.time - in_.intended_tag.time, current_tag.microstep - in_.intended_tag.microstep))
    =}
    reaction(shutdown) {=
        print("Shutdown invoked.")
        if self.expected == self.expected_start:
            self.sys.stderr.write("Did not receive anything.\n")
            self.sys.exit(1)
    =}
}
federated reactor DecentralizedP2PComm {
    a = new Platform(expected_start = 100, stp_offset_param = 10 msec);
    b = new Platform(start = 100, stp_offset_param = 10 msec);
    a.out -> b.in_;
    b.out -> a.in_;
}
