/** 
 * Test a form of a distributed deterministic system
 * where a federate that receives timestamped messages has a timer in addition to the messages
 * as triggers. Therefore, careful coordination of the advancement of time using Ptides is needed.
 * In addition, this test shows that the STP violation is passed down the hierarchy until it is handled.
 * 
 * An STP violation occurs if when a message with intended tag g1 arrives 
 * on a port p after the receiving federate has progressed far enough that
 * it cannot process an event with tag g1 on the port p.
 * This test has a fast timer (10 usec period) in the receiving federate
 * so that the receiving federate is continually advancing its current tag,
 * and hence an STP violation is more likely to occur.
 * Furthermore, this test sets the STP threshold to 0, which makes the
 * violation extremely likely to occur.  It could still not occur, however,
 * if the message arrives between ticks of the 10 usec timer.
 * 
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
 
// reason for failing: in_.intended_tag are not supported in python target
 
target Python {
    timeout: 1900 msec, // 9 msec headroom for the last (probably tardy) message to arrive.
    coordination: decentralized
};

import Count from "../lib/Count.lf";

reactor ImportantActuator {
    input in:int;
    state success:int(0);   // Count messages that arrive without STP violation.
    state success_stp_violation:int(0);
    timer t(0, 10 usec); // Force a timer to be invoke periodically
                         // to ensure logical time will advance in the
                         // absence of incoming messages.
    state c:int(0);
    reaction(in) {=
        tag_t current_tag = get_current_tag();
        info_print("ImportantActuator: At tag (%lld, %u) received %d. Intended tag is (%lld, %u).",
            lf.time.logical_elapsed(),
            get_microstep(),
            in->value,
            in->intended_tag.time - get_start_time(),
            in->intended_tag.microstep);
        if (lf.tag_compare((tag_t){.time=current_tag.time - get_start_time(), .microstep=current_tag.microstep}, 
                         (tag_t){.time=SEC(1) *  self->c, .microstep=0}) == 0) {
            self->success++; // Message was on-time
        } else {
            lf_print_error_and_exit("Normal reaction was invoked, but current tag doesn't match expected tag.");
        }
        self->c++;
    =} STP (0) {=
        tag_t current_tag = get_current_tag();
        info_print("ImportantActuator: At tag (%lld, %u), message has violated the STP offset by (%lld, %u).",
                current_tag.time - start_time, current_tag.microstep,
                current_tag.time - in->intended_tag.time,
                current_tag.microstep - in->intended_tag.microstep);
        self->success_stp_violation++;
        self->c++;
    =}
    reaction(t) {=
        // Do nothing.
    =}
    
    reaction(shutdown) {=
        if ((self->success +  self->success_stp_violation) != 2) {
            lf_print_error_and_exit("Failed to detect STP violation in messages.");
        } else {
            info_print("Successfully detected STP violations (%d violations, %d on-time).", self->success_stp_violation, self->success);
        }
    =}
}

reactor Print {
    input in:int;
    reaction(in) {=
        tag_t current_tag = get_current_tag();  
        info_print("Print reactor: at tag (%lld, %u) received %d. Intended tag is (%lld, %u).",
               current_tag.time - get_start_time(),
               current_tag.microstep,
               in->value,
               in->intended_tag.time - get_start_time(),
               in->intended_tag.microstep);
    =}

}

reactor Receiver {
    input in:int;
    timer t(0, 10 msec); // Force a timer to be invoke periodically
                         // to ensure logical time will advance in the
                         // absence of incoming messages.
    state c:int(0);
    p = new Print();
    a = new ImportantActuator();
    reaction(in) -> p.in, a.in {=
        SET(p.in, in->value + 1);
        SET(a.in, in->value + 1);
    =}
    
    reaction(t) {=
        // Do nothing.
    =}
}
 
federated reactor {
    c = new Count(period = 1 sec);
    r = new Receiver();
    c.out -> r.in;    // Indicating a 'logical' connection.
}
