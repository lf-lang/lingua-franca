/**
 * Test a particularly simple form of a distributed deterministic system where a federation that
 * receives timestamped messages only over connections that are marked 'physical' (using the ~>
 * arrow). Therefore, no additional coordination of the advancement of time (HLA or Ptides) is
 * needed.
 *
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target Python {
  timeout: 1 sec
}

reactor Count {
  timer t(200 msec, 1 sec)
  state s = 0
  output out

  reaction(t) -> out {=
    out.set(self.s)
    self.s += 1;
  =}
}

reactor Print {
  preamble {= import sys =}
  input in_
  state c = 0

  reaction(in_) {=
    elapsed_time = lf.time.logical_elapsed()
    print("At time {}, received {}.".format(elapsed_time, in_.value))
    if in_.value != self.c:
      self.sys.stderr.write("ERROR: Expected to receive {}.\n".format(self.c))
      self.sys.exit(1)
    if not (elapsed_time > (SEC(1) * self.c) + MSEC(200)):
      self.sys.stderr.write("ERROR: Expected received time to be strictly greater than {}. Got {}.\n".format(MSEC(200) * self.c, elapsed_time))
      self.sys.exit(3)
    self.c += 1
  =}

  reaction(shutdown) {=
    if (self.c != 1):
      self.sys.stderr.write("ERROR: Expected to receive 1 item. Received {}.\n".format(self.c))
      self.sys.exit(2)
    print("SUCCESS: Successfully received 1 item.");
  =}
}

federated reactor at localhost {
  c = new Count()
  p = new Print()
  c.out ~> p.in_ after 400 msec  # Indicating a 'physical' connection.
}
