/**
 * Test a sender-receiver network system that is similar to DistributedLoopedAction, but it uses a
 * physical action rather than a logical action. This also demonstrates the advance-message-interval
 * coordination option. This specifies the time period between Time Advance Notice (TAN) messages
 * sent to the RTI (a form of null message that must be sent because of the physical action). The
 * presence of this option also silences a warning about having a physical action that triggers an
 * output.
 *
 * @author Soroush Bateni
 */
target Python {
  timeout: 1 sec,
  keepalive: true
}

reactor Sender(take_a_break_after=10, break_interval = 550 msec) {
  output out
  physical action act
  state sent_messages = 0

  reaction(startup, act) -> act, out {=
    # Send a message on out
    out.set(self.sent_messages)
    self.sent_messages += 1
    if self.sent_messages < self.take_a_break_after:
      act.schedule(0)
    else:
      # Take a break
      self.sent_messages = 0
      act.schedule(self.break_interval)
  =}
}

reactor Receiver(take_a_break_after=10, break_interval = 550 msec) {
  preamble {= import sys =}
  input in_
  state received_messages = 0
  state total_received_messages = 0
  state breaks = 0
  # This will impact the performance
  timer t(0, 1 msec)
  # but forces the logical time to advance Comment this line for a more sensible log output.
  state base_logical_time

  reaction(startup) {= self.base_logical_time = lf.time.logical() =}

  reaction(in_) {=
    current_tag = lf.tag()
    print("At tag ({}, {}) received {}".format(
         current_tag.time - self.base_logical_time,
         current_tag.microstep,
         in_.value)
         )
    self.total_received_messages += 1
    if in_.value != self.received_messages:
      self.sys.stderr.write("Expected {}.".format(self.received_messages - 1))
      self.sys.exit(1)
    self.received_messages += 1

    if self.received_messages == self.take_a_break_after:
      # Sender is taking a break;
      self.breaks += 1
      self.received_messages = 0
  =}

  reaction(t) {=
    # Do nothing
  =}

  reaction(shutdown) {=
    if self.breaks != 2 or (self.total_received_messages != ((SEC(1)//self.break_interval)+1) * self.take_a_break_after):
      self.sys.stderr.write("Test failed. Breaks: {}, Messages: {}.".format(self.breaks, self.total_received_messages))
      self.sys.exit(1)
    print("SUCCESS: Successfully received all messages from the sender.")
  =}
}

federated reactor DistributedLoopedPhysicalAction {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in_
}
