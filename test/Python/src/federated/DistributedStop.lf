/**
 * Test for request_stop() in federated execution with centralized coordination.
 *
 * @author Soroush Bateni
 */
target Python

preamble {= import sys =}

reactor Sender {
  output out
  timer t(0, 1 usec)
  logical action act
  state reaction_invoked_correctly = False

  reaction(t, act) -> out, act {=
    tag = lf.tag()
    print("Sending 42 at ({}, {}).".format(
           lf.time.logical_elapsed(),
           tag.microstep))
    out.set(42)
    if tag.microstep == 0:
      # Instead of having a separate reaction
      # for 'act' like Stop.lf, we trigger the
      # same reaction to test request_stop() being
      # called multiple times
      act.schedule(0)
    if lf.time.logical_elapsed() == USEC(1):
      # Call request_stop() both at (1 usec, 0) and
      # (1 usec, 1)
      print("Requesting stop at ({}, {}).".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      request_stop()

    _1usec1 = Tag(time=USEC(1) + lf.time.start(), microstep=1)
    if lf.tag_compare(lf.tag(), _1usec1) == 0:
      # The reaction was invoked at (1 usec, 1) as expected
      self.reaction_invoked_correctly = True
    elif lf.tag_compare(lf.tag(), _1usec1) > 0:
      # The reaction should not have been invoked at tags larger than (1 usec, 1)
      sys.stderr.write("ERROR: Invoked reaction(t, act) at tag bigger than shutdown.\n")
      sys.exit(1)
  =}

  reaction(shutdown) {=
    if lf.time.logical_elapsed() != USEC(1) or lf.tag().microstep != 1:
      sys.stderr.write("ERROR: Sender failed to stop the federation in time. Stopping at ({}, {}).\n".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      sys.exit(1)
    elif not self.reaction_invoked_correctly:
      sys.stderr.write("ERROR: Sender reaction(t, act) was not invoked at (1 usec, 1). Stopping at ({}, {}).\n".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      sys.exit(1)
    print("SUCCESS: Successfully stopped the federation at ({}, {}).".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
  =}
}

reactor Receiver(
    # Used in the decentralized variant of the test
    stp_offset = 10 msec) {
  input in_
  state reaction_invoked_correctly = False

  reaction(in_) {=
    tag = lf.tag()
    print("Received {} at ({}, {}).".format(
           in_.value,
           lf.time.logical_elapsed(),
           lf.tag().microstep))
    if lf.time.logical_elapsed() == USEC(1):
      print("Requesting stop at ({}, {}).".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      request_stop()
      # The receiver should receive a message at tag
      # (1 usec, 1) and trigger this reaction
      self.reaction_invoked_correctly = True

    _1usec1 = Tag(time=USEC(1) + lf.time.start(), microstep=1)
    if lf.tag_compare(lf.tag(), _1usec1) > 0:
      self.reaction_invoked_correctly = False
  =}

  reaction(shutdown) {=
    # Sender should have requested stop earlier than the receiver.
    # Therefore, the shutdown events must occur at (1000, 0) on the
    # receiver.
    if lf.time.logical_elapsed() != USEC(1) or lf.tag().microstep != 1:
      sys.stderr.write("Error: Receiver failed to stop the federation at the right time. Stopping at ({}, {}).\n".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      sys.exit(1)
    elif not self.reaction_invoked_correctly:
      sys.stderr.write("Error: Receiver reaction(in) was not invoked the correct number of times. Stopping at ({}, {}).\n".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
      sys.exit(1)
    print("SUCCESS: Successfully stopped the federation at ({}, {}).".format(
           lf.time.logical_elapsed(),
           lf.tag().microstep))
  =}
}

federated reactor DistributedStop {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in_
}
