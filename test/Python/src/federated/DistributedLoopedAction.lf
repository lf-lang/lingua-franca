/**
 * Test a sender-receiver network system that relies on microsteps being taken into account.
 *
 * @author Soroush Bateni
 */
target Python {
  timeout: 1 sec
}

import Sender from "../lib/LoopedActionSender.lf"

reactor Receiver(take_a_break_after=10, break_interval = 400 msec) {
  preamble {= import sys =}
  input in_
  state received_messages = 0
  state total_received_messages = 0
  state breaks = 0
  timer t(0, 1 msec)  # This will impact the performance

  # but forces the logical time to advance Comment this line for a more sensible log output.
  reaction(in_) {=
    print("At tag ({}, {}) received value {}.".format(
      lf.time.logical_elapsed(),
      lf.tag().microstep,
      in_.value
      )
    )
    self.total_received_messages += 1
    if in_.value != self.received_messages:
      self.sys.stderr.write("ERROR: received messages out of order.\n")
      # exit(1);
    self.received_messages += 1
    if lf.time.logical_elapsed() != self.breaks * self.break_interval:
      self.sys.stderr.write("ERROR: received messages at an incorrect time: {}.\n".format(lf.time.logical_elapsed()))
      # exit(2);

    if self.received_messages == self.take_a_break_after:
      # Sender is taking a break;
      self.breaks += 1
      self.received_messages = 0
  =}

  reaction(t) {=
    # Do nothing
  =}

  reaction(shutdown) {=
    print(((SEC(1)/self.break_interval)+1) * self.take_a_break_after)
    if self.breaks != 3 or (self.total_received_messages != ((SEC(1)//self.break_interval)+1) * self.take_a_break_after):
      self.sys.stderr.write("ERROR: test failed.\n")
      exit(4)
    print("SUCCESS: Successfully received all messages from the sender.")
  =}
}

federated reactor DistributedLoopedAction {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in_
}
