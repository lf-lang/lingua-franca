/**
 * Test the case for when two upstream federates send messages to a downstream federte on two
 * different ports. One message should carry a microstep delay relative to the other message.
 *
 * @author Soroush Bateni
 */
target Python {
  timeout: 900 msec,
  logging: DEBUG,
  coordination: centralized
}

import Count from "../lib/Count.lf"

reactor CountMicrostep {
  state count = 1
  output out
  logical action act
  timer t(0, 1 sec)

  reaction(t) -> act {=
    act.schedule(0, self.count)
    self.count += 1
  =}

  reaction(act) -> out {= out.set(act.value) =}
}

reactor Print {
  preamble {= import sys =}
  input in_
  input in2

  reaction(in_, in2) {=
    current_tag = lf.tag()
    print("At tag ({}, {}), received in_ = {} and in2 = {}.".format(current_tag.time, current_tag.microstep, in_.value, in2.value))
    if in_.is_present and in2.is_present:
      self.sys.stderr.write("ERROR: invalid logical simultaneity.")
      self.sys.exit(1)
  =}

  reaction(shutdown) {= print("SUCCESS: messages were at least one microstep apart.") =}
}

federated reactor DistributedDoublePort {
  c = new Count()
  cm = new CountMicrostep()
  p = new Print()
  c.out -> p.in_  # Indicating a 'logical' connection.
  cm.out -> p.in2
}
