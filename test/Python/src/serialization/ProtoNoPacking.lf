/**
 * This example creates a Protocol Buffer message and passes it to another reactor without packing
 * and unpacking. This demonstrates that local communication, within one shared-memory machine, need
 * not incur the overhead of packing and unpacking.
 *
 * To run this example first install the protocol buffers compiler from
 * https://github.com/protocolbuffers/protobuf. It is also available from homebrew on a Mac via
 *
 * $ brew install protobuf
 *
 * Building protobuf from source is slow, so avoid doing that if possible. Next, install the Google
 * APIs for Python
 *
 * $ pip3 install --upgrade google-api-python-client
 *
 * The code generator assumes that executables are installed within the PATH. On a Mac, this is
 * typically at /usr/local/bin.
 */
target Python {
  protobufs: ProtoHelloWorld.proto
}

reactor SourceProto {
  output out

  reaction(startup) -> out {=
    message = ProtoHelloWorld.ProtoHelloWorld()
    message.name = "Hello World"
    message.number = 42
    out.set(message)
  =}
}

reactor SinkProto {
  input _in

  reaction(_in) {=
    print("Received: name='{:s}', number={:d}.".format(_in.value.name, _in.value.number))
  =}
}

main reactor ProtoNoPacking {
  s = new SourceProto()
  d = new SinkProto()
  s.out -> d._in
}
