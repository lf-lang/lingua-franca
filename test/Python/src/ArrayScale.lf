# Source produces a dynamically allocated array, which it passes to Scale. Scale requests a writable
# copy, which, instead of copying, it just gets ownership of the original array. It modifies it and
# passes it to Print. It gets freed after Print is done with it.
target Python

import Print, Source from "ArrayPrint.lf"

reactor Scale(scale=2) {
  mutable input _in
  output out

  reaction(_in) -> out {=
    for i in range(len(_in.value)):
      _in.value[i] *= self.scale
    out.set(_in.value)
  =}
}

main reactor ArrayScale {
  s = new Source()
  c = new Scale()
  p = new Print(scale=2)
  s.out -> c._in
  c.out -> p._in
}
