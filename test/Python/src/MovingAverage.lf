# Demonstration of a state variable that is a list. The MovingAverage reactor computes the moving
# average of the last four inputs and produces that as output. The source is a counting sequence.
target Python {
  timeout: 1 sec,
  fast: true
}

import TestDouble from "lib/Test.lf"

reactor MASource {
  output out
  state count = 0
  timer clock(0, 200 msec)

  reaction(clock) -> out {=
    out.set(self.count)
    self.count +=1
  =}
}

reactor MovingAverageImpl {
  state delay_line(0.0, 0.0, 0.0)
  state index = 0
  input m_in
  output out

  reaction(m_in) -> out {=
    # Calculate the output.
    sm = m_in.value
    sm += sum(self.delay_line)

    out.set(sm/4.0)

    # Insert the input in the delay line.
    self.delay_line[self.index] = m_in.value

    # Update the index for the next input.
    self.index +=1
    if self.index >= 3:
      self.index = 0
  =}
}

main reactor MovingAverage {
  s = new MASource()
  m = new MovingAverageImpl()
  p = new TestDouble(expected(0.0, 0.25, 0.75, 1.5, 2.5, 3.5))
  s.out -> m.m_in
  m.out -> p.t_in
}
