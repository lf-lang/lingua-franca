# Test delaying a struct pointer type.
target Python {
  files: ["include/hello.py"]
}

preamble {=
  import hello
=}

reactor DelayPointer(delay = 100 msec) {
  input inp
  output out
  logical action a

  reaction(a) -> out {=
    out.set(a.value);
  =}

  reaction(inp) -> a {=
    # Schedule the actual token from the input rather than
    # a new token with a copy of the input value.
    a.schedule(self.delay, inp.value);
  =}
}

reactor Source {
  output out

  reaction(startup) -> out {=
    out.set(hello.hello("Earth", 42))
  =}
}

# expected parameter is for testing.
reactor Print(expected=42) {
  input inp

  reaction(inp) {=
    print("Received: name = {:s}, value = {:d}".format(inp.value.name, inp.value.value))
    if inp.value.value != self.expected:
      sys.stderr.write("ERROR: Expected value to be {:d}.\n".format(self.expected))
      exit(1)
  =}
}

main reactor DelayStruct {
  s = new Source()
  d = new DelayPointer()
  p = new Print()
  s.out -> d.inp
  d.out -> p.inp
}
