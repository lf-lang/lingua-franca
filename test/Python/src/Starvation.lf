target Python {
  timeout: 1 sec
}

reactor SuperDenseSender(number_of_iterations = 10) {
  logical action loop
  output out
  state iterator = 0

  reaction(startup, loop) -> out {=
    if (self.iterator < self.number_of_iterations):
      loop.schedule(0)
    
    self.iterator += 1
    out.set(42)
  =}

  reaction(shutdown) {=
    current_tag = lf.tag()
    if current_tag.time == lf.time.start() and current_tag.microstep == self.number_of_iterations + 1:
      print("SUCCESS: Sender successfully detected starvation.")
    else:
      sys.stderr.write(f"ERROR: Failed to properly enforce starvation at sender. Shutting down at tag ({current_tag.time - lf.time_start()}, {current_tag.microstep}).")
      exit(1)
  =}
}

reactor SuperDenseReceiver(number_of_iterations = 10) {
  input inp

  reaction(inp) {=
    current_tag = lf.tag()
    print(f"Received {inp.value} at tag ({current_tag.time - lf.time.start()}, {current_tag.microstep}).")
  =}

  reaction(shutdown) {=
    current_tag = lf.tag()
    if current_tag.time == lf.time.start() and current_tag.microstep == self.number_of_iterations + 1:
      print("SUCCESS: Receiver successfully detected starvation.")
    else:
      sys.stderr.write(f"ERROR: Failed to properly enforce starvation at receiver. Shutting down at tag ({current_tag.time - lf.time.start()}, {current_tag.microstep}).")
      exit(1)
  =}
}

main reactor Starvation {
  sender = new SuperDenseSender()
  receiver = new SuperDenseReceiver()

  sender.out -> receiver.inp
}
