target Python {
  timeout: 2 sec
}

reactor TakeTime {
  input _in
  output out

  reaction(_in) -> out {=
    offset = 0
    for i in range(10000):
      offset+=1

    out.set(_in.value + offset)
  =}
}

reactor Print {
  input _in
  state count = 0
  state received = 0

  reaction(_in) {=
    self.received += 1
    print("Received: {:d} at logical time {:d}".format(_in.value, lf.time.logical_elapsed()))
    if _in.value != (self.count + 40000):
      sys.stderr.write("ERROR: Expected {:d}.\n".format(self.count + 40000))
      exit(1)
    self.count+=1
  =}

  reaction(shutdown) {=
    if self.received == 0:
      sys.stderr.write("ERROR: Final reactor received no data.\n")
      exit(3)
  =}
}

main reactor Pipeline {
  timer t(0, 200 msec)
  state count = 0

  c1 = new TakeTime()
  c2 = new TakeTime()
  c3 = new TakeTime()
  c4 = new TakeTime()
  p = new Print()

  c1.out -> c2._in after 200 msec
  c2.out -> c3._in after 200 msec
  c3.out -> c4._in after 200 msec
  c4.out -> p._in

  reaction(t) -> c1._in {=
    c1._in.set(self.count)
    self.count += 1
  =}
}
