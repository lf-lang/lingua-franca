# This illustrates a very strange bug that showed up and has now been fixed. This test ensures it
# does not reappear. At logical time zero, the two Print reactors used to be fired twice each at the
# same logical time. They should only be fired once. This behavior was oddly eliminated by either of
# the following actions, neither of which should affect this behavior:
# * Removing the startup reaction in Print.
# * Sending only position, not velocity from Ball.
target Python {
  timeout: 5 sec,
  fast: true
}

reactor Ball {
  output position
  output velocity
  state p = 200
  timer trigger(0, 1 sec)

  reaction(trigger) -> position, velocity {=
    position.set(self.p)
    velocity.set(-1)
    self.p -= 1
  =}
}

reactor Print {
  input velocity
  input position
  state previous = -1

  reaction(startup) {=
    print("####### Print startup\n")
  =}

  reaction(position, velocity) {=
    if position.is_present:
      print("Position: ", position.value)
    if position.value == self.previous:
      sys.stderr.write("ERROR: Multiple firings at the same logical time!\n")
      exit(1)
  =}
}

main reactor DoubleInvocation {
  b1 = new Ball()
  p = new Print()
  plot = new Print()
  b1.position -> p.position
  b1.velocity -> p.velocity
  b1.position -> plot.position
  b1.velocity -> plot.velocity
}
