/**
 * Test of nested banks with multiports.
 * @author Edward A. Lee
 */
target Python

main reactor {
  a = new[2] A()
  c = new[3] C()
  d = new D()
  e = new E()

  (a.x)+ -> c.z, d.u, e.t
}

reactor A(bank_index=0) {
  output[4] x
  b = new[2] B(a_bank_index=bank_index)
  b.y -> x
}

reactor B(a_bank_index=0, bank_index=0) {
  output[2] y

  reaction(startup) -> y {=
    base = self.a_bank_index * 4 + self.bank_index * 2
    y[0].set(base)
    y[1].set(base + 1)
  =}
}

reactor C(bank_index=0) {
  input[2] z
  f = new F(c_bank_index=bank_index)
  g = new G(c_bank_index=bank_index)
  z -> f.w, g.s
}

reactor D {
  input[2] u

  reaction(u) {=
    for (i, p) in enumerate(u):
      print(f"d.u[{i}] received {p.value}.")
      if p.value != (6 + i):
        sys.stderr.write(f"ERROR: Expected {6 + i} but received {p.value}.\n")
        exit(1)
  =}
}

reactor E {
  input[8] t

  reaction(t) {=
    for (i, p) in enumerate(t):
      print(f"e.t[{i}] received {p.value}.")
  =}
}

reactor F(c_bank_index=0) {
  input w

  reaction(w) {=
    print(f"c[{self.c_bank_index}].f.w received {w.value}.")
    if w.value != self.c_bank_index * 2:
      sys.stderr.write(f"ERROR: Expected {self.c_bank_index * 2} but received {w.value}.\n")
      exit(1)
  =}
}

reactor G(c_bank_index=0) {
  input s

  reaction(s) {=
    print(f"c[{self.c_bank_index}].g.s received {s.value}.")
    if s.value != (self.c_bank_index * 2 + 1):
      sys.stderr.write(f"ERROR: Expected {self.c_bank_index * 2 + 1} but received {s.value}.\n")
      exit(1)
  =}
}
