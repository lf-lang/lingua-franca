# Source produces a list on a multiport, which it passes to Scale. Scale requests a writable copy,
# which, instead of copying, it just gets ownership of the original list. It modifies it and passes
# it to Print. It gets freed after Print is done with it.
target Python

reactor Source {
  output[2] out

  reaction(startup) -> out {=
    out[0].set([0,1,2])
    out[1].set([3,4,5])
  =}
}

# The scale parameter is just for testing.
reactor Print(scale=1) {
  input[2] _in

  reaction(_in) {=
    for (idx, port) in enumerate(_in):
      print("Received on channel ", port.value)
      if port.value != [(self.scale*i) for i in range(3*idx,(3*idx)+3)]:
        sys.stderr.write("ERROR: Value received by Print does not match expectation!\n")
        exit(1)
  =}
}

reactor Scale(scale=2) {
  mutable input[2] _in
  output[2] out

  reaction(_in) -> out {=
    for (idx, port) in enumerate(_in):
      if port.is_present:
        port.value = [value*self.scale for value in port.value]
      out[idx].set(port.value)
  =}
}

main reactor MultiportMutableInputArray {
  s = new Source()
  c = new Scale()
  p = new Print(scale=2)
  s.out -> c._in
  c.out -> p._in
}
