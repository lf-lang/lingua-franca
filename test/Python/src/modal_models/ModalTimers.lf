/** Modal Reactor Test. Tests timers, their deactivation and reset in modes. */
target Python {
  fast: false,
  timeout: 4 sec
}

import TraceTesting from "util/TraceTesting.lf"

reactor Modal {
  input next

  output mode_switch
  output timer1
  output timer2

  initial mode One {
    timer T1(0, 750 msec)
    reaction(T1) -> timer1 {=
      print(f"T1: at tag ({lf.time.logical_elapsed()}, {lf.tag().microstep})")
      timer1.set(1)
    =}

    reaction(next) -> reset(Two), mode_switch {=
      print("Transitioning to mode Two (reset)")
      mode_switch.set(1)
      Two.set()
    =}
  }

  mode Two {
    timer T2(0, 750 msec)
    reaction(T2) -> timer2 {=
      print(f"T2: at tag ({lf.time.logical_elapsed()}, {lf.tag().microstep})")
      timer2.set(1)
    =}

    reaction(next) -> history(One), mode_switch {=
      print("Transitioning to mode One (continue)")
      mode_switch.set(1)
      One.set()
    =}
  }
}

main reactor {
  timer stepper(1 sec, 1 sec)

  modal = new Modal()
  test = new TraceTesting(events_size = 3, trace = (  // keep-format
    0,0,0,1,1,0,0,
    750000000,0,0,1,1,0,0,
    250000000,1,1,0,1,0,0,
    0,0,1,0,1,1,1,
    750000000,0,1,0,1,1,1,
    250000000,1,1,0,1,0,1,
    500000000,0,1,1,1,0,1,
    500000000,1,1,0,1,0,1,
    0,0,1,0,1,1,1,
    750000000,0,1,0,1,1,1,
    250000000,1,1,0,1,0,1
  ), training = False)

  modal.mode_switch, modal.timer1, modal.timer2 -> test.events

  reaction(stepper) -> modal.next {= modal.next.set(True) =}  # Trigger mode change
}
