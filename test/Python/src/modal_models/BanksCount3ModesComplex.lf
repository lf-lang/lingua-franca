/** Modal Reactor Test. Tests cycling through modes with banks of reactors and complex nesting. */
target Python {
  fast: false,
  timeout: 3 sec
}

import TraceTesting from "util/TraceTesting.lf"
import CounterCycle from "Count3Modes.lf"

reactor MetaCounter {
  input next
  output[2] always
  output[2] mode1
  output[2] mode2
  output[2] never

  outer_counters = new[2] CounterCycle()
  (next)+ -> outer_counters.next
  outer_counters.count -> always

  initial mode One {
    mode1_counters = new[2] CounterCycle()

    (next)+ -> mode1_counters.next
    mode1_counters.count -> mode1

    timer t1(500 msec, 250 msec)
    reaction(t1) -> reset(Two) {= Two.set() =}
  }

  mode Two {
    mode2_counters = new[2] CounterCycle()

    (next)+ -> mode2_counters.next
    mode2_counters.count -> mode2

    timer t2(500 msec, 250 msec)
    reaction(t2) -> history(One) {= One.set() =}
  }

  mode Three {
    mode3_counters = new[2] CounterCycle()

    (next)+ -> mode3_counters.next
    mode3_counters.count -> never
  }
}

main reactor {
  timer stepper(0, 250 msec)
  counters = new[2] MetaCounter()
  test = new TraceTesting(events_size = 16, trace = (  // keep-format
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    250000000,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    250000000,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    250000000,1,1,1,1,1,1,1,1,0,3,0,3,0,3,0,3,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
    250000000,1,2,1,2,1,2,1,2,0,3,0,3,0,3,0,3,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,
    250000000,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,
    250000000,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
    250000000,1,2,1,2,1,2,1,2,0,1,0,1,0,1,0,1,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,
    250000000,1,3,1,3,1,3,1,3,1,2,1,2,1,2,1,2,0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,
    250000000,1,1,1,1,1,1,1,1,0,2,0,2,0,2,0,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
    250000000,1,2,1,2,1,2,1,2,0,2,0,2,0,2,0,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,
    250000000,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,
    250000000,1,1,1,1,1,1,1,1,0,3,0,3,0,3,0,3,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
  ), training = False)

  counters.always, counters.mode1, counters.mode2, counters.never -> test.events

  # Trigger
  reaction(stepper) -> counters.next {=
    for i in range(len(counters)):
      counters[i].next.set(True)
  =}
}
