target Python {
  timeout: 10 ms
}

reactor Fib {
  input inp
  output out
  state foo = 2

  method fib(out, n) {=
    result = 1
    if n > 1:
      result = self.add(self.fib(None, n-1), self.fib(None, n-2))
    if out != None:
      out.set(result)
      print(f"At elapsed time {lf.time.logical_elapsed()}, fib({n}) = {result}")
    return result
  =}

  method add(x, y) {=
    return x + y
  =}

  reaction(inp) -> out {=
    self.fib(out, inp.value)
  =}
}

main reactor {
  state count = 0
  timer t(0, 1 ms)
  fib = new Fib()

  reaction(t) -> fib.inp {=
    fib.inp.set(self.count)
  =}

  reaction(fib.out) {=
    print(f"fib({self.count}) = {fib.out.value}")
    answers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
    if fib.out.value != answers[self.count]:
      print_error_and_exit(f"Expected {answers[self.count]}")
    self.count += 1
  =}
}
