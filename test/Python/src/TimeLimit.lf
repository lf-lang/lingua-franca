// Test that the stop function can be used to internally impose a
// a time limit.
// This is also used to test performance (number of reactions per second).
// Correct output for this 1, 2, 3, 4.
// Failure for this test is failing to halt or getting the wrong data.
// On a 2.6 GHz Intel Core i7 running MacOS Mojave, using a single core,
// this executes 10,000,000 cycles (two reactions in each cycle) in 0.74 seconds,
// for over 27 million reactions per second.
// This translates to 37 nanoseconds per reaction invocation.
target Python {
    fast: true
};
reactor Clock(offset(0), period(1 sec)) {
    output y;
    timer t(offset, period);
    state count(0);
    reaction(t) -> y {=
        self.count += 1
        # print("Reacting at time ", get_elapsed_logical_time())
        y.set(self.count)
    =}
}
reactor Destination {
    input x;
    state s(1);
    reaction(x) {=
        # print(x.value)
        if x.value != self.s:
            sys.stderr.write("ERROR: Expected {:d} and got {:d}.\n".format(self.s, x.value))
            exit(1)
        self.s += 1
    =}
    reaction(shutdown) {=
        print("**** shutdown reaction invoked.")
        if self.s != 10000002:
            sys.stderr.write("ERROR: Expected 10000002 but got {:d}.\n".format(self.s))
            exit(1)
        print(f"Approx. time per reaction: {get_elapsed_physical_time()/(self.s+1):.1f}ns")
    =}
}
main reactor TimeLimit(period(1 usec)) {
    timer stop(10 secs);
    reaction(stop) {=
        request_stop()
    =}
    c = new Clock(period = period);
    d = new Destination();
    c.y -> d.x;
}
