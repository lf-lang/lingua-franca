# Test that the stop function can be used to internally impose a a time limit. Correct output for
# this 1, 2, 3, 4. Failure for this test is failing to halt or getting the wrong data.
target Python {
  fast: true
}

reactor Clock(offset=0, period = 1 sec) {
  output y
  timer t(offset, period)
  state count = 0

  reaction(t) -> y {=
    self.count += 1
    # print("Reacting at time ", lf.time.logical_elapsed())
    y.set(self.count)
  =}
}

reactor Destination {
  input x
  state s = 1

  reaction(x) {=
    # print(x.value)
    if x.value != self.s:
      sys.stderr.write("ERROR: Expected {:d} and got {:d}.\n".format(self.s, x.value))
      exit(1)
    self.s += 1
  =}

  reaction(shutdown) {=
    print("**** shutdown reaction invoked.")
    if self.s != 12:
      sys.stderr.write("ERROR: Expected 12 but got {:d}.\n".format(self.s))
      exit(1)
  =}
}

main reactor TimeLimit(period = 1 sec) {
  timer stop(10 sec)
  c = new Clock(period=period)
  d = new Destination()
  c.y -> d.x

  reaction(stop) {= request_stop() =}
}
