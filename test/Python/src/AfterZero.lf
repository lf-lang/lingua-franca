target Python {
  fast: false,
  timeout: 3 sec
}

reactor foo {
  input x
  output y

  reaction(x) -> y {=
    y.set(2*x.value)
  =}
}

reactor print {
  state expected_time = 0
  state received = 0
  input x

  reaction(x) {=
    self.received+=1
    elapsed_time = lf.time.logical_elapsed()
    print("Result is " + str(x.value))
    if x.value != 84:
      sys.stderr.write("ERROR: Expected result to be 84.\n")
      exit(1)
    print("Current logical time is: " + str(elapsed_time))
    print("Current microstep is: " + str(lf.tag().microstep))
    print("Current physical time is: " + str(lf.time.physical_elapsed()))
    if elapsed_time != self.expected_time:
      sys.stderr.write("ERROR: Expected logical time to be " + str(self.expected_time) + ".\n")
      exit(2)
    if lf.tag().microstep != 1:
      sys.stderr.write("ERROR: Expected microstep to be 1\n")
      exit(3)
    self.expected_time += SEC(1)
  =}

  reaction(shutdown) {=
    if self.received == 0:
      sys.stderr.write("ERROR: Final reactor received no data.\n")
      exit(3)
  =}
}

main reactor {
  f = new foo()
  p = new print()
  timer t(0, 1 sec)
  f.y -> p.x after 0

  reaction(t) -> f.x {=
    f.x.set(42)
  =}
}
