/**
 * Output events at physical times at least 100, 300, and 600 msec after the start time. This uses a
 * physical action with a minimum interarrival time of 100 msec. The reactor increases the
 * interarrival time with each invocation of the schedule() function. The timestamps of the events
 * will be exact because the physical time at which schedule() is called is always way smaller than
 * the time of the last invocation (or start time) plus the minimum interarrival time. Hence, the
 * minimum interarrival time always determines the time of the next event.
 */
target Python {
  timeout: 1500 msec
}

main reactor SlowingClockPhysical {
  physical action a(100 msec, 100 msec)  # first offset and minimum interarrival time.
  state interval = 100 msec
  state expected_time = 100 msec

  reaction(startup) -> a {=
    self.expected_time = MSEC(100)
    a.schedule(0)
  =}

  reaction(a) -> a {=
    elapsed_logical_time = lf.time.logical_elapsed()
    print("Logical time since start: {:d} nsec.".format(elapsed_logical_time))
    if elapsed_logical_time < self.expected_time:
      sys.stderr.write("ERROR: Expected logical time to be at least: {:d} nsec.\n".format(self.expected_time))
      exit(1)
    self.interval += MSEC(100)
    self.expected_time = MSEC(100) + self.interval
    a.schedule(self.interval)
    print("Scheduling next to occur after: {:d} nsec.".format(self.interval))
  =}

  reaction(shutdown) {=
    if self.expected_time < MSEC(500):
      sys.stderr.write("ERROR: Expected the next expected time to be at least: 500000000 nsec.\n");
      sys.stderr.write("It was: {:d} nsec.\n".format(self.expected_time))
      exit(2)
    print("Success")
  =}
}
