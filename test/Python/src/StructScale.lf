# Source produces a dynamically allocated class object, which it passes to Scale. Scale modifies it
# and passes it to Print.
target Python {
  files: ["include/hello.py"]
}

preamble {= import hello =}

reactor Source {
  output out

  reaction(startup) -> out {= out.set(hello.hello("Earth", 42)) =}
}

# expected parameter is for testing.
reactor TestInput(expected=42) {
  input _in

  reaction(_in) {=
    print("Received: name = {:s}, value = {:d}\n".format(_in.value.name, _in.value.value))
    if _in.value.value != self.expected:
      sys.stderr.write("ERROR: Expected value to be {:d}.\n".format(self.expected))
      exit(1)
  =}
}

reactor Print(scale=2) {
  # Mutable keyword indicates that this reactor wants a writable copy of the input.
  mutable input _in

  output out

  reaction(_in) -> out {=
    _in.value.value *= self.scale;
    out.set(_in.value)
  =}
}

main reactor StructScale {
  s = new Source()
  c = new Print()
  p = new TestInput(expected=84)
  s.out -> c._in
  c.out -> p._in
}
