/**
 * @author Maiko Brants TU Dresden
 *
 * Events are scheduled with increasing additional delays of 0, 100, 300, 600 msec on a logical
 * action with a minimum delay of 100 msec. The use of the logical action ensures the elapsed time
 * jumps exactly from 0 to 100, 300, 600, and 1000 msec.
 *
 * Modeled after the C version of this test.
 */
target Cpp {
  timeout: 1 sec,
  fast: true
}

main reactor SlowingClock {
  logical action a(100 msec)
  state interval: time = 100 msec
  state expected_time: time = 100 msec

  reaction(startup) -> a {= a.schedule(0ns); =}

  reaction(a) -> a {=
    auto elapsed_logical_time = get_elapsed_logical_time();
    reactor::log::Info() << "Logical time since start: " << elapsed_logical_time;
    if(elapsed_logical_time != expected_time) {
      reactor::log::Error() << "Expected time to be: " << expected_time;
      exit(1);
    }
    a.schedule(interval);
    expected_time += 100ms + interval;
    interval += 100ms;
  =}

  reaction(shutdown) {=
    if(expected_time != 1500ms){
      reactor::log::Error() << "Expected the next expected time to be: 1500000000 nsec.";
      reactor::log::Error() << "It was: " << expected_time;
    } else {
      reactor::log::Info() << "Test passes.";
    }
  =}
}
