// Test asynchronous callbacks that trigger a physical action.
target Cpp {
  timeout: 2 sec,
  cmake-include: "AsyncCallback.cmake"
}

main reactor AsyncCallback {
  public preamble {=
    #include <thread>
  =}

  timer t(0, 200 msec)
  state thread: {= std::thread =}
  state expected_time: time = 100 msec
  state toggle: bool = false

  physical action a: int
  state i: int = 0

  reaction(t) -> a {=
    // make sure to join the old thread first
    if(thread.joinable()) {
      thread.join();
    }

    // start new thread
    this->thread = std::thread([&] () {
      // Simulate time passing before a callback occurs
      std::this_thread::sleep_for(100ms);
      // Schedule twice. If the action is not physical, these should
      // get consolidated into a single action triggering. If it is,
      // then they cause two separate triggerings with close but not
      // equal time stamps.
      a.schedule(0);
      a.schedule(0);
    });
  =}

  reaction(a) {=
    auto elapsed_time = get_elapsed_logical_time();
    std::cout << "Asynchronous callback " << i++ << ": Assigned logical "
          << "time greater than start time by " << elapsed_time << std::endl;
    if (elapsed_time <= expected_time) {
      std::cerr << "ERROR: Expected logical time to be larger than "
            << expected_time << std::endl;
      exit(1);
    }
    if (toggle) {
      toggle = false;
      expected_time += 200ms;
    } else {
      toggle = true;
    }
  =}

  reaction(shutdown) {=
    // make sure to join the thread before shutting down
    if(thread.joinable()) {
      thread.join();
    }
  =}
}
