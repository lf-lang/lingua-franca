// This example illustrates local deadline handling. Even numbers are sent by the Source
// immediately, whereas odd numbers are sent after a big enough delay to violate the deadline.
target Cpp {
  timeout: 4 sec
}

reactor Source(period: time = 2 sec) {
  private preamble {=
    #include <thread>
  =}
  output y: int
  timer t(0, period)
  state count: int = 0

  reaction(t) -> y {=
    if (count % 2 == 1) {
      // The count variable is odd.
      // Take time to cause a deadline violation.
      std::this_thread::sleep_for(200ms);
    }
    std::cout << "Source sends: " << count << std::endl;
    y.set(count);
    count++;
  =}
}

reactor Destination(timeout: time = 1 sec) {
  input x: int
  state count: int = 0

  reaction(x) {=
    std::cout << "Destination receives: " << *x.get() << std::endl;
    if (count % 2 == 1) {
      // The count variable is odd, so the deadline should have been
      // violated
      std::cerr << "ERROR: Failed to detect deadline." << std::endl;
      exit(1);
    }
    count++;
  =} deadline(timeout) {=
    std::cout << "Destination deadline handler receives: "
          << *x.get() << std::endl;
    if (count % 2 == 0) {
      // The count variable is even, so the deadline should not have
      // been violated.
      std::cerr << "ERROR: Deadline handler invoked without deadline "
            << "violation." << std::endl;
      exit(2);
    }
    count++;
  =}
}

main reactor {
  s = new Source()
  d = new Destination(timeout = 200 msec)
  s.y -> d.x
}
