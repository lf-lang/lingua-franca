// Check for speedup of multithreaded execution on multicore machines. Each instance of TakeTime
// takes 200 ms to transport the input to the output. Four of them are instantiated. Note that
// without parallel execution, there is no way this can keep up with real time since in every 200
// msec cycle it has 800 msec of work to do. On a quad-core machine, however, it does pretty well,
// completing 800 msec of work in about 225 msec. NOTE: This is the non-threaded version, showing
// that without threads, this takes more than 800 msec to complete 200 msec of logical time.
target Cpp {
  timeout: 2 sec
}

reactor Source {
  timer t(0, 200 msec)
  output out: int
  state s: int = 0

  reaction(t) -> out {=
    out.set(s);
    s++;
  =}
}

reactor Computation {
  private preamble {=
    #include <thread>
  =}
  input in: int
  output out: int

  reaction(in) -> out {=
    std::this_thread::sleep_for(200ms);
    out.set(in.get());
  =}
}

reactor Destination {
  state s: int = 0
  input[4] in: int

  reaction(in) {=
    int sum = 0;
    for (std::size_t i = 0; i < in.size(); i++) {
      if (in[i].is_present()) sum += *in[i].get();
    }
    std::cout << "Sum of received: " << sum << '\n';
    if (sum != s) {
      std::cerr << "ERROR: Expected " << s << '\n';
      exit(1);
    }
    s += 4;
  =}
}

main reactor {
  a = new Source()
  t = new[4] Computation()
  b = new Destination()
  (a.out)+ -> t.in
  t.out -> b.in
}
