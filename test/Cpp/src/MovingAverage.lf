// Demonstration of a state variable that is a fixed size list. The MovingAverage reactor computes
// the moving average of the last four inputs and produces that as output. The source is a counting
// sequence.
target Cpp {
  timeout: 1 sec,
  fast: true
}

reactor Source {
  output out: double
  state count: int = 0
  timer clock(0, 200 msec)

  reaction(clock) -> out {=
    out.set(count);
    count++;
  =}
}

reactor MovingAverageImpl {
  state delay_line: double[3]{0.0, 0.0, 0.0}
  state index: int = 0
  input in: double
  output out: double

  reaction(in) -> out {=
    // Calculate the output.
    double sum = *in.get();
    for (int i = 0; i < 3; i++) {
      sum += delay_line[i];
    }
    out.set(sum/4.0);

    // Insert the input in the delay line.
    delay_line[index] = *in.get();

    // Update the index for the next input.
    index++;
    if (index >= 3) {
      index = 0;
    }
  =}
}

reactor Print {
  input in: double
  state count: int = 0

  reaction(in) {=
    std::cout << "Received: " << *in.get() << '\n';
    constexpr double expected[6] = {0.0, 0.25, 0.75, 1.5, 2.5, 3.5};
    if (*in.get() != expected[count]) {
      std::cerr << "ERROR: Expected " << expected[count] << '\n';
      exit(1);
    }
    count++;
  =}

  reaction(shutdown) {=
    if(count != 6) {
      std::cerr << "ERROR: Expected 6 values but got " << count << '\n';
      exit(2);
    }
  =}
}

main reactor MovingAverage {
  s = new Source()
  m = new MovingAverageImpl()
  p = new Print()
  s.out -> m.in
  m.out -> p.in
}
