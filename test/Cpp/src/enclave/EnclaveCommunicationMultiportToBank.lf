target Cpp {
  timeout: 1 s,
  workers: 1
}

reactor Src {
  timer t(0, 100 ms)
  output[4] out: int
  state counter: int = 0

  reaction(t) -> out {=
    for (auto& port : out) {
      port.set(counter++);
    }
  =}
}

reactor Sink(bank_index: std::size_t = 0) {
  timer t(0, 50 ms)
  input in: int
  state received: bool = false
  state iteration: int = 0

  reaction(in) {=
    received = true;
    auto value = *in.get();
    reactor::log::Info() << "Received " << value << " at " << get_elapsed_logical_time();
    auto expected = 100ms * iteration;
    if (value != iteration*4 + bank_index) {
      reactor::log::Error() << "Expected to recive " << iteration*4 + bank_index;
      exit(1);
    }
    iteration++;
    if (get_elapsed_logical_time() != expected) {
      reactor::log::Error() << "Expected value at " << expected;
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if(!received) {
      reactor::log::Error() << "Nothing received.";
      exit(1);
    }
  =}

  reaction(t) {= reactor::log::Info() << "Tick"; =}
}

main reactor {
  @enclave
  src = new Src()
  @enclave
  sink = new[4] Sink()

  src.out -> sink.in
}
