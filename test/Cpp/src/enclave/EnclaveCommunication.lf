target Cpp {
  timeout: 1 s,
  workers: 1
}

reactor Src {
  timer t(0, 100 ms)
  output out: int
  state counter: int = 0

  reaction(t) -> out {= out.set(counter++); =}
}

reactor Sink {
  input in: int
  state received: bool = false

  reaction(in) {=
    received = true;
    auto value = *in.get();
    reactor::log::Info() << "Received " << value;
    auto expected = 100ms * value;
    if (get_elapsed_logical_time() != expected) {
      reactor::log::Error() << "Expecded value at " << expected << " but received it at " << get_elapsed_logical_time();
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if(!received) {
      reactor::log::Error() << "Nothing received.";
      exit(1);
    }
  =}
}

main reactor {
  @enclave
  src = new Src()
  @enclave
  sink = new Sink()

  src.out -> sink.in
}
