// The purpose of this test is to check that the downstream enclave can progress, even if there are
// only sparse upstream events.
target Cpp {
  timeout: 10 s,
  workers: 1
}

reactor Src {
  public preamble {=
    #include <thread>
  =}

  state thread: std::thread{}

  physical action a: int
  output out: int

  reaction(startup) -> a {=
    // start new thread
    this->thread = std::thread([&] () {
      for (int i{0}; i < 3; i++) {
        a.schedule(i);
        std::this_thread::sleep_for(2s);
      }
    });
  =}

  reaction(a) -> out {= out.set(a.get()); =}

  reaction(shutdown) {=
    // make sure to join the thread before shutting down
    if(thread.joinable()) {
      thread.join();
    }
  =}
}

reactor Sink {
  timer t(0, 100 ms)
  input in: int
  state received: bool = false

  reaction(in) {=
    received = true;
    auto value = *in.get();
    reactor::log::Info() << "Received " << value;
    auto expected = 2s * value;
    if (get_elapsed_logical_time() < expected) {
      reactor::log::Error() << "Expected value not before " << expected << " but received it at " << get_elapsed_logical_time();
      exit(1);
    }
  =}

  reaction(shutdown) {=
    if(!received) {
      reactor::log::Error() << "Nothing received.";
      exit(1);
    }
  =}

  reaction(t) {=
    reactor::log::Info() << "Tick - " << "logical time: " << get_elapsed_logical_time()
               << "; physical time: " << get_elapsed_physical_time();
  =} deadline(1 s) {=
    reactor::log::Error() << "Deadline violated.";
    exit(2);
  =}
}

main reactor {
  @enclave
  src = new Src()
  @enclave
  sink = new Sink()

  src.out -> sink.in after 2 s
}
