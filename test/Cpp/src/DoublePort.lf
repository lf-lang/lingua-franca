/**
 * Test the case where two upstream reactors pass messages to a downstream reactor on two different
 * ports. One message carries a microstep delay relative to the other.
 *
 * @author Maiko Brants
 */
target Cpp {
  timeout: 900 msec,
  fast: true
}

import Count from "lib/Count.lf"

reactor CountMicrostep {
  state count: int = 1
  output out: int
  logical action act: int
  timer t(0, 1 sec)

  reaction(t) -> act {=
    act.schedule( count);
    count++;
  =}

  reaction(act) -> out {= out.set(act.get()); =}
}

reactor Print {
  input in: int
  input in2: int

  reaction(in, in2) {=
    if(in.is_present()){
      reactor::log::Info() << "At tag (" << get_elapsed_logical_time() << ", " << environment()->logical_time().micro_step()
      << "), received in = " << *in.get();
    } else if (in2.is_present()){
      reactor::log::Info() << "At tag (" << get_elapsed_logical_time() << ", " << environment()->logical_time().micro_step()
      << "), received in2 = " << *in2.get();
    }


    if ( in.is_present() && in2.is_present()) {
      reactor::log::Error() << "ERROR: invalid logical simultaneity.";
      exit(1);
    }
  =}

  reaction(shutdown) {=
    reactor::log::Info() << "SUCCESS: messages were at least one microstep apart.";
  =}
}

main reactor DoublePort {
  c = new Count()
  cm = new CountMicrostep()
  p = new Print()
  c.c -> p.in
  cm.out -> p.in2
}
