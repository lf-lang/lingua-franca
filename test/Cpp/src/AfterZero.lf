// This checks that the after keyword adjusts logical time, not using physical time.
target Cpp {
  fast: false,
  timeout: 3 sec
}

reactor foo {
  input x: int
  output y: int

  reaction(x) -> y {= y.set(2*(*x.get())); =}
}

reactor print {
  state expected_time: time = 0
  state i: int = 0
  input x: int

  reaction(x) {=
    i++;
    auto elapsed_time = get_elapsed_logical_time();
    std::cout << "Result is " << *x.get() << '\n';
    if (*x.get() != 84) {
      std::cerr << "ERROR: Expected result to be 84.\n";
      exit(1);
    }
    std::cout << "Current logical time is: " << elapsed_time << '\n';
    std::cout << "Current microstep is: " << get_microstep() << '\n';
    std::cout << "Current physical time is: " << get_elapsed_physical_time() << '\n';
    if (elapsed_time != expected_time) {
      std::cerr << "ERROR: Expected logical time to be " << expected_time << '\n';
      exit(2);
    }
    if (get_microstep() != 1) {
      std::cerr << "Expected microstrp to be 1\n";
      exit(3);
    }
    expected_time += 1s;
  =}

  reaction(shutdown) {=
    if (i == 0) {
      std::cerr << "ERROR: Final reactor received no data.\n";
      exit(3);
    }
  =}
}

main reactor {
  f = new foo()
  p = new print()
  timer t(0, 1 sec)
  f.y -> p.x after 0

  reaction(t) -> f.x {=
    f.x.set(42);
    std::cout << "Timer!\n";
  =}
}
