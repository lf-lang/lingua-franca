// Test reacting to and reading outputs from a contained reactor bank with a multiport
target Cpp

reactor Contained(bank_index: size_t = 0) {
  output[3] out: unsigned

  reaction(startup) -> out {=
    for (size_t i = 0; i < 3; i++) {
      out[i].set(bank_index * i);
    }
  =}
}

main reactor {
  c = new[3] Contained()
  state count: int = 0

  reaction(startup) c.out {=
    for (size_t i = 0; i < c.size(); i++) {
      for (size_t j = 0; j < c[i].out.size(); j++) {
        unsigned result = *c[i].out[j].get();
        std::cout << "Startup reaction reading output of contained "
              << "reactor: " << result << std::endl;
        if (result != i * j) {
          std::cout << "FAILURE: expected " << i * j << std::endl;
          exit(2);
        }
      }
    }
    count++;
  =}

  reaction(c.out) {=
    for (size_t i = 0; i < c.size(); i++) {
      for (size_t j = 0; j < c[i].out.size(); j++) {
        unsigned result = *c[i].out[j].get();
        std::cout << "Reading output of contained reactor: " << result << std::endl;
        if (result != i * j) {
          std::cout << "FAILURE: expected " << i * j << std::endl;
          exit(2);
        }
      }
    }
    count++;
  =}

  reaction(startup, c.out) {=
    for (size_t i = 0; i < c.size(); i++) {
      for (size_t j = 0; j < c[i].out.size(); j++) {
        unsigned result = *c[i].out[j].get();
        std::cout << "Alternate triggering reading output of contained "
            << "reactor: " << result << std::endl;
        if (result != i * j) {
          std::cout << "FAILURE: expected " << i * j << std::endl;
          exit(2);
        }
      }
    }
    count++;
  =}

  reaction(shutdown) {=
    if (count != 3) {
      std::cerr << "ERROR: One of the reactions failed to trigger."
            << std::endl;
      exit(1);
    }
  =}
}
