target Cpp {
  timeout: 1 s
}

reactor Producer {
  timer t(0, 100 ms)

  output[10] out: int

  state odd: bool(true)

  reaction(t) -> out {=
    for (int i{odd ? 1 : 0}; i < 10; i += 2) {
      out[i].set(i);
    }

    odd = !odd;
  =}
}

reactor Consumer {
  state odd: bool(true)
  input[10] in: int

  reaction(in) {=
    reactor::log::Info() << "Received:";
    for (int i{0}; i < 10; i++) {
      if (in[i].is_present()) {
        if (odd && i%2 == 0) {
          reactor::log::Error() << "Expected values only on odd ports, but received one on port " << i;
          exit(1);
        }
        if (!odd && i%2 == 1) {
          reactor::log::Error() << "Expected values only on even ports, but received one on port " << i;
          exit(1);
        }
        reactor::log::Info() << "- " << i;
      }
    }
  =}

  reaction(in) {=
    int count = 0;
    int last = -1;
    for (int i : in.present_indices_sorted()) {
      count++;
      if (odd && i%2 == 0) {
        reactor::log::Error() << "Expected values only on odd ports, but received one on port " << i;
        exit(1);
      }
      if (!odd && i%2 == 1) {
        reactor::log::Error() << "Expected values only on even ports, but received one on port " << i;
        exit(1);
      }
      if (i < last) {
        reactor::log::Error() << "Received index out of order! " << i << " after " << last;
        exit(1);
      }
    }
    for (int i : in.present_indices_unsorted()) {
      count++;
      if (odd && i%2 == 0) {
        reactor::log::Error() << "Expected values only on odd ports, but received one on port " << i;
        exit(1);
      }
      if (!odd && i%2 == 1) {
        reactor::log::Error() << "Expected values only on even ports, but received one on port " << i;
        exit(1);
      }
    }
    if (count != 10) {
      reactor::log::Error() << "Expected count to be 10, but got  " << count;
      exit(1);
    }

    odd = !odd;
  =}
}

main reactor {
  c = new Consumer()
  p = new Producer()

  p.out -> c.in
}
