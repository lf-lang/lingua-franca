// Source produces a dynamically allocated struct, which it passes to Scale. Scale requests a
// writable copy. It modifies it and passes it to Print. It gets freed after Print is done with it.
target Cpp

import Source, Print from "StructPrint.lf"

public preamble {=
  #include "include/hello.h"
=}

reactor Scale(scale: int = 2) {
  input in: Hello

  output out: Hello

  reaction(in) -> out {=
    auto hello = in.get().get_mutable_copy();
    hello->value *= scale;
    out.set(std::move(hello));
  =}
}

main reactor StructScale {
  s = new Source()
  c = new Scale()
  p = new Print(expected_value=84)
  s.out -> c.in
  c.out -> p.in
}
