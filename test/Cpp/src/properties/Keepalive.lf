target Cpp {
    keepalive: true,
    cmake-include: "../concurrent/AsyncCallback.cmake"
}

main reactor {
    public preamble {=
        #include <thread>
    =}

    state thread: std::thread

    physical action a
    state success: bool{false}

    reaction(startup) -> a {=
        // start new thread
        this->thread = std::thread([&] () {
            // Simulate time passing before a callback occurs
            std::this_thread::sleep_for(1s);
            a.schedule();
        });
    =}

    reaction(a) {=
        success = true;
        environment()->sync_shutdown();
    =}

    reaction(shutdown) {=
        if (success) {
            std::cout << "SUCCESS!\n";
        } else {
            std::cout << "ERROR: reaction was not invoked!\n";
            exit(1);
        }

        // make sure to join the thread before shutting down
        if(thread.joinable()) {
            thread.join();
        }
    =}
}
