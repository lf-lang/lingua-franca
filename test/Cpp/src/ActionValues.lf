// Test logical action with delay.
target Cpp

main reactor ActionValues {
  state r1done: bool = false
  state r2done: bool = false
  logical action act(100 msec): int

  reaction(startup) -> act {=
    act.schedule(100);    // scheduled in 100 ms
    std::chrono::milliseconds delay(50);
    act.schedule(-100, delay); // scheduled in 150 ms, value is overwritten
  =}

  reaction(act) {=
    auto elapsed = get_elapsed_logical_time();

    std::cout << "[@" << elapsed << '\n';
    std::cout << "  action transmitted: " << *act.get() << '\n';
    std::cout << "]\n";

    if (elapsed == 100ms) {
      if (*act.get() != 100) {
        std::cerr << "ERROR: Expected action value to be 100\n";
        exit(1);
      }
      r1done = true;
    } else {
      if (elapsed != 150ms) {
        std::cerr << "ERROR: Unexpected reaction invocation at " << elapsed << '\n';
        exit(1);
      }
      if (*act.get() != -100) {
        std::cerr << "ERROR: Expected action value to be -100\n";
        exit(1);
      }
      r2done = true;
    }
  =}

  reaction(shutdown) {=
    if (!r1done || !r2done) {
      std::cerr << "ERROR: Expected 2 reaction invocations\n";
      exit(1);
    }
  =}
}
