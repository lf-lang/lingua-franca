// Test logical action with delay.
target Cpp

reactor GeneratedDelay {
  input y_in: int
  output y_out: int
  state y_state: int = 0
  logical action act(100 msec): void

  reaction(y_in) -> act {=
    y_state = *y_in.get();
    act.schedule();
  =}

  reaction(act) -> y_out {= y_out.set(y_state); =}
}

reactor Source {
  output out: int

  reaction(startup) -> out {= out.set(1); =}
}

reactor Sink {
  input in: int

  reaction(in) {=
    auto elapsed_logical = get_elapsed_logical_time();
    auto logical = get_logical_time();
    auto physical = get_physical_time();
    std::cout << "logical time: " << logical << '\n';
    std::cout << "physical time: " << physical << '\n';
    std::cout << "elapsed logical time: " << elapsed_logical << '\n';
    if (elapsed_logical != 100ms) {
      std::cerr << "ERROR: Expected 100 msecs but got " << elapsed_logical << '\n';
      exit(1);
    } else {
      std::cout << "SUCCESS. Elapsed logical time is 100 msec.\n";
    }
  =}
}

main reactor ActionDelay {
  source = new Source()
  sink = new Sink()
  g = new GeneratedDelay()

  source.out -> g.y_in
  g.y_out -> sink.in
}
