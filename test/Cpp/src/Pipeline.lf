target Cpp {
  timeout: 2 sec
}

import Computation from "concurrent/Threaded.lf"

reactor Print {
  input in: int
  state count: int = 0

  reaction(in) {=
    std::cout << "Received: " << *in.get() << '\n';
    if (*in.get() != count) {
      std::cerr << "ERROR: Expected " << count << '\n';
      exit(1);
    }
    count++;
  =}

  reaction(shutdown) {=
    if (count == 1) {
      std::cerr << "ERROR: Final reactor received no data.\n";
      exit(3);
    }
  =}
}

main reactor Pipeline {
  timer t(0, 200 msec)
  state count: int = 0

  c1 = new Computation()
  c2 = new Computation()
  c3 = new Computation()
  c4 = new Computation()
  p = new Print()

  c1.out -> c2.in after 200 msec
  c2.out -> c3.in after 200 msec
  c3.out -> c4.in after 200 msec
  c4.out -> p.in

  reaction(t) -> c1.in {= c1.in.set(count++); =}
}
