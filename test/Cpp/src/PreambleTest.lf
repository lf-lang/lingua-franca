target Cpp

// This is used to test for nested unused imports in PreambleImport.lf
import Imported from "lib/Imported.lf"

public preamble {=
  int foo();
=}

private preamble {=
  int foo() {
    return 42;
  }
=}

// This is a dummy reactor to test importing of preambles in PreambleImport.lf
reactor PreambleFoo {
}

main reactor {
  // This declaration is required on the public reactor interface and therefore needs to be placed
  // in the generated header. This goes to Preamble/Preamble.hh.
  public preamble {=
    struct MyStruct {
      int foo;
      std::string bar;
    };
  =}
  // this is only used inside reactions and therefore goes to the generated source file This
  // function is only used inside a reaction and therefore is part of the private interface.
  // Moreover, we need to make sure that the function is only defined once within a source file.
  // This goes to Preamble/Preamble.cc
  private preamble {=
    int add_42(int i) {
      return i + foo();
    }
  =}
  logical action a: MyStruct

  reaction(startup) -> a {=
    a.schedule({add_42(foo()), "baz"});
  =}

  reaction(a) {=
    auto& value = *a.get();
    std::cout << "Received " << value.foo << " and '" << value.bar << "'\n";
    if (value.foo == 84 && value.bar == "baz") {
      std::cout << "Success!\n";
    } else {
      std::cout << "Error!\n";
      exit(1);
    }
  =}
}
