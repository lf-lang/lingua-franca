// Test logical action with delay.
target TypeScript

reactor GeneratedDelay {
  input y_in: number
  output y_out: number
  state y_state: number = 0
  logical action act(100 msec)

  reaction(y_in) -> act {=
    y_state = y_in as number;
    actions.act.schedule(0, null);
  =}

  reaction(act) -> y_out {= y_out = y_state; =}
}

reactor Source {
  output out: number

  reaction(startup) -> out {= out = 1; =}
}

reactor Sink {
  input x: number

  reaction(x) {=
    const elapsed_logical = util.getElapsedLogicalTime();
    const logical = util.getCurrentLogicalTime();
    const physical = util.getCurrentPhysicalTime();
    console.log("Logical, physical, and elapsed logical: " + logical + physical + elapsed_logical);
    const oneHundredMsec = TimeValue.msec(100);
    if (!elapsed_logical.isEqualTo(oneHundredMsec)) {
      util.requestErrorStop("Expected " + oneHundredMsec + " but got " + elapsed_logical);
    } else {
      console.log("SUCCESS. Elapsed logical time is " + elapsed_logical);
    }
  =}
}

main reactor ActionDelay {
  source = new Source()
  sink = new Sink()
  g = new GeneratedDelay()

  source.out -> g.y_in
  g.y_out -> sink.x
}
