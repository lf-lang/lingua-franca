// This example illustrates local deadline handling. Even numbers are sent by the Source
// immediately, whereas odd numbers are sent after a big enough delay to violate the deadline.
target TypeScript {
  timeout: 4 sec
}

// run = "bin/Deadline -timeout 4 sec"
reactor Source(period: time = 2 sec) {
  output y: number
  timer t(0, period)
  state count: number = 0

  reaction(t) -> y {=
    if (2 * Math.floor(count / 2) != count){
      // The count variable is odd.
      // Busy wait 0.2 seconds to cause a deadline violation.
      let initialElapsedTime = util.getElapsedPhysicalTime();
      console.log("****: " + initialElapsedTime);
      while (util.getElapsedPhysicalTime().isEarlierThan(initialElapsedTime.add(TimeValue.msec(400))));
      console.log("****: " + util.getElapsedPhysicalTime());
    }
    console.log("Source sends: " + count);
    y = count;
    count++;
  =}
}

reactor Destination(timeout: time = 1 sec) {
  input x: number
  state count: number = 0

  reaction(x) {=
    console.log("Destination receives: " + x);
    if (2 * Math.floor(count / 2) != count) {
      // The count variable is odd, so the deadline should have been violated.
      util.requestErrorStop("ERROR: Failed to detect deadline.")
    }
    count++;
  =} deadline(timeout) {=
    console.log("Destination deadline handler receives: " + x);
    if (2 * Math.floor(count / 2) == count) {
      // The count variable is even, so the deadline should not have been violated.
      util.requestErrorStop("ERROR: Deadline miss handler invoked without deadline violation.")
    }
    count++;
  =}
}

main reactor Deadline {
  s = new Source()
  d = new Destination(timeout = 200 msec)
  s.y -> d.x
}
