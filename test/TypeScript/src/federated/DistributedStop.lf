/**
 * Test for util.requestStop() in federated execution with centralized coordination.
 *
 * @author Soroush Bateni
 * @author Byeong-gil Jun
 */
target TypeScript

reactor Sender {
  output out: number
  timer t(0, 1 usec)
  logical action act
  state reaction_invoked_correctly: boolean = false

  reaction(t, act) -> out, act {=
    console.log(`Sending 42 at (${util.getElapsedLogicalTime()}, `
          + `${util.getCurrentTag().microstep}).`);
    out = 42;
    if (util.getCurrentTag().microstep === 0) {
      // Instead of having a separate reaction
      // for 'act' like Stop.lf, we trigger the
      // same reaction to test util.requestStop() being
      // called multiple times
      actions.act.schedule(0, null);
    }
    if (util.getElapsedLogicalTime().isEqualTo(TimeValue.usec(1))) {
      // Call util.requestStop() both at (1 usec, 0) and
      // (1 usec, 1)
      console.log(`Requesting stop at (${util.getElapsedLogicalTime()}, `
            + `${util.getCurrentTag().microstep}).`);
      util.requestStop();
    }

    const oneUsec1 = util.getStartTag().getLaterTag(TimeValue.usec(1)).getMicroStepsLater(1);
    if (oneUsec1.isSimultaneousWith(util.getCurrentTag())) {
      // The reaction was invoked at (1 usec, 1) as expected
      reaction_invoked_correctly = true;
    } else if (oneUsec1.isSmallerThan(util.getCurrentTag())) {
      // The reaction should not have been invoked at tags larger than (1 usec, 1)
      util.requestErrorStop("ERROR: Invoked reaction(t, act) at tag bigger than shutdown.");
    }
  =}

  reaction(shutdown) {=
    if (!util.getElapsedLogicalTime().isEqualTo(TimeValue.usec(1)) ||
      util.getCurrentTag().microstep !== 1) {
      util.requestErrorStop(`ERROR: Sender failed to stop the federation in time.`
        + `Stopping at (${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep}).`);
    } else if (reaction_invoked_correctly === false) {
      util.requestErrorStop("ERROR: Sender reaction(t, act) was not invoked at (1usec, 1)."
        + `Stopping at (${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep})`);
    } else {
      console.log(`SUCCESS: Successfully stopped the federation at `
        + `(${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep}).`);
    }
  =}
}

reactor Receiver(
    // Used in the decentralized variant of the test
    stp_offset: time = 10 msec) {
  input in1: number
  state reaction_invoked_correctly: boolean = false

  reaction(in1) {=
    console.log(`Received ${in1} at (${util.getElapsedLogicalTime()}, `
    + `${util.getCurrentTag().microstep}`);
    if (util.getElapsedLogicalTime().isEqualTo(TimeValue.usec(1))) {
      console.log(`Requesting stop at (${util.getElapsedLogicalTime()}, `
      + `${util.getCurrentTag().microstep}`);
      util.requestStop();
      // The receiver should receive a message at tag
      // (1 usec, 1) and trigger this reaction
      reaction_invoked_correctly = true;
    }

    const oneUsec1 = util.getStartTag().getLaterTag(TimeValue.usec(1)).getMicroStepsLater(1);
    if (oneUsec1.isSmallerThan(util.getCurrentTag())) {
      reaction_invoked_correctly = false;
    }
  =}

  reaction(shutdown) {=
    // Sender should have requested stop earlier than the receiver.
    // Therefore, the shutdown events must occur at (1 usec, 0) on the
    // receiver.
    if (!util.getElapsedLogicalTime().isEqualTo(TimeValue.usec(1)) ||
      util.getCurrentTag().microstep !== 1) {
      util.requestErrorStop(`ERROR: Receiver failed to stop the federation at the right time. `
      + `Stopping at (${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep}).`);
    } else if (reaction_invoked_correctly === false) {
      util.requestErrorStop("Receiver reaction(in) was not invoked the correct number of times. "
      + `Stopping at (${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep})`);
    }
    console.log(`SUCCESS: Successfully stopped the federation at `
      + `(${util.getElapsedLogicalTime()}, ${util.getCurrentTag().microstep}).`);
  =}
}

federated reactor DistributedStop {
  sender = new Sender()
  receiver = new Receiver()

  sender.out -> receiver.in1
}
