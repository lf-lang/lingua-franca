/**
 * This tests a feedback loop with physical actions and centralized coordination.
 *
 * @author Edward A. Lee
 * @author Hokeun Kim
 */
target TypeScript {
  timeout: 5 sec
}

reactor Looper(incr: number = 1, delay: time = 0 msec) {
  input inp: number
  output out: number
  physical action a(delay)
  state count: number = 0

  preamble {=
  let stop = false;
  // Function to trigger an action once every second.
  function ping(act: any) {
    if (!stop) {
    console.log("Scheduling action.");
    act.schedule(0, null);
    setTimeout(ping, 1000, act);
    }
  }
  =}

  reaction(startup) -> a {=
  // Start the ping function for triggering an action every second.
  console.log("Starting ping function.");
  ping(actions.a);
  =}

  reaction(a) -> out {=
  out = count;
  count += incr;
  =}

  reaction(inp) {=
  let logical = util.getCurrentLogicalTime();
  let physical = util.getCurrentPhysicalTime();

  let time_lag = physical.subtract(logical);

  console.log("Received " + inp + ". Logical time is behind physical time by " + time_lag + ".");
  =}

  reaction(shutdown) {=
  console.log("******* Shutdown invoked.");
  // Stop the ping function that is scheduling actions.
  stop = true;
  if (count != 5 * incr) {
    util.requestErrorStop("Failed to receive all five expected inputs.");
  }
  =}
}

federated reactor LoopDistributedCentralized(delay: time = 0) {
  left = new Looper()
  right = new Looper(incr = -1)
  left.out -> right.inp
  right.out -> left.inp
}
