/**
 * Basic benchmark from the Savina benchmark suite that is intended to measure message-passing
 * overhead.
 *
 * This version is distributed, communicating using physical connections over sockets.
 *
 * This is based on https://www.scala-lang.org/old/node/54 See
 * https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * This is a distributed version, where Ping and Pong run in separate programs and can be run on
 * different machines.
 *
 * To get a sense, some (informal) results for 1,000,000 ping-pongs on my Mac:
 * - Unthreaded: 97 msec
 * - Threaded: 265 msec
 * - Distributed: 53 seconds
 *
 * There is no parallelism in this application, so it does not benefit from being being distributed.
 *
 * These measurements are total execution time, including startup and shutdown, of all three
 * programs.
 *
 * @author Edward A. Lee
 * @author Byeong-gil Jun
 */
target TypeScript

reactor Ping(count: number = 10) {
  input receive: number
  output send: number
  state pingsLeft: number = count
  logical action serve

  reaction(startup, serve) -> send {=
  console.log(`At logical time ${util.getElapsedLogicalTime()}, Ping sending ${pingsLeft}.`);
  send = pingsLeft--;
  =}

  reaction(receive) -> serve {=
  if (pingsLeft > 0) {
    actions.serve.schedule(0, null);
  } else {
    util.requestStop();
  }
  =}
}

reactor Pong(expected: number = 10) {
  input receive: number
  output send: number
  state count: number = 0

  reaction(receive) -> send {=
  count++;
  console.log(`At logical time ${util.getElapsedLogicalTime()}, Pong receivedd ${receive}.`);
  send = receive;
  if (count === expected) {
    util.requestStop();
  }
  =}

  reaction(shutdown) {=
  if (count !== expected) {
    util.requestErrorStop(`Pong expected to received ${expected} inputs, but it received ${count}.`);
  }
  console.log(`Pong received ${count} pings.`);
  =}
}

federated reactor(count: number = 10) {
  ping = new Ping(count = count)
  pong = new Pong(expected = count)
  ping.send ~> pong.receive
  pong.send ~> ping.receive
}
