/** This checks communication between federates */
target TypeScript

reactor Ping(count: number = 10) {
  input receive: number
  output send: number
  state pingsLeft: number = count
  logical action serve

  reaction(startup, serve) -> send {=
  console.log(`At logical time ${util.getElapsedLogicalTime()}, Ping sending ${pingsLeft}`);
  send = pingsLeft;
  pingsLeft = pingsLeft - 1;
  =}

  reaction(receive) -> serve {=
  if (pingsLeft > 0){
    actions.serve.schedule(0, null);
  }
  else{
    util.requestStop();
  }
  =}
}

reactor Pong(expected: number = 10) {
  input receive: number
  output send: number
  state count: number = 0

  reaction(receive) -> send {=
  count += 1;
  console.log(`At logical time ${util.getElapsedLogicalTime()}, Pong received ${receive}`)
  send = receive;
  if (count == expected){
    util.requestStop();
  }
  =}

  reaction(shutdown) {=
  if (count != expected){
    util.requestErrorStop(`Pong expected to receive ${expected} inputs, but it received ${count}`);
  }
  console.log(`Pong received ${count} pings.`);
  =}
}

federated reactor PingPongDistributed(count: number = 10) {
  ping = new Ping(count = count)
  pong = new Pong(expected = count)
  ping.send -> pong.receive
  pong.send -> ping.receive
}
