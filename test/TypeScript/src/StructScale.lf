// Source produces a dynamically allocated struct, which it passes to Scale. Scale requests a
// writable copy, which, instead of copying, it just gets ownership of the original struct. It
// modifies it and passes it to Print. It gets freed after Print is done with it.
target TypeScript

import Print, Source from "StructPrint.lf"

reactor Scale(scale: number = 2) {
  // Mutable keyword indicates that this reactor wants a writable copy of the input.
  mutable input x: hello_t
  output out: hello_t

  reaction(x) -> out {=
    x = x as hello_t
    x.value *= scale;
    out = x;
  =}
}

main reactor StructScale {
  s = new Source()
  c = new Scale()
  p = new Print(expected=84)
  s.out -> c.x
  c.out -> p.x
}
