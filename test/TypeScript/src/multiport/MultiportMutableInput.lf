// Source produces a ints on a multiport, which it passes to Scale. Scale requests a writable copy.
// It modifies it and passes it to Print. It gets freed after Print is done with it.
target TypeScript

reactor Source {
  output[2] out: number

  reaction(startup) -> out {=
    out[0] = 21;
    out[1] = 42;
  =}
}

// The scale parameter is just for testing.
reactor Print(scale: number = 1) {
  input[2] inp: number

  reaction(inp) {=
    let expected = 42;
    for (let j = 0; j < 2; j++) {
      console.log("Received on channel " + j + ": " + inp[j]);
      if (inp[j] != expected) {
        util.requestErrorStop("ERROR: Expected " + expected + "!");
      }
      expected *=2;
    }
  =}
}

reactor Scale(scale: number = 2) {
  mutable input[2] inp: number
  output[2] out: number

  reaction(inp) -> out {=
    for (let j = 0; j < 2; j++) {
      // Modify the input, allowed because mutable.
      (inp[j] as number) *= scale;
      out[j] = inp[j] as number;
    }
  =}
}

main reactor {
  s = new Source()
  c = new Scale()
  p = new Print(scale=2)
  s.out -> c.inp
  c.out -> p.inp
}
