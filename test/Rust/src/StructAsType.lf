// Source produces a struct directly, rather than a pointer to a struct.
target Rust

reactor Source {
  output out: Hello

  preamble {=
    pub struct Hello {
      pub name: String,
      pub value: i32,
    }
  =}

  reaction(startup) -> out {=
    // Create the struct on the stack and then copy
    // it to the output
    ctx.set(out, Hello { name: "Earth".into(), value: 42 })
  =}
}

// expected parameter is for testing.
reactor Print(expected: i32 = 42) {
  input inp: {= super::source::Hello =}
  state expected: i32 = expected

  reaction(inp) {=
    ctx.use_ref_opt(inp, |hello| {
      println!("Received: name=\"{}\", value={}.", hello.name, hello.value);
      if hello.value != self.expected {
        panic!("ERROR: Expected value to be {}.\n", self.expected);
      }
    });
  =}
}

main reactor StructAsType {
  s = new Source()
  p = new Print()
  s.out -> p.inp
}
