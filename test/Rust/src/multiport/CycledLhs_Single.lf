// test a cycled connection which has ports of the same reactor on the LHS and rhs (multiport)+ ->
// multiport
target Rust {
  timeout: 16 usec
}

reactor Test {
  output[2] out: u32
  input[4] in: u32
  logical action act: {= (u32, u32) =}
  state last: u32 = 1

  reaction(startup) -> act {= ctx.schedule_with_v(act, Some((0, 1)), after!(1 us)); =}

  reaction(act) -> out {=
    let (a, b) = ctx.get(act).unwrap();
    ctx.set(&mut out[0], a);
    ctx.set(&mut out[1], b);
  =}

  reaction(in) -> act {=
    // compute the nth fibonacci number
    // r#in is [fib(n-2), fib(n-1), fib(n-2), fib(n-1)]
    let fib_n_1 = ctx.get(&r#in[1]).unwrap();
    let fib_n_2 = ctx.get(&r#in[0]).unwrap();
    let fib_n: u32 = fib_n_2 + fib_n_1;
    assert_eq!(ctx.get(&r#in[2]).unwrap(), fib_n_2);
    assert_eq!(ctx.get(&r#in[3]).unwrap(), fib_n_1);
    println!("{} + {} = {}", fib_n_2, fib_n_1, fib_n);
    self.last = fib_n;
    // send fib(n-1) and fib(n)
    ctx.schedule_with_v(act, Some((fib_n_1, fib_n)), after!(1 us));
  =}

  reaction(shutdown) {=
    assert_eq!(self.last, 1597);
    println!("success");
  =}
}

/**
 * 0 + 1 = 1 1 + 1 = 2 1 + 2 = 3 2 + 3 = 5 3 + 5 = 8 5 + 8 = 13 8 + 13 = 21 13 + 21 = 34 21 + 34 =
 * 55 34 + 55 = 89 55 + 89 = 144 89 + 144 = 233 144 + 233 = 377 233 + 377 = 610 377 + 610 = 987 610
 * + 987 = 1597 987 + 1597 = 2584
 */
main reactor {
  t = new Test()
  (t.out)+ -> t.in
}
