// Check multiport capabilities on Outputs.
target Rust {
  timeout: 2 sec
}

reactor Source {
  timer t(0, 200 msec)
  output[4] out: u32
  state s: u32 = 0

  reaction(t) -> out {=
    for i in 0..out.len() {
      ctx.set(&mut out[i], self.s);
    }
    self.s += 1;
  =}
}

reactor Computation {
  input in: u32
  output out: u32

  reaction(in) -> out {=
    // No need to sleep for this test.
    // struct timespec sleep_time = {(time_t) 0, (long)200000000};
    // struct timespec remaining_time;
    // nanosleep(&sleep_time, &remaining_time);
    ctx.set(out, ctx.get(r#in).unwrap());
  =}
}

reactor Destination {
  state s: u32 = 0
  input[4] in: u32

  reaction(in) {=
    let mut sum = 0;
    for channel in r#in {
      if let Some(ci) = ctx.get(channel) {
         sum += ci;
      }
    }
    println!("Sum of received: {}", sum);
    assert_eq!(sum, self.s);
    self.s += 4;
  =}

  reaction(shutdown) {=
    assert_ne!(0, self.s);
    println!("Success");
  =}
}

main reactor {
  a = new Source()
  t1 = new Computation()
  t2 = new Computation()
  t3 = new Computation()
  t4 = new Computation()
  b = new Destination()
  a.out -> t1.in, t2.in, t3.in, t4.in
  t1.out, t2.out, t3.out, t4.out -> b.in
}
