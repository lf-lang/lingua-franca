// test a cycled connection which has ports of the same reactor on the LHS and rhs (single port)+ ->
// multiport
target Rust {
  timeout: 16 usec
}

reactor Test {
  output out: u32
  input[2] in: u32
  logical action act: u32
  state last: u32 = 1

  reaction(startup) -> act {= ctx.schedule_with_v(act, Some(1), after!(1 us)); =}

  reaction(act) -> out {= ctx.set_opt(out, ctx.get(act)); =}

  reaction(in) -> act {=
    let sum: u32 = r#in.iterate_values().sum();
    println!("Sum of received: {}", sum);
    assert_eq!(self.last * 2, sum);
    self.last = sum;
    ctx.schedule_with_v(act, Some(sum), after!(1 us));
  =}

  reaction(shutdown) {=
    assert_eq!(self.last, 65536);
    println!("success");
  =}
}

main reactor {
  t = new Test()
  (t.out)+ -> t.in
}
