// Test that scheduling actions drops the previous value if any
target Rust

main reactor ActionValuesCleanup {
  preamble {=
    use std::sync::atomic::AtomicBool;
    use std::sync::atomic::Ordering;
    // set to true when destructor is called
    static mut DROPPED: AtomicBool = AtomicBool::new(false);

    #[derive(Clone, Debug)]
    struct FooDrop { }
    impl std::ops::Drop for FooDrop {
      fn drop(&mut self) {
        unsafe {
          DROPPED.store(true, Ordering::SeqCst);
        }
      }
    }
  =}

  logical action act: FooDrop
  state count: u32 = 0

  reaction(startup) -> act {= ctx.schedule_with_v(act, Some(FooDrop { }), Asap) =}

  reaction(act) -> act {=
    ctx.use_ref(act, |v| println!("{:?}", v));
    if self.count == 0 {
      self.count = 1;
      assert!(ctx.is_present(act));
      assert!(ctx.use_ref(act, |v| v.is_some()));
      ctx.schedule(act, Asap);
    } else if self.count == 1 {
      assert!(ctx.is_present(act));
      assert!(ctx.use_ref(act, |v| v.is_none()));
      assert!(unsafe { DROPPED.load(Ordering::SeqCst) });
      self.count = 2;
    } else {
      unreachable!();
    }
  =}

  reaction(shutdown) {=
    assert_eq!(2, self.count, "expected 2 invocations");
    println!("success");
  =}
}
