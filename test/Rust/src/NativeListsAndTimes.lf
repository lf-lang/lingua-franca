target Rust

// This test passes if it is successfully compiled into valid target code.
reactor Foo(
    x: i32 = 0,
    y: time = 0,  // Units are missing but not required
    z = 1 msec,  // Type is missing but not required
    p: i32[](1, 2, 3, 4),  // List of integers
    p2: i32[] = {= vec![1] =},  // List of integers with single element
    // todo // p2: i32[](1), // List of integers with single element p3: i32[](), // Empty list of
    // integers List of time values
    q: Vec<Duration>(1 msec, 2 msec, 3 msec),
    // List of time values
    g: time[](1 msec, 2 msec)) {
  state s: time = y  // Reference to explicitly typed time parameter
  state t: time = z  // Reference to implicitly typed time parameter
  state v: bool  // Uninitialized boolean state variable
  state w: time  // Uninitialized time state variable
  timer tick(0)  // Units missing but not required
  timer tock(1 sec)  // Implicit type time
  timer toe(z)  // Implicit type time
  /**
   * fixme following should be equivalent:
   * - state baz(p);
   * - state baz: i32[4](p);
   * - state baz: i32[4]({=p=});
   *
   * because the initializer is the same modulo fat braces
   */
  // state baz(p); // Implicit type i32[] fixme this interplays badly with syntax for array init
  // Implicit type time
  state period = z
  state times: Vec<Vec<{= Duration =}>>(q, g)  // a list of lists

  /**
   * reactor Foo (p: i32[](1, 2)) { state baz(p); // Implicit type i32[] state baz({=p=}); //
   * Implicit type i32[] }
   */
  reaction(tick) {=
    // Target code
  =}
}

main reactor NativeListsAndTimes {
  foo = new Foo()
}
