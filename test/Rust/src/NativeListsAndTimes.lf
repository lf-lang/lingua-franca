target Rust

// This test passes if it is successfully compiled into valid target code.
reactor Foo(
    x: i32 = 0,
    y: time = 0,                   // Units are missing but not required
    z = 1 msec,                    // Type is missing but not required
    p: {= [i32; 4] =} = [1, 2, 3, 4],  // array  of integers
    p2: Vec<i32> = {= vec![1] =},  // List of integers with single element
    q: Vec<Duration> = {= vec![delay!(1 msec), delay!(2 msec), delay!(3 msec)] =},
    // Array of time values
    g: {= [Duration; 2] =} = [1 msec, 2 msec]) {
  state s: time = y  // Reference to explicitly typed time parameter
  state t: time = z  // Reference to implicitly typed time parameter
  state v: bool  // Uninitialized boolean state variable
  state w: time  // Uninitialized time state variable
  timer tick(0)  // Units missing but not required
  timer tock(1 sec)  // Implicit type time
  timer toe(z)  // Implicit type time
  // state baz(p); // Implicit type i32[] fixme this interplays badly with syntax for array init
  // Implicit type time
  state period = z
  state times: Vec<Vec<{= Duration =}>> = {= vec![q, g.to_vec() ] =}  // a list of lists

  /**
   * reactor Foo (p: i32[](1, 2)) { state baz(p); // Implicit type i32[] state baz({=p=}); //
   * Implicit type i32[] }
   */
  reaction(tick) {=
    // Target code
  =}
}

main reactor NativeListsAndTimes {
  foo = new Foo()
}
