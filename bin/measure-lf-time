#!/bin/bash

#==========================================================
# Description:  Measure the execution time of a given
#               Lingua Franca program. This is achieved
#               by running the binary for a number of times
# Author:       Soroush Bateni
# Usage:        measure-lf-time [options] file...
#==========================================================

# FIXME: This script currently looks for "Elapsed physical time (in nsec):"
# which are only produced for the C and Python targets.

# The column number of the time value in an LF program's output line that begins
# with "---- Elapsed physical time (in nsec)". This line is currently only
# printed at the end of the execution of a C or Python target program. 
# Currently, the 7th column contains the time value:
# ---- Elapsed physical time (in nsec): xxx
# ^1   ^2      ^3       ^4   ^5  ^6     ^7
time_col=7;

set -euo pipefail

# Print message explaining the arguments
function usage() {
    echo "Usage: measure-lf-time [options] [Binary files]"
    echo "Binary files: binaries for Lingua Franca programs."
    echo "Options:"
    echo "  -n | --number-of-executions num    Run the [generated] binary num times (default is 10)."
    echo "  -l | --log                         Store the output of the commands in directory called \"logs\"."
    echo "  -h | --help                        Display this information."
    echo "  -c | --command  cmd                Run a command a number of times instead of the binary."
}

# Exit with message and error code 1.
function error_exit() {
    1>&2 echo "compilation terminated."
	exit 1
}

# Report error.
function error() {
    1>&2 echo -e "\e[1mmeasure-lf-time: \e[31merror: \e[0m$1"
}

# Report fatal error.
function fatal_error() {
    1>&2 echo -e "\e[1mmeasure-lf-time: \e[31mfatal error: \e[0m$1"
}

# Report that the given file cannot be found.
function file_not_found() {
    error "$1: No such file or directory"
    no_files
}

# Report that a value is missing after a given flag.
function missing_value() {
    1>&2 echo "missing value after flag: '"$1"'"
    fatal_error "malformed arguments"
}

# Process benchmark args
number_of_executions=10
files=()
log=false
commands=()

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -n | --number-of-executions )
            opt=$1
            shift
            if [[ $1 == -* ]]; then
                missing_value $opt
                error_exit
            else
                number_of_executions=$1
            fi
        ;;
        -h | --help )
            usage
            exit 0
            ;;
        -l | --log )
            log=true
            ;;
        -c | --command )
            opt=$1
            shift
            if [[ $1 == -* ]]; then
                missing_value $opt
                error_exit
            else
                commands+=( "$1" )
            fi
            ;;
        -* ) 
            1>&2 echo "Unknown parameter passed: $1"
            usage
            error_exit
            ;;
        * ) 
            if [[ -f "$1" ]]; then
                files+=( $1 )
            else            
                file_not_found $1
                usage
                error_exit
            fi
    esac
    shift
done

entries=${#files[@]}
if [ ${#commands[@]} -lt 1 ]; then
    # If command is not given by the user
    # check if the given binary file exists.
    # Exit if no input files are given.
    if [[ ${entries} -lt 1 ]]; then
        fatal_error "no input files"
        usage
        error_exit
    fi
else
    entries=${#commands[@]}
fi


# Create a logs directory
mkdir -p logs;

# Run benchmark for the given file entries.
for (( i=0; i<$entries; i++ )); do \
    command_to_execute=""
    if [ ! ${#commands[@]} -lt 1 ]; then
        command_to_execute="${commands[$i]}"
    else
        command_to_execute="${files[$i]}"
    fi
    benchmark=$(for k in $(eval echo {1..$number_of_executions}); do
                    $command_to_execute
                done)
    if [ "$log" = true ] ; then
        name_with_spaces=${command_to_execute##*/}
        echo "$benchmark" &> "logs/${name_with_spaces//[[:blank:]]/}-`date +"date-%m-%d-%Y-time-%H-%M-%S"`.log"
    fi

    # Print the headers
    awk 'BEGIN {printf "%-40s %-15s %-15s %-15s %-15s\n", "Benchmark (in nsecs)", "Average", "Minimum", "Maximum", "Median"}'

    results=$(echo "$benchmark" | grep "Elapsed physical time (in nsec):" |
        awk -v time_col="$time_col" -v command_to_execute="$command_to_execute" '
            # In the beginning
            !i++{
                # Remove the , in the number
                gsub(/,/,"", $time_col);
                # And set initial values of min and max
                min=$time_col+0;
                max=$time_col+0;
            }
            # Then
            {
                # Remove the , in the number
                gsub(/,/,"",$time_col);
                # Add numbers in each row to sum
                sum+=$time_col;
                # Calculate new min
                min=($time_col+0<=0+min) ? $time_col:min;
                # Calculate new max
                max=($time_col+0>=0+max) ? $time_col:max;
            }
            # Print the results in the output
            END {
                printf "%-40s %-15s %-15s %-15s", command_to_execute, sum/NR, min, max
            }
        ')
    median=$(echo "$benchmark" | grep "Elapsed physical time (in nsec):" |
        awk -v time_col="$time_col" '
            {
                # Remove the , in the number
                gsub(/,/,"",$time_col);
                # Store the physical execution time in result
                # for each row
                result[NR]=$time_col+0;
            }
            END {
                if (NR % 2) {
                    printf " %-15s\n", result[(NR + 1) / 2];
                } else {
                    printf " %-15s\n", (result[(NR / 2)] + result[(NR / 2) + 1]) / 2.0;
                }
            }
        ')
    echo -e "$results$median"
done