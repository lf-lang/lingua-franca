/*
 * Copyright (c) 2021, TU Dresden.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.lflang.generator.rust

import org.lflang.*
import org.lflang.*
import org.lflang.generator.*
import org.lflang.generator.PrependOperator.rangeTo
import org.lflang.generator.rust.RustEmitter.generateRustProject
import java.nio.file.Files
import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter


/**
 * Shared utilities for rust emitters.
 */
abstract class RustEmitterBase {

    /**
     * Produce a commented out version of the text of this AST node.
     * This is helpful to figure out how the rust code corresponds to
     * the LF code.
     */
    protected fun LocationInfo.lfTextComment() =
        "// --- ${lfText.joinLines()}"


    /** Header comment for generated files. */
    protected fun generatedByComment(delim: String) =
        "$delim-- Generated by LFC @ ${timeFormatter.format(LocalDateTime.now())} --$delim"

    /** Convert a nullable value to a rust option. */
    protected fun TargetCode?.toRustOption(): TargetCode =
        if (this == null) "None"
        else "Some($this)"


    companion object {
        /** Name of the runtime crate that is in its Cargo.toml.*/
        const val runtimeCrateFullName = "reactor_rt"
        const val runtimeGitUrl = "https://github.com/lf-lang/reactor-rust.git"

        /** Qualification prefix to refer to a member of the runtime library crate. */
        const val rsRuntime = "::$runtimeCrateFullName"

        private val timeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss")
    }
}

/**
 * If this is a rust keyword, escape it for it to be interpreted
 * as an identifier, except if this keyword is a valid rust expression.
 */
fun String.escapeRustIdent() = RustTypes.escapeIdentifier(this)
