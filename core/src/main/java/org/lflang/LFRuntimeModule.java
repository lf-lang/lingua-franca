/*
 * generated by Xtext 2.23.0
 */
package org.lflang;

import org.eclipse.xtext.formatting2.IFormatter2;
import org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.validation.INamesAreUniqueValidationHelper;
import org.lflang.formatting2.LFFormatter;
import org.lflang.scoping.LFGlobalScopeProvider;
import org.lflang.validation.LFNamesAreUniqueValidationHelper;

/**
 * Binds services that are available both when running LFC standalone, and when running within the
 * IDE.
 *
 * <ul>
 *   <li>LfIdeModule overrides this module with additional bindings when running in the IDE.
 *   <li>{@code org.lflang.lfc.LFStandaloneModule} overrides this module when running LFC
 *       standalone.
 * </ul>
 */
public class LFRuntimeModule extends AbstractLFRuntimeModule {

  /** Establish a binding to our custom resource description strategy. */
  public Class<? extends IDefaultResourceDescriptionStrategy>
      bindIDefaultResourceDescriptionStrategy() {
    return LFResourceDescriptionStrategy.class;
  }

  /** Establish a binding to our custom global scope provider. */
  @Override
  public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    return LFGlobalScopeProvider.class;
  }

  /** Establish a binding to a helper that checks that names are unique. */
  public Class<? extends INamesAreUniqueValidationHelper> bindNamesAreUniqueValidationHelper() {
    return LFNamesAreUniqueValidationHelper.class;
  }

  public Class<? extends ISyntaxErrorMessageProvider> bindISyntaxErrorMessageProvider() {
    return LFSyntaxErrorMessageProvider.class;
  }

  /** The error reporter. {@code org.lflang.lfc.LFStandaloneModule} overrides this binding. */
  public Class<? extends MessageReporter> bindErrorReporter() {
    return DefaultMessageReporter.class;
  }

  @Override
  public Class<? extends IFormatter2> bindIFormatter2() {
    return LFFormatter.class;
  }
}
