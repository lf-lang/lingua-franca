package org.lflang.pretvm.dag;

import java.util.List;
import org.lflang.pretvm.instructions.Instruction;

/**
 * Class defining a DAG node used in the PretVM context.
 *
 * @author Chadlia Jerad
 * @author Shaokai J. Lin
 */
public abstract class Node {

  /**
   * An integer that counts the number of times the same node has occured in the graph. The value 0
   * means unassigned.
   */
  public int count = 0;

  /**
   * Worker ID that owns this node, if this node is a reaction node. The value -1 means unassigned.
   */
  private int worker = -1;

  /** Color of the node for DOT graph */
  private String hexColor = "#FFFFFF";

  /** A debug message in the generated DOT */
  private String dotDebugMsg = "";

  /** A node is synonymous with another if they have the same nodeType, timeStep, and reaction. */
  abstract boolean isSynonyous(Node that);

  public String getColor() {
    return this.hexColor;
  }

  public void setColor(String hexColor) {
    this.hexColor = hexColor;
  }

  public int getWorker() {
    return this.worker;
  }

  public void setWorker(int worker) {
    this.worker = worker;
  }

  public String getDotDebugMsg() {
    return this.dotDebugMsg;
  }

  public void setDotDebugMsg(String msg) {
    this.dotDebugMsg = msg;
  }

  public boolean isAuxiliary() {
    return (this instanceof ReleaseNode);
  }

  public int getCount() {
    return count;
  }

  public void setCount(int count) {
    this.count = count;
  }

  /**
   * Get instructions generated by this node for a specific worker's instructions. It is important
   * to note that nodes do NOT memorize instructions internally, because the instructions and their
   * order change in the schedule during optimization passes. So source of truth should come from
   * the workerInstructions list. Each instruction memorizes the node it belongs to. When we want to
   * query a list of instructions owned by a node, a _view_ of workerInstructions is generated to
   * collect instructions which belong to that node.
   */
  public List<Instruction> filterInstructions(List<Instruction> workerInstructions) {
    return workerInstructions.stream().filter(it -> it.getNodes().contains(this)).toList();
  }
}
