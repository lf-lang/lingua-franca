package org.lflang.pretvm.dag;

import java.util.List;
import org.lflang.pretvm.instruction.Instruction;

/**
 * Class defining a DAG node used in the PretVM context.
 *
 * @author Chadlia Jerad
 * @author Shaokai J. Lin
 */
public abstract class DagNode {

  //////////////////////////////////////////////////////////////////////
  /// Private Variables

  /** Color of the node for DOT graph */
  private String hexColor = "#FFFFFF";

  //////////////////////////////////////////////////////////////////////
  /// Public Methods

  /**
   * Get instructions generated by this node for a specific worker's instructions. It is important
   * to note that nodes do NOT memorize instructions internally, because the instructions and their
   * order change in the schedule during optimization passes. So source of truth should come from
   * the workerInstructions list. Each instruction memorizes the node it belongs to. When we want to
   * query a list of instructions owned by a node, a _view_ of workerInstructions is generated to
   * collect instructions which belong to that node.
   */
  public List<Instruction> filterInstructions(List<Instruction> workerInstructions) {
    return workerInstructions.stream().filter(it -> it.getNodes().contains(this)).toList();
  }

  /** Return true if the node is an auxiliary node (i.e., not a job node) */
  public boolean isAuxiliary() {
    return !(this instanceof JobNode);
  }

  /** Abstract method to be overriden by subclass for checking if two nodes are synonymous. */
  public abstract boolean isSynonyous(DagNode that);

  /** Get the color of the node rendered in DOT. */
  public String getColor() {
    return this.hexColor;
  }

  /** Set the color of the node rendered in DOT. */
  public void setColor(String hexColor) {
    this.hexColor = hexColor;
  }
}
