/*
 * generated by Xtext 2.26.0
 */

package org.lflang.formatting2;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.diagnostics.Severity;
import org.eclipse.xtext.formatting2.FormatterRequest;
import org.eclipse.xtext.formatting2.IFormatter2;
import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;
import org.eclipse.xtext.formatting2.regionaccess.ITextSegment;
import org.eclipse.xtext.formatting2.regionaccess.internal.TextReplacement;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.lflang.ast.FormattingUtil;

public class LFFormatter implements IFormatter2 {

  @Inject private IResourceValidator validator;

  @Override
  public List<ITextReplacement> format(FormatterRequest request) {
    // TODO: Use a CancelIndicator that actually cancels?
    if (validator
        .validate(
            request.getTextRegionAccess().getResource(), CheckMode.ALL, CancelIndicator.NullImpl)
        .stream()
        .anyMatch(it -> it.isSyntaxError() && it.getSeverity() == Severity.ERROR)) {
      return List.of();
    }
    ITextSegment documentRegion = request.getTextRegionAccess().regionForDocument();
    List<EObject> documentContents = request.getTextRegionAccess().getResource().getContents();
    if (documentContents.isEmpty()) return List.of();
    return List.of(
        new TextReplacement(
            request.getTextRegionAccess(),
            documentRegion.getOffset(),
            documentRegion.getLength(),
            FormattingUtil.render(documentContents.get(0))));
  }
}
